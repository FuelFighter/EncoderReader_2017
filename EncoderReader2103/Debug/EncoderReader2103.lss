
EncoderReader2103.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000bbe  00000c52  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000bbe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000017c  00800106  00800106  00000c58  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c58  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c88  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00000cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001565  00000000  00000000  00000d90  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ef7  00000000  00000000  000022f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a31  00000000  00000000  000031ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a8  00000000  00000000  00003c20  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008da  00000000  00000000  00003dc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000757  00000000  00000000  000046a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00004df9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
   2:	00 00       	nop
   4:	64 c0       	rjmp	.+200    	; 0xce <__bad_interrupt>
   6:	00 00       	nop
   8:	62 c0       	rjmp	.+196    	; 0xce <__bad_interrupt>
   a:	00 00       	nop
   c:	60 c0       	rjmp	.+192    	; 0xce <__bad_interrupt>
   e:	00 00       	nop
  10:	5e c0       	rjmp	.+188    	; 0xce <__bad_interrupt>
  12:	00 00       	nop
  14:	5c c0       	rjmp	.+184    	; 0xce <__bad_interrupt>
  16:	00 00       	nop
  18:	5a c0       	rjmp	.+180    	; 0xce <__bad_interrupt>
  1a:	00 00       	nop
  1c:	58 c0       	rjmp	.+176    	; 0xce <__bad_interrupt>
  1e:	00 00       	nop
  20:	56 c0       	rjmp	.+172    	; 0xce <__bad_interrupt>
  22:	00 00       	nop
  24:	54 c0       	rjmp	.+168    	; 0xce <__bad_interrupt>
  26:	00 00       	nop
  28:	52 c0       	rjmp	.+164    	; 0xce <__bad_interrupt>
  2a:	00 00       	nop
  2c:	50 c0       	rjmp	.+160    	; 0xce <__bad_interrupt>
  2e:	00 00       	nop
  30:	fb c2       	rjmp	.+1526   	; 0x628 <__vector_12>
  32:	00 00       	nop
  34:	4c c0       	rjmp	.+152    	; 0xce <__bad_interrupt>
  36:	00 00       	nop
  38:	4a c0       	rjmp	.+148    	; 0xce <__bad_interrupt>
  3a:	00 00       	nop
  3c:	48 c0       	rjmp	.+144    	; 0xce <__bad_interrupt>
  3e:	00 00       	nop
  40:	46 c0       	rjmp	.+140    	; 0xce <__bad_interrupt>
  42:	00 00       	nop
  44:	44 c0       	rjmp	.+136    	; 0xce <__bad_interrupt>
  46:	00 00       	nop
  48:	66 c0       	rjmp	.+204    	; 0x116 <__vector_18>
  4a:	00 00       	nop
  4c:	40 c0       	rjmp	.+128    	; 0xce <__bad_interrupt>
  4e:	00 00       	nop
  50:	3e c0       	rjmp	.+124    	; 0xce <__bad_interrupt>
  52:	00 00       	nop
  54:	3c c0       	rjmp	.+120    	; 0xce <__bad_interrupt>
  56:	00 00       	nop
  58:	3a c0       	rjmp	.+116    	; 0xce <__bad_interrupt>
  5a:	00 00       	nop
  5c:	38 c0       	rjmp	.+112    	; 0xce <__bad_interrupt>
  5e:	00 00       	nop
  60:	36 c0       	rjmp	.+108    	; 0xce <__bad_interrupt>
  62:	00 00       	nop
  64:	34 c0       	rjmp	.+104    	; 0xce <__bad_interrupt>
  66:	00 00       	nop
  68:	32 c0       	rjmp	.+100    	; 0xce <__bad_interrupt>
  6a:	00 00       	nop
  6c:	30 c0       	rjmp	.+96     	; 0xce <__bad_interrupt>
  6e:	00 00       	nop
  70:	2e c0       	rjmp	.+92     	; 0xce <__bad_interrupt>
  72:	00 00       	nop
  74:	2c c0       	rjmp	.+88     	; 0xce <__bad_interrupt>
  76:	00 00       	nop
  78:	2a c0       	rjmp	.+84     	; 0xce <__bad_interrupt>
  7a:	00 00       	nop
  7c:	28 c0       	rjmp	.+80     	; 0xce <__bad_interrupt>
  7e:	00 00       	nop
  80:	26 c0       	rjmp	.+76     	; 0xce <__bad_interrupt>
  82:	00 00       	nop
  84:	24 c0       	rjmp	.+72     	; 0xce <__bad_interrupt>
  86:	00 00       	nop
  88:	22 c0       	rjmp	.+68     	; 0xce <__bad_interrupt>
  8a:	00 00       	nop
  8c:	20 c0       	rjmp	.+64     	; 0xce <__bad_interrupt>
  8e:	00 00       	nop
  90:	1e c0       	rjmp	.+60     	; 0xce <__bad_interrupt>
	...

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_clear_bss>:
  a0:	22 e0       	ldi	r18, 0x02	; 2
  a2:	a6 e0       	ldi	r26, 0x06	; 6
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	01 c0       	rjmp	.+2      	; 0xaa <.do_clear_bss_start>

000000a8 <.do_clear_bss_loop>:
  a8:	1d 92       	st	X+, r1

000000aa <.do_clear_bss_start>:
  aa:	a2 38       	cpi	r26, 0x82	; 130
  ac:	b2 07       	cpc	r27, r18
  ae:	e1 f7       	brne	.-8      	; 0xa8 <.do_clear_bss_loop>

000000b0 <__do_copy_data>:
  b0:	11 e0       	ldi	r17, 0x01	; 1
  b2:	a0 e0       	ldi	r26, 0x00	; 0
  b4:	b1 e0       	ldi	r27, 0x01	; 1
  b6:	ee eb       	ldi	r30, 0xBE	; 190
  b8:	fb e0       	ldi	r31, 0x0B	; 11
  ba:	00 e0       	ldi	r16, 0x00	; 0
  bc:	0b bf       	out	0x3b, r16	; 59
  be:	02 c0       	rjmp	.+4      	; 0xc4 <__do_copy_data+0x14>
  c0:	07 90       	elpm	r0, Z+
  c2:	0d 92       	st	X+, r0
  c4:	a6 30       	cpi	r26, 0x06	; 6
  c6:	b1 07       	cpc	r27, r17
  c8:	d9 f7       	brne	.-10     	; 0xc0 <__do_copy_data+0x10>
  ca:	19 d2       	rcall	.+1074   	; 0x4fe <main>
  cc:	76 c5       	rjmp	.+2796   	; 0xbba <_exit>

000000ce <__bad_interrupt>:
  ce:	98 cf       	rjmp	.-208    	; 0x0 <__vectors>

000000d0 <adc_init>:
#include <avr/io.h>

void adc_init(void){
	
	/* Voltage ref AVcc with external capacitor on AREF pin */
	ADMUX |= (1<<REFS0);
  d0:	ec e7       	ldi	r30, 0x7C	; 124
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	80 81       	ld	r24, Z
  d6:	80 64       	ori	r24, 0x40	; 64
  d8:	80 83       	st	Z, r24
	
	/* Select prescaler to 64 --> conversion f= 125kHz */
	ADCSRA |= (1<<ADPS2)|(1<<ADPS2);
  da:	ea e7       	ldi	r30, 0x7A	; 122
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	80 81       	ld	r24, Z
  e0:	84 60       	ori	r24, 0x04	; 4
  e2:	80 83       	st	Z, r24
	
	/* Enable the ADC */
	ADCSRA |= (1<<ADEN);
  e4:	80 81       	ld	r24, Z
  e6:	80 68       	ori	r24, 0x80	; 128
  e8:	80 83       	st	Z, r24
  ea:	08 95       	ret

000000ec <adc_read>:
}

uint16_t adc_read(adc_channel_t channel){
	
	//Setting channel and type of reading, see enum in adc.h 
	ADMUX &= 0b11100000;
  ec:	ec e7       	ldi	r30, 0x7C	; 124
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	90 81       	ld	r25, Z
  f2:	90 7e       	andi	r25, 0xE0	; 224
  f4:	90 83       	st	Z, r25
	ADMUX |= (int8_t)channel;	
  f6:	90 81       	ld	r25, Z
  f8:	89 2b       	or	r24, r25
  fa:	80 83       	st	Z, r24
		
	/* Start the conversion */
	ADCSRA |= (1<<ADSC);
  fc:	ea e7       	ldi	r30, 0x7A	; 122
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	80 81       	ld	r24, Z
 102:	80 64       	ori	r24, 0x40	; 64
 104:	80 83       	st	Z, r24
	
	/* Wait for the conversion to complete */
	while(ADCSRA & (1<<ADSC));
 106:	80 81       	ld	r24, Z
 108:	86 fd       	sbrc	r24, 6
 10a:	fd cf       	rjmp	.-6      	; 0x106 <adc_read+0x1a>
	
	return ADC;
 10c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 110:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
}
 114:	08 95       	ret

00000116 <__vector_18>:
	if (rx_on != rx_off) {
		rx_off++;
	}

	return true;
}
 116:	1f 92       	push	r1
 118:	0f 92       	push	r0
 11a:	0f b6       	in	r0, 0x3f	; 63
 11c:	0f 92       	push	r0
 11e:	11 24       	eor	r1, r1
 120:	0b b6       	in	r0, 0x3b	; 59
 122:	0f 92       	push	r0
 124:	2f 93       	push	r18
 126:	3f 93       	push	r19
 128:	4f 93       	push	r20
 12a:	5f 93       	push	r21
 12c:	6f 93       	push	r22
 12e:	8f 93       	push	r24
 130:	9f 93       	push	r25
 132:	af 93       	push	r26
 134:	bf 93       	push	r27
 136:	ef 93       	push	r30
 138:	ff 93       	push	r31
 13a:	cf 93       	push	r28
 13c:	df 93       	push	r29
 13e:	1f 92       	push	r1
 140:	cd b7       	in	r28, 0x3d	; 61
 142:	de b7       	in	r29, 0x3e	; 62
 144:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
 148:	80 ff       	sbrs	r24, 0
 14a:	47 c0       	rjmp	.+142    	; 0x1da <__vector_18+0xc4>
 14c:	90 91 de 00 	lds	r25, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
 150:	90 ff       	sbrs	r25, 0
 152:	43 c0       	rjmp	.+134    	; 0x1da <__vector_18+0xc4>
 154:	10 92 ed 00 	sts	0x00ED, r1	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 158:	ee ee       	ldi	r30, 0xEE	; 238
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	80 81       	ld	r24, Z
 15e:	89 83       	std	Y+1, r24	; 0x01
 160:	80 81       	ld	r24, Z
 162:	8f 7b       	andi	r24, 0xBF	; 191
 164:	80 83       	st	Z, r24
 166:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <tx_off>
 16a:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <tx_on>
 16e:	98 17       	cp	r25, r24
 170:	89 f1       	breq	.+98     	; 0x1d4 <__vector_18+0xbe>
 172:	8f 70       	andi	r24, 0x0F	; 15
 174:	2b e0       	ldi	r18, 0x0B	; 11
 176:	82 9f       	mul	r24, r18
 178:	c0 01       	movw	r24, r0
 17a:	11 24       	eor	r1, r1
 17c:	fc 01       	movw	r30, r24
 17e:	e4 54       	subi	r30, 0x44	; 68
 180:	fe 4f       	sbci	r31, 0xFE	; 254
 182:	20 81       	ld	r18, Z
 184:	20 93 f0 00 	sts	0x00F0, r18	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 188:	20 81       	ld	r18, Z
 18a:	20 93 f2 00 	sts	0x00F2, r18	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 18e:	21 81       	ldd	r18, Z+1	; 0x01
 190:	20 93 f3 00 	sts	0x00F3, r18	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 194:	23 81       	ldd	r18, Z+3	; 0x03
 196:	aa ef       	ldi	r26, 0xFA	; 250
 198:	b0 e0       	ldi	r27, 0x00	; 0
 19a:	2c 93       	st	X, r18
 19c:	24 81       	ldd	r18, Z+4	; 0x04
 19e:	2c 93       	st	X, r18
 1a0:	25 81       	ldd	r18, Z+5	; 0x05
 1a2:	2c 93       	st	X, r18
 1a4:	26 81       	ldd	r18, Z+6	; 0x06
 1a6:	2c 93       	st	X, r18
 1a8:	27 81       	ldd	r18, Z+7	; 0x07
 1aa:	2c 93       	st	X, r18
 1ac:	20 85       	ldd	r18, Z+8	; 0x08
 1ae:	2c 93       	st	X, r18
 1b0:	21 85       	ldd	r18, Z+9	; 0x09
 1b2:	2c 93       	st	X, r18
 1b4:	22 85       	ldd	r18, Z+10	; 0x0a
 1b6:	2c 93       	st	X, r18
 1b8:	fc 01       	movw	r30, r24
 1ba:	e2 54       	subi	r30, 0x42	; 66
 1bc:	fe 4f       	sbci	r31, 0xFE	; 254
 1be:	80 81       	ld	r24, Z
 1c0:	8f 70       	andi	r24, 0x0F	; 15
 1c2:	80 64       	ori	r24, 0x40	; 64
 1c4:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
 1c8:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <tx_off>
 1cc:	8f 5f       	subi	r24, 0xFF	; 255
 1ce:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <tx_off>
 1d2:	7d c0       	rjmp	.+250    	; 0x2ce <__vector_18+0x1b8>
 1d4:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <tx_busy>
 1d8:	7a c0       	rjmp	.+244    	; 0x2ce <__vector_18+0x1b8>
 1da:	81 ff       	sbrs	r24, 1
 1dc:	78 c0       	rjmp	.+240    	; 0x2ce <__vector_18+0x1b8>
 1de:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
 1e2:	81 ff       	sbrs	r24, 1
 1e4:	74 c0       	rjmp	.+232    	; 0x2ce <__vector_18+0x1b8>
 1e6:	80 e1       	ldi	r24, 0x10	; 16
 1e8:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 1ec:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <rx_on>
 1f0:	28 2f       	mov	r18, r24
 1f2:	30 e0       	ldi	r19, 0x00	; 0
 1f4:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <rx_off>
 1f8:	29 1b       	sub	r18, r25
 1fa:	31 09       	sbc	r19, r1
 1fc:	2f 77       	andi	r18, 0x7F	; 127
 1fe:	33 27       	eor	r19, r19
 200:	20 31       	cpi	r18, 0x10	; 16
 202:	31 05       	cpc	r19, r1
 204:	0c f0       	brlt	.+2      	; 0x208 <__vector_18+0xf2>
 206:	58 c0       	rjmp	.+176    	; 0x2b8 <__vector_18+0x1a2>
 208:	e8 2f       	mov	r30, r24
 20a:	ef 70       	andi	r30, 0x0F	; 15
 20c:	90 91 ef 00 	lds	r25, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
 210:	2e 2f       	mov	r18, r30
 212:	30 e0       	ldi	r19, 0x00	; 0
 214:	4b e0       	ldi	r20, 0x0B	; 11
 216:	e4 9f       	mul	r30, r20
 218:	f0 01       	movw	r30, r0
 21a:	11 24       	eor	r1, r1
 21c:	e4 5f       	subi	r30, 0xF4	; 244
 21e:	fe 4f       	sbci	r31, 0xFE	; 254
 220:	9f 70       	andi	r25, 0x0F	; 15
 222:	42 81       	ldd	r20, Z+2	; 0x02
 224:	40 7f       	andi	r20, 0xF0	; 240
 226:	94 2b       	or	r25, r20
 228:	92 83       	std	Z+2, r25	; 0x02
 22a:	90 91 f2 00 	lds	r25, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 22e:	40 91 f0 00 	lds	r20, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 232:	47 70       	andi	r20, 0x07	; 7
 234:	90 7e       	andi	r25, 0xE0	; 224
 236:	94 2b       	or	r25, r20
 238:	90 83       	st	Z, r25
 23a:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 23e:	91 83       	std	Z+1, r25	; 0x01
 240:	aa ef       	ldi	r26, 0xFA	; 250
 242:	b0 e0       	ldi	r27, 0x00	; 0
 244:	9c 91       	ld	r25, X
 246:	93 83       	std	Z+3, r25	; 0x03
 248:	9c 91       	ld	r25, X
 24a:	94 83       	std	Z+4, r25	; 0x04
 24c:	9c 91       	ld	r25, X
 24e:	95 83       	std	Z+5, r25	; 0x05
 250:	9c 91       	ld	r25, X
 252:	96 83       	std	Z+6, r25	; 0x06
 254:	9c 91       	ld	r25, X
 256:	97 83       	std	Z+7, r25	; 0x07
 258:	9c 91       	ld	r25, X
 25a:	90 87       	std	Z+8, r25	; 0x08
 25c:	9c 91       	ld	r25, X
 25e:	91 87       	std	Z+9, r25	; 0x09
 260:	9c 91       	ld	r25, X
 262:	92 87       	std	Z+10, r25	; 0x0a
 264:	8f 5f       	subi	r24, 0xFF	; 255
 266:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <rx_on>
 26a:	40 81       	ld	r20, Z
 26c:	42 95       	swap	r20
 26e:	46 95       	lsr	r20
 270:	47 70       	andi	r20, 0x07	; 7
 272:	51 81       	ldd	r21, Z+1	; 0x01
 274:	65 2f       	mov	r22, r21
 276:	66 0f       	add	r22, r22
 278:	66 0f       	add	r22, r22
 27a:	66 0f       	add	r22, r22
 27c:	86 2f       	mov	r24, r22
 27e:	84 2b       	or	r24, r20
 280:	95 2f       	mov	r25, r21
 282:	92 95       	swap	r25
 284:	96 95       	lsr	r25
 286:	97 70       	andi	r25, 0x07	; 7
 288:	89 2b       	or	r24, r25
 28a:	b1 f4       	brne	.+44     	; 0x2b8 <__vector_18+0x1a2>
 28c:	8b e0       	ldi	r24, 0x0B	; 11
 28e:	82 9f       	mul	r24, r18
 290:	f0 01       	movw	r30, r0
 292:	83 9f       	mul	r24, r19
 294:	f0 0d       	add	r31, r0
 296:	11 24       	eor	r1, r1
 298:	e4 5f       	subi	r30, 0xF4	; 244
 29a:	fe 4f       	sbci	r31, 0xFE	; 254
 29c:	83 81       	ldd	r24, Z+3	; 0x03
 29e:	83 30       	cpi	r24, 0x03	; 3
 2a0:	59 f4       	brne	.+22     	; 0x2b8 <__vector_18+0x1a2>
 2a2:	98 e0       	ldi	r25, 0x08	; 8
 2a4:	88 e1       	ldi	r24, 0x18	; 24
 2a6:	0f b6       	in	r0, 0x3f	; 63
 2a8:	f8 94       	cli
 2aa:	a8 95       	wdr
 2ac:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
 2b0:	0f be       	out	0x3f, r0	; 63
 2b2:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
 2b6:	ff cf       	rjmp	.-2      	; 0x2b6 <__vector_18+0x1a0>
 2b8:	ee ee       	ldi	r30, 0xEE	; 238
 2ba:	f0 e0       	ldi	r31, 0x00	; 0
 2bc:	80 81       	ld	r24, Z
 2be:	89 83       	std	Y+1, r24	; 0x01
 2c0:	89 81       	ldd	r24, Y+1	; 0x01
 2c2:	80 81       	ld	r24, Z
 2c4:	8f 7d       	andi	r24, 0xDF	; 223
 2c6:	80 83       	st	Z, r24
 2c8:	80 e8       	ldi	r24, 0x80	; 128
 2ca:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
 2ce:	0f 90       	pop	r0
 2d0:	df 91       	pop	r29
 2d2:	cf 91       	pop	r28
 2d4:	ff 91       	pop	r31
 2d6:	ef 91       	pop	r30
 2d8:	bf 91       	pop	r27
 2da:	af 91       	pop	r26
 2dc:	9f 91       	pop	r25
 2de:	8f 91       	pop	r24
 2e0:	6f 91       	pop	r22
 2e2:	5f 91       	pop	r21
 2e4:	4f 91       	pop	r20
 2e6:	3f 91       	pop	r19
 2e8:	2f 91       	pop	r18
 2ea:	0f 90       	pop	r0
 2ec:	0b be       	out	0x3b, r0	; 59
 2ee:	0f 90       	pop	r0
 2f0:	0f be       	out	0x3f, r0	; 63
 2f2:	0f 90       	pop	r0
 2f4:	1f 90       	pop	r1
 2f6:	18 95       	reti

000002f8 <can_init>:
 2f8:	cf 93       	push	r28
 2fa:	df 93       	push	r29
 2fc:	e8 ed       	ldi	r30, 0xD8	; 216
 2fe:	f0 e0       	ldi	r31, 0x00	; 0
 300:	21 e0       	ldi	r18, 0x01	; 1
 302:	20 83       	st	Z, r18
 304:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 308:	2c e0       	ldi	r18, 0x0C	; 12
 30a:	20 93 e3 00 	sts	0x00E3, r18	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
 30e:	27 e3       	ldi	r18, 0x37	; 55
 310:	20 93 e4 00 	sts	0x00E4, r18	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
 314:	10 92 e7 00 	sts	0x00E7, r1	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7e00e7>
 318:	10 92 e6 00 	sts	0x00E6, r1	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7e00e6>
 31c:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 320:	10 92 e8 00 	sts	0x00E8, r1	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 324:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
 328:	10 92 e5 00 	sts	0x00E5, r1	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
 32c:	cd ee       	ldi	r28, 0xED	; 237
 32e:	d0 e0       	ldi	r29, 0x00	; 0
 330:	18 82       	st	Y, r1
 332:	ae ee       	ldi	r26, 0xEE	; 238
 334:	b0 e0       	ldi	r27, 0x00	; 0
 336:	1c 92       	st	X, r1
 338:	20 e1       	ldi	r18, 0x10	; 16
 33a:	28 83       	st	Y, r18
 33c:	1c 92       	st	X, r1
 33e:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7e00f4>
 342:	28 2f       	mov	r18, r24
 344:	22 95       	swap	r18
 346:	22 0f       	add	r18, r18
 348:	20 7e       	andi	r18, 0xE0	; 224
 34a:	20 93 f6 00 	sts	0x00F6, r18	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
 34e:	96 95       	lsr	r25
 350:	87 95       	ror	r24
 352:	96 95       	lsr	r25
 354:	87 95       	ror	r24
 356:	96 95       	lsr	r25
 358:	87 95       	ror	r24
 35a:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
 35e:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 362:	86 2f       	mov	r24, r22
 364:	82 95       	swap	r24
 366:	88 0f       	add	r24, r24
 368:	80 7e       	andi	r24, 0xE0	; 224
 36a:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 36e:	76 95       	lsr	r23
 370:	67 95       	ror	r22
 372:	76 95       	lsr	r23
 374:	67 95       	ror	r22
 376:	76 95       	lsr	r23
 378:	67 95       	ror	r22
 37a:	60 93 f3 00 	sts	0x00F3, r22	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 37e:	80 e8       	ldi	r24, 0x80	; 128
 380:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
 384:	83 e0       	ldi	r24, 0x03	; 3
 386:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
 38a:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
 38e:	80 eb       	ldi	r24, 0xB0	; 176
 390:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
 394:	82 e0       	ldi	r24, 0x02	; 2
 396:	80 83       	st	Z, r24
 398:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <__data_end>
 39c:	df 91       	pop	r29
 39e:	cf 91       	pop	r28
 3a0:	08 95       	ret

000003a2 <can_send_message>:

bool can_send_message(CanMessage_t* message) {
 3a2:	cf 93       	push	r28
 3a4:	df 93       	push	r29
 3a6:	fc 01       	movw	r30, r24
	bool result = false;

	CANGIE &= ~(1 << ENIT);
 3a8:	ab ed       	ldi	r26, 0xDB	; 219
 3aa:	b0 e0       	ldi	r27, 0x00	; 0
 3ac:	8c 91       	ld	r24, X
 3ae:	8f 77       	andi	r24, 0x7F	; 127
 3b0:	8c 93       	st	X, r24

	if (!tx_busy) {
 3b2:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <tx_busy>
 3b6:	81 11       	cpse	r24, r1
 3b8:	27 c0       	rjmp	.+78     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
		// Switch to Mob 0 access
		CANPAGE = 0 << 4;
 3ba:	10 92 ed 00 	sts	0x00ED, r1	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>

		// Set ID
		CANIDT2 = message->id << 5;
 3be:	80 81       	ld	r24, Z
 3c0:	82 95       	swap	r24
 3c2:	88 0f       	add	r24, r24
 3c4:	80 7e       	andi	r24, 0xE0	; 224
 3c6:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
		CANIDT1 = message->id >> 3;
 3ca:	80 81       	ld	r24, Z
 3cc:	91 81       	ldd	r25, Z+1	; 0x01
 3ce:	96 95       	lsr	r25
 3d0:	87 95       	ror	r24
 3d2:	96 95       	lsr	r25
 3d4:	87 95       	ror	r24
 3d6:	96 95       	lsr	r25
 3d8:	87 95       	ror	r24
 3da:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 3de:	df 01       	movw	r26, r30
 3e0:	13 96       	adiw	r26, 0x03	; 3
 3e2:	9f 01       	movw	r18, r30
 3e4:	25 5f       	subi	r18, 0xF5	; 245
 3e6:	3f 4f       	sbci	r19, 0xFF	; 255

		// Program data registers - auto increment
		for (int i = 0; i < 8; i++) {
			CANMSG = message->data[i];
 3e8:	ca ef       	ldi	r28, 0xFA	; 250
 3ea:	d0 e0       	ldi	r29, 0x00	; 0
 3ec:	9d 91       	ld	r25, X+
 3ee:	98 83       	st	Y, r25
		// Set ID
		CANIDT2 = message->id << 5;
		CANIDT1 = message->id >> 3;

		// Program data registers - auto increment
		for (int i = 0; i < 8; i++) {
 3f0:	a2 17       	cp	r26, r18
 3f2:	b3 07       	cpc	r27, r19
 3f4:	d9 f7       	brne	.-10     	; 0x3ec <can_send_message+0x4a>
			CANMSG = message->data[i];
		}
		
		result = true;
		tx_busy = 1;
 3f6:	81 e0       	ldi	r24, 0x01	; 1
 3f8:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <tx_busy>

		// Set length, start send which restarts tx interrupt
		CANCDMOB = (1 << CONMOB0) | message->length;
 3fc:	82 81       	ldd	r24, Z+2	; 0x02
 3fe:	80 64       	ori	r24, 0x40	; 64
 400:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
		// Program data registers - auto increment
		for (int i = 0; i < 8; i++) {
			CANMSG = message->data[i];
		}
		
		result = true;
 404:	81 e0       	ldi	r24, 0x01	; 1
 406:	3c c0       	rjmp	.+120    	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
		tx_busy = 1;

		// Set length, start send which restarts tx interrupt
		CANCDMOB = (1 << CONMOB0) | message->length;
	}
	else if (TX_SIZE - ((tx_on - tx_off) & TX_ABS_MASK)) {
 408:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <tx_on>
 40c:	82 2f       	mov	r24, r18
 40e:	90 e0       	ldi	r25, 0x00	; 0
 410:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <tx_off>
 414:	83 1b       	sub	r24, r19
 416:	91 09       	sbc	r25, r1
 418:	8f 77       	andi	r24, 0x7F	; 127
 41a:	99 27       	eor	r25, r25
 41c:	40 97       	sbiw	r24, 0x10	; 16
 41e:	79 f1       	breq	.+94     	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
		// Copy data into TX buffer
		tx_frames[tx_on & (TX_SIZE-1)].id = message->id;
 420:	a2 2f       	mov	r26, r18
 422:	af 70       	andi	r26, 0x0F	; 15
 424:	8b e0       	ldi	r24, 0x0B	; 11
 426:	a8 9f       	mul	r26, r24
 428:	d0 01       	movw	r26, r0
 42a:	11 24       	eor	r1, r1
 42c:	ed 01       	movw	r28, r26
 42e:	c4 54       	subi	r28, 0x44	; 68
 430:	de 4f       	sbci	r29, 0xFE	; 254
 432:	80 81       	ld	r24, Z
 434:	38 2f       	mov	r19, r24
 436:	32 95       	swap	r19
 438:	33 0f       	add	r19, r19
 43a:	30 7e       	andi	r19, 0xE0	; 224
 43c:	98 81       	ld	r25, Y
 43e:	9f 71       	andi	r25, 0x1F	; 31
 440:	93 2b       	or	r25, r19
 442:	98 83       	st	Y, r25
 444:	91 81       	ldd	r25, Z+1	; 0x01
 446:	92 95       	swap	r25
 448:	99 0f       	add	r25, r25
 44a:	90 7e       	andi	r25, 0xE0	; 224
 44c:	86 95       	lsr	r24
 44e:	86 95       	lsr	r24
 450:	86 95       	lsr	r24
 452:	89 2b       	or	r24, r25
 454:	89 83       	std	Y+1, r24	; 0x01
		tx_frames[tx_on & (TX_SIZE-1)].length = message->length;
 456:	82 81       	ldd	r24, Z+2	; 0x02
 458:	98 2f       	mov	r25, r24
 45a:	9f 70       	andi	r25, 0x0F	; 15
 45c:	8a 81       	ldd	r24, Y+2	; 0x02
 45e:	80 7f       	andi	r24, 0xF0	; 240
 460:	89 2b       	or	r24, r25
 462:	8a 83       	std	Y+2, r24	; 0x02
		memcpy(tx_frames[tx_on & (TX_SIZE-1)].data, message->data, CAN_FRAME_DATA_MAX_LENGTH);
 464:	a1 54       	subi	r26, 0x41	; 65
 466:	be 4f       	sbci	r27, 0xFE	; 254
 468:	88 e0       	ldi	r24, 0x08	; 8
 46a:	33 96       	adiw	r30, 0x03	; 3
 46c:	01 90       	ld	r0, Z+
 46e:	0d 92       	st	X+, r0
 470:	8a 95       	dec	r24
 472:	e1 f7       	brne	.-8      	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>

		/*for (int i = 0; i < 8; i++) {
			tx_frames[tx_on & (TX_SIZE-1)].data[i] = message->data[i];
		}*/

		tx_on++;
 474:	2f 5f       	subi	r18, 0xFF	; 255
 476:	20 93 0a 01 	sts	0x010A, r18	; 0x80010a <tx_on>
		result = true;
 47a:	81 e0       	ldi	r24, 0x01	; 1
 47c:	01 c0       	rjmp	.+2      	; 0x480 <__LOCK_REGION_LENGTH__+0x80>

	return true;
}

bool can_send_message(CanMessage_t* message) {
	bool result = false;
 47e:	80 e0       	ldi	r24, 0x00	; 0

		tx_on++;
		result = true;
	}

	CANGIE |= (1 << ENIT);
 480:	eb ed       	ldi	r30, 0xDB	; 219
 482:	f0 e0       	ldi	r31, 0x00	; 0
 484:	90 81       	ld	r25, Z
 486:	90 68       	ori	r25, 0x80	; 128
 488:	90 83       	st	Z, r25

	return result;
 48a:	df 91       	pop	r29
 48c:	cf 91       	pop	r28
 48e:	08 95       	ret

00000490 <usbdbg_tx_char>:
	fdevopen(usbdbg_tx_char, NULL);
}

int usbdbg_tx_char(char c, FILE* stream)
{
	while (!(UCSR0A & (1 << UDRE0))) { }; // Wait until data register is empty
 490:	e0 ec       	ldi	r30, 0xC0	; 192
 492:	f0 e0       	ldi	r31, 0x00	; 0
 494:	90 81       	ld	r25, Z
 496:	95 ff       	sbrs	r25, 5
 498:	fd cf       	rjmp	.-6      	; 0x494 <usbdbg_tx_char+0x4>
	UDR0 = c;
 49a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	return 1;
}
 49e:	81 e0       	ldi	r24, 0x01	; 1
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	08 95       	ret

000004a4 <usbdbg_init>:
#include <stdlib.h>

void usbdbg_init()
{
	const uint32_t baud_rate = 19200;
	UBRR0 = (F_CPU / 16) / baud_rate - 1;
 4a4:	89 e1       	ldi	r24, 0x19	; 25
 4a6:	90 e0       	ldi	r25, 0x00	; 0
 4a8:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 4ac:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UCSR0C = (3 << UCSZ0);	// 8 bit transfer
 4b0:	86 e0       	ldi	r24, 0x06	; 6
 4b2:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UCSR0B |= (1 << TXEN0)|(1<<RXEN0)|(1<<RXCIE0); // Enable receive and transmit
 4b6:	e1 ec       	ldi	r30, 0xC1	; 193
 4b8:	f0 e0       	ldi	r31, 0x00	; 0
 4ba:	80 81       	ld	r24, Z
 4bc:	88 69       	ori	r24, 0x98	; 152
 4be:	80 83       	st	Z, r24
	
	fdevopen(usbdbg_tx_char, NULL);
 4c0:	60 e0       	ldi	r22, 0x00	; 0
 4c2:	70 e0       	ldi	r23, 0x00	; 0
 4c4:	88 e4       	ldi	r24, 0x48	; 72
 4c6:	92 e0       	ldi	r25, 0x02	; 2
 4c8:	e0 c1       	rjmp	.+960    	; 0x88a <fdevopen>
 4ca:	08 95       	ret

000004cc <pin_init>:
static uint8_t calculate = 0;
static CanMessage_t canMessage;

void pin_init(){
	//Encoder 1 pin init
	DDRD &= ~((1<<ENCODER_A_1)|(1<<ENCODER_A_2)|(1<<WHEEL_PIN));
 4cc:	8a b1       	in	r24, 0x0a	; 10
 4ce:	81 7f       	andi	r24, 0xF1	; 241
 4d0:	8a b9       	out	0x0a, r24	; 10
 4d2:	08 95       	ret

000004d4 <timer_init>:
}

void timer_init(){
	//Calculating speed 10 times a second.
	// ClkIO/64
	TCCR1B |= (1<<CS11)|(1<<CS10);
 4d4:	e1 e8       	ldi	r30, 0x81	; 129
 4d6:	f0 e0       	ldi	r31, 0x00	; 0
 4d8:	80 81       	ld	r24, Z
 4da:	83 60       	ori	r24, 0x03	; 3
 4dc:	80 83       	st	Z, r24
	//Enable Interrupt
	TIMSK1 |= (1<<OCIE1A);
 4de:	ef e6       	ldi	r30, 0x6F	; 111
 4e0:	f0 e0       	ldi	r31, 0x00	; 0
 4e2:	80 81       	ld	r24, Z
 4e4:	82 60       	ori	r24, 0x02	; 2
 4e6:	80 83       	st	Z, r24
	//Setting Compare register
	OCR1A = 12500;
 4e8:	84 ed       	ldi	r24, 0xD4	; 212
 4ea:	90 e3       	ldi	r25, 0x30	; 48
 4ec:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 4f0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	//Resetting Timer register
	TCNT1 = 0;
 4f4:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 4f8:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 4fc:	08 95       	ret

000004fe <main>:
}

int main(void)
{
	cli();
 4fe:	f8 94       	cli
	pin_init();
 500:	e5 df       	rcall	.-54     	; 0x4cc <pin_init>
	usbdbg_init();
 502:	d0 df       	rcall	.-96     	; 0x4a4 <usbdbg_init>
	timer_init();
 504:	e7 df       	rcall	.-50     	; 0x4d4 <timer_init>
	can_init(0,0);
 506:	60 e0       	ldi	r22, 0x00	; 0
 508:	70 e0       	ldi	r23, 0x00	; 0
 50a:	80 e0       	ldi	r24, 0x00	; 0
 50c:	90 e0       	ldi	r25, 0x00	; 0
 50e:	f4 de       	rcall	.-536    	; 0x2f8 <can_init>
	adc_init();
 510:	df dd       	rcall	.-1090   	; 0xd0 <adc_init>
	sei();
 512:	78 94       	sei
	
	canMessage.id = ENCODER_ID;
 514:	ec e6       	ldi	r30, 0x6C	; 108
 516:	f2 e0       	ldi	r31, 0x02	; 2
 518:	85 e0       	ldi	r24, 0x05	; 5
 51a:	90 e0       	ldi	r25, 0x00	; 0
 51c:	91 83       	std	Z+1, r25	; 0x01
 51e:	80 83       	st	Z, r24
	canMessage.length = 6;
 520:	86 e0       	ldi	r24, 0x06	; 6
 522:	82 83       	std	Z+2, r24	; 0x02
	uint16_t countWheel = 0;
	uint16_t rpmWheel = 0;
	
	uint8_t state1 = 0;
	uint8_t state2 = 0;
	uint8_t stateWheel = 0;
 524:	71 2c       	mov	r7, r1
	
	uint16_t countWheel = 0;
	uint16_t rpmWheel = 0;
	
	uint8_t state1 = 0;
	uint8_t state2 = 0;
 526:	81 2c       	mov	r8, r1
	uint16_t rpm2 = 0;
	
	uint16_t countWheel = 0;
	uint16_t rpmWheel = 0;
	
	uint8_t state1 = 0;
 528:	91 2c       	mov	r9, r1
	uint16_t rpm1 = 0;
	
	uint16_t count2 = 0;
	uint16_t rpm2 = 0;
	
	uint16_t countWheel = 0;
 52a:	e1 2c       	mov	r14, r1
 52c:	f1 2c       	mov	r15, r1
	
	uint8_t printCount = 0;
	uint16_t count1 = 0;
	uint16_t rpm1 = 0;
	
	uint16_t count2 = 0;
 52e:	00 e0       	ldi	r16, 0x00	; 0
 530:	10 e0       	ldi	r17, 0x00	; 0
	
	canMessage.id = ENCODER_ID;
	canMessage.length = 6;
	
	uint8_t printCount = 0;
	uint16_t count1 = 0;
 532:	c0 e0       	ldi	r28, 0x00	; 0
 534:	d0 e0       	ldi	r29, 0x00	; 0
			measuredTorque = adc_read(CH_ADC3) * BIT_TO_TORQUE;
			
			calculate = 0;
			printCount++;
			rpm1 = count1 * COUNTCONSTANT;
			canMessage.data[0] = (rpm1 >> 8);
 536:	6f 01       	movw	r12, r30
			
			count1 = 0;
			count2 = 0;
			countWheel = 0;
			measuredTorque = 0;
			TCNT1 = 0;
 538:	0f 2e       	mov	r0, r31
 53a:	f4 e8       	ldi	r31, 0x84	; 132
 53c:	af 2e       	mov	r10, r31
 53e:	b1 2c       	mov	r11, r1
 540:	f0 2d       	mov	r31, r0
			
			can_send_message(&canMessage);
			
			count1 = 0;
			count2 = 0;
			countWheel = 0;
 542:	41 2c       	mov	r4, r1
 544:	51 2c       	mov	r5, r1
		if ((PIND & (1<<ENCODER_A_1)) && !state1)
		{
			cli();
			count1++;
			sei();	
			state1 = 1;
 546:	66 24       	eor	r6, r6
 548:	63 94       	inc	r6
	uint8_t stateWheel = 0;
    int16_t measuredTorque = 0;
	
	while (1) 
    {
		if (calculate == 1)
 54a:	90 91 77 02 	lds	r25, 0x0277	; 0x800277 <calculate>
 54e:	91 30       	cpi	r25, 0x01	; 1
 550:	09 f0       	breq	.+2      	; 0x554 <main+0x56>
 552:	44 c0       	rjmp	.+136    	; 0x5dc <main+0xde>
		{
			measuredTorque = adc_read(CH_ADC3) * BIT_TO_TORQUE;
 554:	83 e0       	ldi	r24, 0x03	; 3
 556:	ca dd       	rcall	.-1132   	; 0xec <adc_read>
 558:	bc 01       	movw	r22, r24
 55a:	80 e0       	ldi	r24, 0x00	; 0
 55c:	90 e0       	ldi	r25, 0x00	; 0
 55e:	a4 d0       	rcall	.+328    	; 0x6a8 <__floatunsisf>
 560:	2c e9       	ldi	r18, 0x9C	; 156
 562:	34 ec       	ldi	r19, 0xC4	; 196
 564:	42 ea       	ldi	r20, 0xA2	; 162
 566:	51 e4       	ldi	r21, 0x41	; 65
 568:	05 d1       	rcall	.+522    	; 0x774 <__mulsf3>
 56a:	6d d0       	rcall	.+218    	; 0x646 <__fixsfsi>
 56c:	36 2e       	mov	r3, r22
 56e:	27 2e       	mov	r2, r23
			
			calculate = 0;
 570:	10 92 77 02 	sts	0x0277, r1	; 0x800277 <calculate>
			printCount++;
			rpm1 = count1 * COUNTCONSTANT;
 574:	be 01       	movw	r22, r28
 576:	80 e0       	ldi	r24, 0x00	; 0
 578:	90 e0       	ldi	r25, 0x00	; 0
 57a:	96 d0       	rcall	.+300    	; 0x6a8 <__floatunsisf>
 57c:	20 e0       	ldi	r18, 0x00	; 0
 57e:	30 e0       	ldi	r19, 0x00	; 0
 580:	46 e9       	ldi	r20, 0x96	; 150
 582:	5f e3       	ldi	r21, 0x3F	; 63
 584:	f7 d0       	rcall	.+494    	; 0x774 <__mulsf3>
 586:	64 d0       	rcall	.+200    	; 0x650 <__fixunssfsi>
			canMessage.data[0] = (rpm1 >> 8);
 588:	f6 01       	movw	r30, r12
 58a:	73 83       	std	Z+3, r23	; 0x03
			canMessage.data[1] = rpm1;
 58c:	64 83       	std	Z+4, r22	; 0x04
			
			rpm2 = count2 * COUNTCONSTANT;
 58e:	b8 01       	movw	r22, r16
 590:	80 e0       	ldi	r24, 0x00	; 0
 592:	90 e0       	ldi	r25, 0x00	; 0
 594:	89 d0       	rcall	.+274    	; 0x6a8 <__floatunsisf>
 596:	20 e0       	ldi	r18, 0x00	; 0
 598:	30 e0       	ldi	r19, 0x00	; 0
 59a:	46 e9       	ldi	r20, 0x96	; 150
 59c:	5f e3       	ldi	r21, 0x3F	; 63
 59e:	ea d0       	rcall	.+468    	; 0x774 <__mulsf3>
 5a0:	57 d0       	rcall	.+174    	; 0x650 <__fixunssfsi>
			canMessage.data[2] = (rpm2 >> 8);
 5a2:	f6 01       	movw	r30, r12
 5a4:	75 83       	std	Z+5, r23	; 0x05
			canMessage.data[3] = rpm2;
 5a6:	66 83       	std	Z+6, r22	; 0x06
			
			rpmWheel = countWheel * COUNTCONSTANT;
 5a8:	b7 01       	movw	r22, r14
 5aa:	80 e0       	ldi	r24, 0x00	; 0
 5ac:	90 e0       	ldi	r25, 0x00	; 0
 5ae:	7c d0       	rcall	.+248    	; 0x6a8 <__floatunsisf>
 5b0:	20 e0       	ldi	r18, 0x00	; 0
 5b2:	30 e0       	ldi	r19, 0x00	; 0
 5b4:	46 e9       	ldi	r20, 0x96	; 150
 5b6:	5f e3       	ldi	r21, 0x3F	; 63
 5b8:	dd d0       	rcall	.+442    	; 0x774 <__mulsf3>
 5ba:	4a d0       	rcall	.+148    	; 0x650 <__fixunssfsi>
			canMessage.data[4] = (rpmWheel >> 8);
 5bc:	f6 01       	movw	r30, r12
 5be:	77 83       	std	Z+7, r23	; 0x07
			canMessage.data[5] = rpmWheel;
 5c0:	60 87       	std	Z+8, r22	; 0x08
			
			canMessage.data[6] = (measuredTorque >> 8);
 5c2:	21 86       	std	Z+9, r2	; 0x09
			canMessage.data[7] = measuredTorque;
 5c4:	32 86       	std	Z+10, r3	; 0x0a
			
			can_send_message(&canMessage);
 5c6:	c6 01       	movw	r24, r12
 5c8:	ec de       	rcall	.-552    	; 0x3a2 <can_send_message>
			
			count1 = 0;
			count2 = 0;
			countWheel = 0;
			measuredTorque = 0;
			TCNT1 = 0;
 5ca:	f5 01       	movw	r30, r10
 5cc:	11 82       	std	Z+1, r1	; 0x01
 5ce:	10 82       	st	Z, r1
			
			can_send_message(&canMessage);
			
			count1 = 0;
			count2 = 0;
			countWheel = 0;
 5d0:	e4 2c       	mov	r14, r4
 5d2:	f5 2c       	mov	r15, r5
			canMessage.data[7] = measuredTorque;
			
			can_send_message(&canMessage);
			
			count1 = 0;
			count2 = 0;
 5d4:	04 2d       	mov	r16, r4
 5d6:	15 2d       	mov	r17, r5
			canMessage.data[6] = (measuredTorque >> 8);
			canMessage.data[7] = measuredTorque;
			
			can_send_message(&canMessage);
			
			count1 = 0;
 5d8:	c4 2d       	mov	r28, r4
 5da:	d5 2d       	mov	r29, r5
			countWheel = 0;
			measuredTorque = 0;
			TCNT1 = 0;
		}
		
		if ((PIND & (1<<ENCODER_A_1)) && !state1)
 5dc:	4b 9b       	sbis	0x09, 3	; 9
 5de:	07 c0       	rjmp	.+14     	; 0x5ee <main+0xf0>
 5e0:	91 10       	cpse	r9, r1
 5e2:	05 c0       	rjmp	.+10     	; 0x5ee <main+0xf0>
		{
			cli();
 5e4:	f8 94       	cli
			count1++;
 5e6:	21 96       	adiw	r28, 0x01	; 1
			sei();	
 5e8:	78 94       	sei
			state1 = 1;
 5ea:	96 2c       	mov	r9, r6
 5ec:	02 c0       	rjmp	.+4      	; 0x5f2 <main+0xf4>
			
		} else if (!(PIND & (1<<ENCODER_A_1)) && state1){
 5ee:	4b 9b       	sbis	0x09, 3	; 9
 5f0:	91 2c       	mov	r9, r1
			state1 = 0;
		}
		
		if ((PIND & (1<<ENCODER_A_2)) && !state2)
 5f2:	4a 9b       	sbis	0x09, 2	; 9
 5f4:	08 c0       	rjmp	.+16     	; 0x606 <main+0x108>
 5f6:	81 10       	cpse	r8, r1
 5f8:	06 c0       	rjmp	.+12     	; 0x606 <main+0x108>
		{
			cli();
 5fa:	f8 94       	cli
			count2++;
 5fc:	0f 5f       	subi	r16, 0xFF	; 255
 5fe:	1f 4f       	sbci	r17, 0xFF	; 255
			sei();
 600:	78 94       	sei
			state2 = 1;
 602:	86 2c       	mov	r8, r6
 604:	02 c0       	rjmp	.+4      	; 0x60a <main+0x10c>
			
			} else if (!(PIND & (1<<ENCODER_A_2)) && state2){
 606:	4a 9b       	sbis	0x09, 2	; 9
 608:	81 2c       	mov	r8, r1
			state2 = 0;
		}
		
		if ((PIND & (1<<WHEEL_PIN)) && !stateWheel)
 60a:	49 9b       	sbis	0x09, 1	; 9
 60c:	09 c0       	rjmp	.+18     	; 0x620 <main+0x122>
 60e:	71 10       	cpse	r7, r1
 610:	07 c0       	rjmp	.+14     	; 0x620 <main+0x122>
		{
			cli();
 612:	f8 94       	cli
			countWheel++;
 614:	ef ef       	ldi	r30, 0xFF	; 255
 616:	ee 1a       	sub	r14, r30
 618:	fe 0a       	sbc	r15, r30
			sei();
 61a:	78 94       	sei
			stateWheel = 1;
 61c:	76 2c       	mov	r7, r6
 61e:	95 cf       	rjmp	.-214    	; 0x54a <main+0x4c>
			
			} else if (!(PIND & (1<<WHEEL_PIN)) && stateWheel){
 620:	49 99       	sbic	0x09, 1	; 9
 622:	93 cf       	rjmp	.-218    	; 0x54a <main+0x4c>
 624:	71 2c       	mov	r7, r1
 626:	91 cf       	rjmp	.-222    	; 0x54a <main+0x4c>

00000628 <__vector_12>:
			stateWheel = 0;
		}			
    }
}

ISR(TIMER1_COMPA_vect){
 628:	1f 92       	push	r1
 62a:	0f 92       	push	r0
 62c:	0f b6       	in	r0, 0x3f	; 63
 62e:	0f 92       	push	r0
 630:	11 24       	eor	r1, r1
 632:	8f 93       	push	r24
	calculate = 1;	
 634:	81 e0       	ldi	r24, 0x01	; 1
 636:	80 93 77 02 	sts	0x0277, r24	; 0x800277 <calculate>
 63a:	8f 91       	pop	r24
 63c:	0f 90       	pop	r0
 63e:	0f be       	out	0x3f, r0	; 63
 640:	0f 90       	pop	r0
 642:	1f 90       	pop	r1
 644:	18 95       	reti

00000646 <__fixsfsi>:
 646:	04 d0       	rcall	.+8      	; 0x650 <__fixunssfsi>
 648:	68 94       	set
 64a:	b1 11       	cpse	r27, r1
 64c:	8d c0       	rjmp	.+282    	; 0x768 <__fp_szero>
 64e:	08 95       	ret

00000650 <__fixunssfsi>:
 650:	70 d0       	rcall	.+224    	; 0x732 <__fp_splitA>
 652:	88 f0       	brcs	.+34     	; 0x676 <__fixunssfsi+0x26>
 654:	9f 57       	subi	r25, 0x7F	; 127
 656:	90 f0       	brcs	.+36     	; 0x67c <__fixunssfsi+0x2c>
 658:	b9 2f       	mov	r27, r25
 65a:	99 27       	eor	r25, r25
 65c:	b7 51       	subi	r27, 0x17	; 23
 65e:	a0 f0       	brcs	.+40     	; 0x688 <__fixunssfsi+0x38>
 660:	d1 f0       	breq	.+52     	; 0x696 <__fixunssfsi+0x46>
 662:	66 0f       	add	r22, r22
 664:	77 1f       	adc	r23, r23
 666:	88 1f       	adc	r24, r24
 668:	99 1f       	adc	r25, r25
 66a:	1a f0       	brmi	.+6      	; 0x672 <__fixunssfsi+0x22>
 66c:	ba 95       	dec	r27
 66e:	c9 f7       	brne	.-14     	; 0x662 <__fixunssfsi+0x12>
 670:	12 c0       	rjmp	.+36     	; 0x696 <__fixunssfsi+0x46>
 672:	b1 30       	cpi	r27, 0x01	; 1
 674:	81 f0       	breq	.+32     	; 0x696 <__fixunssfsi+0x46>
 676:	77 d0       	rcall	.+238    	; 0x766 <__fp_zero>
 678:	b1 e0       	ldi	r27, 0x01	; 1
 67a:	08 95       	ret
 67c:	74 c0       	rjmp	.+232    	; 0x766 <__fp_zero>
 67e:	67 2f       	mov	r22, r23
 680:	78 2f       	mov	r23, r24
 682:	88 27       	eor	r24, r24
 684:	b8 5f       	subi	r27, 0xF8	; 248
 686:	39 f0       	breq	.+14     	; 0x696 <__fixunssfsi+0x46>
 688:	b9 3f       	cpi	r27, 0xF9	; 249
 68a:	cc f3       	brlt	.-14     	; 0x67e <__fixunssfsi+0x2e>
 68c:	86 95       	lsr	r24
 68e:	77 95       	ror	r23
 690:	67 95       	ror	r22
 692:	b3 95       	inc	r27
 694:	d9 f7       	brne	.-10     	; 0x68c <__fixunssfsi+0x3c>
 696:	3e f4       	brtc	.+14     	; 0x6a6 <__fixunssfsi+0x56>
 698:	90 95       	com	r25
 69a:	80 95       	com	r24
 69c:	70 95       	com	r23
 69e:	61 95       	neg	r22
 6a0:	7f 4f       	sbci	r23, 0xFF	; 255
 6a2:	8f 4f       	sbci	r24, 0xFF	; 255
 6a4:	9f 4f       	sbci	r25, 0xFF	; 255
 6a6:	08 95       	ret

000006a8 <__floatunsisf>:
 6a8:	e8 94       	clt
 6aa:	09 c0       	rjmp	.+18     	; 0x6be <__floatsisf+0x12>

000006ac <__floatsisf>:
 6ac:	97 fb       	bst	r25, 7
 6ae:	3e f4       	brtc	.+14     	; 0x6be <__floatsisf+0x12>
 6b0:	90 95       	com	r25
 6b2:	80 95       	com	r24
 6b4:	70 95       	com	r23
 6b6:	61 95       	neg	r22
 6b8:	7f 4f       	sbci	r23, 0xFF	; 255
 6ba:	8f 4f       	sbci	r24, 0xFF	; 255
 6bc:	9f 4f       	sbci	r25, 0xFF	; 255
 6be:	99 23       	and	r25, r25
 6c0:	a9 f0       	breq	.+42     	; 0x6ec <__floatsisf+0x40>
 6c2:	f9 2f       	mov	r31, r25
 6c4:	96 e9       	ldi	r25, 0x96	; 150
 6c6:	bb 27       	eor	r27, r27
 6c8:	93 95       	inc	r25
 6ca:	f6 95       	lsr	r31
 6cc:	87 95       	ror	r24
 6ce:	77 95       	ror	r23
 6d0:	67 95       	ror	r22
 6d2:	b7 95       	ror	r27
 6d4:	f1 11       	cpse	r31, r1
 6d6:	f8 cf       	rjmp	.-16     	; 0x6c8 <__floatsisf+0x1c>
 6d8:	fa f4       	brpl	.+62     	; 0x718 <__floatsisf+0x6c>
 6da:	bb 0f       	add	r27, r27
 6dc:	11 f4       	brne	.+4      	; 0x6e2 <__floatsisf+0x36>
 6de:	60 ff       	sbrs	r22, 0
 6e0:	1b c0       	rjmp	.+54     	; 0x718 <__floatsisf+0x6c>
 6e2:	6f 5f       	subi	r22, 0xFF	; 255
 6e4:	7f 4f       	sbci	r23, 0xFF	; 255
 6e6:	8f 4f       	sbci	r24, 0xFF	; 255
 6e8:	9f 4f       	sbci	r25, 0xFF	; 255
 6ea:	16 c0       	rjmp	.+44     	; 0x718 <__floatsisf+0x6c>
 6ec:	88 23       	and	r24, r24
 6ee:	11 f0       	breq	.+4      	; 0x6f4 <__floatsisf+0x48>
 6f0:	96 e9       	ldi	r25, 0x96	; 150
 6f2:	11 c0       	rjmp	.+34     	; 0x716 <__floatsisf+0x6a>
 6f4:	77 23       	and	r23, r23
 6f6:	21 f0       	breq	.+8      	; 0x700 <__floatsisf+0x54>
 6f8:	9e e8       	ldi	r25, 0x8E	; 142
 6fa:	87 2f       	mov	r24, r23
 6fc:	76 2f       	mov	r23, r22
 6fe:	05 c0       	rjmp	.+10     	; 0x70a <__floatsisf+0x5e>
 700:	66 23       	and	r22, r22
 702:	71 f0       	breq	.+28     	; 0x720 <__floatsisf+0x74>
 704:	96 e8       	ldi	r25, 0x86	; 134
 706:	86 2f       	mov	r24, r22
 708:	70 e0       	ldi	r23, 0x00	; 0
 70a:	60 e0       	ldi	r22, 0x00	; 0
 70c:	2a f0       	brmi	.+10     	; 0x718 <__floatsisf+0x6c>
 70e:	9a 95       	dec	r25
 710:	66 0f       	add	r22, r22
 712:	77 1f       	adc	r23, r23
 714:	88 1f       	adc	r24, r24
 716:	da f7       	brpl	.-10     	; 0x70e <__floatsisf+0x62>
 718:	88 0f       	add	r24, r24
 71a:	96 95       	lsr	r25
 71c:	87 95       	ror	r24
 71e:	97 f9       	bld	r25, 7
 720:	08 95       	ret

00000722 <__fp_split3>:
 722:	57 fd       	sbrc	r21, 7
 724:	90 58       	subi	r25, 0x80	; 128
 726:	44 0f       	add	r20, r20
 728:	55 1f       	adc	r21, r21
 72a:	59 f0       	breq	.+22     	; 0x742 <__fp_splitA+0x10>
 72c:	5f 3f       	cpi	r21, 0xFF	; 255
 72e:	71 f0       	breq	.+28     	; 0x74c <__fp_splitA+0x1a>
 730:	47 95       	ror	r20

00000732 <__fp_splitA>:
 732:	88 0f       	add	r24, r24
 734:	97 fb       	bst	r25, 7
 736:	99 1f       	adc	r25, r25
 738:	61 f0       	breq	.+24     	; 0x752 <__fp_splitA+0x20>
 73a:	9f 3f       	cpi	r25, 0xFF	; 255
 73c:	79 f0       	breq	.+30     	; 0x75c <__fp_splitA+0x2a>
 73e:	87 95       	ror	r24
 740:	08 95       	ret
 742:	12 16       	cp	r1, r18
 744:	13 06       	cpc	r1, r19
 746:	14 06       	cpc	r1, r20
 748:	55 1f       	adc	r21, r21
 74a:	f2 cf       	rjmp	.-28     	; 0x730 <__fp_split3+0xe>
 74c:	46 95       	lsr	r20
 74e:	f1 df       	rcall	.-30     	; 0x732 <__fp_splitA>
 750:	08 c0       	rjmp	.+16     	; 0x762 <__fp_splitA+0x30>
 752:	16 16       	cp	r1, r22
 754:	17 06       	cpc	r1, r23
 756:	18 06       	cpc	r1, r24
 758:	99 1f       	adc	r25, r25
 75a:	f1 cf       	rjmp	.-30     	; 0x73e <__fp_splitA+0xc>
 75c:	86 95       	lsr	r24
 75e:	71 05       	cpc	r23, r1
 760:	61 05       	cpc	r22, r1
 762:	08 94       	sec
 764:	08 95       	ret

00000766 <__fp_zero>:
 766:	e8 94       	clt

00000768 <__fp_szero>:
 768:	bb 27       	eor	r27, r27
 76a:	66 27       	eor	r22, r22
 76c:	77 27       	eor	r23, r23
 76e:	cb 01       	movw	r24, r22
 770:	97 f9       	bld	r25, 7
 772:	08 95       	ret

00000774 <__mulsf3>:
 774:	0b d0       	rcall	.+22     	; 0x78c <__mulsf3x>
 776:	78 c0       	rjmp	.+240    	; 0x868 <__fp_round>
 778:	69 d0       	rcall	.+210    	; 0x84c <__fp_pscA>
 77a:	28 f0       	brcs	.+10     	; 0x786 <__mulsf3+0x12>
 77c:	6e d0       	rcall	.+220    	; 0x85a <__fp_pscB>
 77e:	18 f0       	brcs	.+6      	; 0x786 <__mulsf3+0x12>
 780:	95 23       	and	r25, r21
 782:	09 f0       	breq	.+2      	; 0x786 <__mulsf3+0x12>
 784:	5a c0       	rjmp	.+180    	; 0x83a <__fp_inf>
 786:	5f c0       	rjmp	.+190    	; 0x846 <__fp_nan>
 788:	11 24       	eor	r1, r1
 78a:	ee cf       	rjmp	.-36     	; 0x768 <__fp_szero>

0000078c <__mulsf3x>:
 78c:	ca df       	rcall	.-108    	; 0x722 <__fp_split3>
 78e:	a0 f3       	brcs	.-24     	; 0x778 <__mulsf3+0x4>

00000790 <__mulsf3_pse>:
 790:	95 9f       	mul	r25, r21
 792:	d1 f3       	breq	.-12     	; 0x788 <__mulsf3+0x14>
 794:	95 0f       	add	r25, r21
 796:	50 e0       	ldi	r21, 0x00	; 0
 798:	55 1f       	adc	r21, r21
 79a:	62 9f       	mul	r22, r18
 79c:	f0 01       	movw	r30, r0
 79e:	72 9f       	mul	r23, r18
 7a0:	bb 27       	eor	r27, r27
 7a2:	f0 0d       	add	r31, r0
 7a4:	b1 1d       	adc	r27, r1
 7a6:	63 9f       	mul	r22, r19
 7a8:	aa 27       	eor	r26, r26
 7aa:	f0 0d       	add	r31, r0
 7ac:	b1 1d       	adc	r27, r1
 7ae:	aa 1f       	adc	r26, r26
 7b0:	64 9f       	mul	r22, r20
 7b2:	66 27       	eor	r22, r22
 7b4:	b0 0d       	add	r27, r0
 7b6:	a1 1d       	adc	r26, r1
 7b8:	66 1f       	adc	r22, r22
 7ba:	82 9f       	mul	r24, r18
 7bc:	22 27       	eor	r18, r18
 7be:	b0 0d       	add	r27, r0
 7c0:	a1 1d       	adc	r26, r1
 7c2:	62 1f       	adc	r22, r18
 7c4:	73 9f       	mul	r23, r19
 7c6:	b0 0d       	add	r27, r0
 7c8:	a1 1d       	adc	r26, r1
 7ca:	62 1f       	adc	r22, r18
 7cc:	83 9f       	mul	r24, r19
 7ce:	a0 0d       	add	r26, r0
 7d0:	61 1d       	adc	r22, r1
 7d2:	22 1f       	adc	r18, r18
 7d4:	74 9f       	mul	r23, r20
 7d6:	33 27       	eor	r19, r19
 7d8:	a0 0d       	add	r26, r0
 7da:	61 1d       	adc	r22, r1
 7dc:	23 1f       	adc	r18, r19
 7de:	84 9f       	mul	r24, r20
 7e0:	60 0d       	add	r22, r0
 7e2:	21 1d       	adc	r18, r1
 7e4:	82 2f       	mov	r24, r18
 7e6:	76 2f       	mov	r23, r22
 7e8:	6a 2f       	mov	r22, r26
 7ea:	11 24       	eor	r1, r1
 7ec:	9f 57       	subi	r25, 0x7F	; 127
 7ee:	50 40       	sbci	r21, 0x00	; 0
 7f0:	8a f0       	brmi	.+34     	; 0x814 <__mulsf3_pse+0x84>
 7f2:	e1 f0       	breq	.+56     	; 0x82c <__mulsf3_pse+0x9c>
 7f4:	88 23       	and	r24, r24
 7f6:	4a f0       	brmi	.+18     	; 0x80a <__mulsf3_pse+0x7a>
 7f8:	ee 0f       	add	r30, r30
 7fa:	ff 1f       	adc	r31, r31
 7fc:	bb 1f       	adc	r27, r27
 7fe:	66 1f       	adc	r22, r22
 800:	77 1f       	adc	r23, r23
 802:	88 1f       	adc	r24, r24
 804:	91 50       	subi	r25, 0x01	; 1
 806:	50 40       	sbci	r21, 0x00	; 0
 808:	a9 f7       	brne	.-22     	; 0x7f4 <__mulsf3_pse+0x64>
 80a:	9e 3f       	cpi	r25, 0xFE	; 254
 80c:	51 05       	cpc	r21, r1
 80e:	70 f0       	brcs	.+28     	; 0x82c <__mulsf3_pse+0x9c>
 810:	14 c0       	rjmp	.+40     	; 0x83a <__fp_inf>
 812:	aa cf       	rjmp	.-172    	; 0x768 <__fp_szero>
 814:	5f 3f       	cpi	r21, 0xFF	; 255
 816:	ec f3       	brlt	.-6      	; 0x812 <__mulsf3_pse+0x82>
 818:	98 3e       	cpi	r25, 0xE8	; 232
 81a:	dc f3       	brlt	.-10     	; 0x812 <__mulsf3_pse+0x82>
 81c:	86 95       	lsr	r24
 81e:	77 95       	ror	r23
 820:	67 95       	ror	r22
 822:	b7 95       	ror	r27
 824:	f7 95       	ror	r31
 826:	e7 95       	ror	r30
 828:	9f 5f       	subi	r25, 0xFF	; 255
 82a:	c1 f7       	brne	.-16     	; 0x81c <__mulsf3_pse+0x8c>
 82c:	fe 2b       	or	r31, r30
 82e:	88 0f       	add	r24, r24
 830:	91 1d       	adc	r25, r1
 832:	96 95       	lsr	r25
 834:	87 95       	ror	r24
 836:	97 f9       	bld	r25, 7
 838:	08 95       	ret

0000083a <__fp_inf>:
 83a:	97 f9       	bld	r25, 7
 83c:	9f 67       	ori	r25, 0x7F	; 127
 83e:	80 e8       	ldi	r24, 0x80	; 128
 840:	70 e0       	ldi	r23, 0x00	; 0
 842:	60 e0       	ldi	r22, 0x00	; 0
 844:	08 95       	ret

00000846 <__fp_nan>:
 846:	9f ef       	ldi	r25, 0xFF	; 255
 848:	80 ec       	ldi	r24, 0xC0	; 192
 84a:	08 95       	ret

0000084c <__fp_pscA>:
 84c:	00 24       	eor	r0, r0
 84e:	0a 94       	dec	r0
 850:	16 16       	cp	r1, r22
 852:	17 06       	cpc	r1, r23
 854:	18 06       	cpc	r1, r24
 856:	09 06       	cpc	r0, r25
 858:	08 95       	ret

0000085a <__fp_pscB>:
 85a:	00 24       	eor	r0, r0
 85c:	0a 94       	dec	r0
 85e:	12 16       	cp	r1, r18
 860:	13 06       	cpc	r1, r19
 862:	14 06       	cpc	r1, r20
 864:	05 06       	cpc	r0, r21
 866:	08 95       	ret

00000868 <__fp_round>:
 868:	09 2e       	mov	r0, r25
 86a:	03 94       	inc	r0
 86c:	00 0c       	add	r0, r0
 86e:	11 f4       	brne	.+4      	; 0x874 <__fp_round+0xc>
 870:	88 23       	and	r24, r24
 872:	52 f0       	brmi	.+20     	; 0x888 <__fp_round+0x20>
 874:	bb 0f       	add	r27, r27
 876:	40 f4       	brcc	.+16     	; 0x888 <__fp_round+0x20>
 878:	bf 2b       	or	r27, r31
 87a:	11 f4       	brne	.+4      	; 0x880 <__fp_round+0x18>
 87c:	60 ff       	sbrs	r22, 0
 87e:	04 c0       	rjmp	.+8      	; 0x888 <__fp_round+0x20>
 880:	6f 5f       	subi	r22, 0xFF	; 255
 882:	7f 4f       	sbci	r23, 0xFF	; 255
 884:	8f 4f       	sbci	r24, 0xFF	; 255
 886:	9f 4f       	sbci	r25, 0xFF	; 255
 888:	08 95       	ret

0000088a <fdevopen>:
 88a:	0f 93       	push	r16
 88c:	1f 93       	push	r17
 88e:	cf 93       	push	r28
 890:	df 93       	push	r29
 892:	00 97       	sbiw	r24, 0x00	; 0
 894:	31 f4       	brne	.+12     	; 0x8a2 <fdevopen+0x18>
 896:	61 15       	cp	r22, r1
 898:	71 05       	cpc	r23, r1
 89a:	19 f4       	brne	.+6      	; 0x8a2 <fdevopen+0x18>
 89c:	80 e0       	ldi	r24, 0x00	; 0
 89e:	90 e0       	ldi	r25, 0x00	; 0
 8a0:	39 c0       	rjmp	.+114    	; 0x914 <fdevopen+0x8a>
 8a2:	8b 01       	movw	r16, r22
 8a4:	ec 01       	movw	r28, r24
 8a6:	6e e0       	ldi	r22, 0x0E	; 14
 8a8:	70 e0       	ldi	r23, 0x00	; 0
 8aa:	81 e0       	ldi	r24, 0x01	; 1
 8ac:	90 e0       	ldi	r25, 0x00	; 0
 8ae:	37 d0       	rcall	.+110    	; 0x91e <calloc>
 8b0:	fc 01       	movw	r30, r24
 8b2:	89 2b       	or	r24, r25
 8b4:	99 f3       	breq	.-26     	; 0x89c <fdevopen+0x12>
 8b6:	80 e8       	ldi	r24, 0x80	; 128
 8b8:	83 83       	std	Z+3, r24	; 0x03
 8ba:	01 15       	cp	r16, r1
 8bc:	11 05       	cpc	r17, r1
 8be:	71 f0       	breq	.+28     	; 0x8dc <fdevopen+0x52>
 8c0:	13 87       	std	Z+11, r17	; 0x0b
 8c2:	02 87       	std	Z+10, r16	; 0x0a
 8c4:	81 e8       	ldi	r24, 0x81	; 129
 8c6:	83 83       	std	Z+3, r24	; 0x03
 8c8:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <__iob>
 8cc:	90 91 79 02 	lds	r25, 0x0279	; 0x800279 <__iob+0x1>
 8d0:	89 2b       	or	r24, r25
 8d2:	21 f4       	brne	.+8      	; 0x8dc <fdevopen+0x52>
 8d4:	f0 93 79 02 	sts	0x0279, r31	; 0x800279 <__iob+0x1>
 8d8:	e0 93 78 02 	sts	0x0278, r30	; 0x800278 <__iob>
 8dc:	20 97       	sbiw	r28, 0x00	; 0
 8de:	c9 f0       	breq	.+50     	; 0x912 <fdevopen+0x88>
 8e0:	d1 87       	std	Z+9, r29	; 0x09
 8e2:	c0 87       	std	Z+8, r28	; 0x08
 8e4:	83 81       	ldd	r24, Z+3	; 0x03
 8e6:	82 60       	ori	r24, 0x02	; 2
 8e8:	83 83       	std	Z+3, r24	; 0x03
 8ea:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <__iob+0x2>
 8ee:	90 91 7b 02 	lds	r25, 0x027B	; 0x80027b <__iob+0x3>
 8f2:	89 2b       	or	r24, r25
 8f4:	71 f4       	brne	.+28     	; 0x912 <fdevopen+0x88>
 8f6:	f0 93 7b 02 	sts	0x027B, r31	; 0x80027b <__iob+0x3>
 8fa:	e0 93 7a 02 	sts	0x027A, r30	; 0x80027a <__iob+0x2>
 8fe:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <__iob+0x4>
 902:	90 91 7d 02 	lds	r25, 0x027D	; 0x80027d <__iob+0x5>
 906:	89 2b       	or	r24, r25
 908:	21 f4       	brne	.+8      	; 0x912 <fdevopen+0x88>
 90a:	f0 93 7d 02 	sts	0x027D, r31	; 0x80027d <__iob+0x5>
 90e:	e0 93 7c 02 	sts	0x027C, r30	; 0x80027c <__iob+0x4>
 912:	cf 01       	movw	r24, r30
 914:	df 91       	pop	r29
 916:	cf 91       	pop	r28
 918:	1f 91       	pop	r17
 91a:	0f 91       	pop	r16
 91c:	08 95       	ret

0000091e <calloc>:
 91e:	0f 93       	push	r16
 920:	1f 93       	push	r17
 922:	cf 93       	push	r28
 924:	df 93       	push	r29
 926:	86 9f       	mul	r24, r22
 928:	80 01       	movw	r16, r0
 92a:	87 9f       	mul	r24, r23
 92c:	10 0d       	add	r17, r0
 92e:	96 9f       	mul	r25, r22
 930:	10 0d       	add	r17, r0
 932:	11 24       	eor	r1, r1
 934:	c8 01       	movw	r24, r16
 936:	0d d0       	rcall	.+26     	; 0x952 <malloc>
 938:	ec 01       	movw	r28, r24
 93a:	00 97       	sbiw	r24, 0x00	; 0
 93c:	21 f0       	breq	.+8      	; 0x946 <calloc+0x28>
 93e:	a8 01       	movw	r20, r16
 940:	60 e0       	ldi	r22, 0x00	; 0
 942:	70 e0       	ldi	r23, 0x00	; 0
 944:	33 d1       	rcall	.+614    	; 0xbac <memset>
 946:	ce 01       	movw	r24, r28
 948:	df 91       	pop	r29
 94a:	cf 91       	pop	r28
 94c:	1f 91       	pop	r17
 94e:	0f 91       	pop	r16
 950:	08 95       	ret

00000952 <malloc>:
 952:	cf 93       	push	r28
 954:	df 93       	push	r29
 956:	82 30       	cpi	r24, 0x02	; 2
 958:	91 05       	cpc	r25, r1
 95a:	10 f4       	brcc	.+4      	; 0x960 <malloc+0xe>
 95c:	82 e0       	ldi	r24, 0x02	; 2
 95e:	90 e0       	ldi	r25, 0x00	; 0
 960:	e0 91 80 02 	lds	r30, 0x0280	; 0x800280 <__flp>
 964:	f0 91 81 02 	lds	r31, 0x0281	; 0x800281 <__flp+0x1>
 968:	20 e0       	ldi	r18, 0x00	; 0
 96a:	30 e0       	ldi	r19, 0x00	; 0
 96c:	c0 e0       	ldi	r28, 0x00	; 0
 96e:	d0 e0       	ldi	r29, 0x00	; 0
 970:	30 97       	sbiw	r30, 0x00	; 0
 972:	11 f1       	breq	.+68     	; 0x9b8 <malloc+0x66>
 974:	40 81       	ld	r20, Z
 976:	51 81       	ldd	r21, Z+1	; 0x01
 978:	48 17       	cp	r20, r24
 97a:	59 07       	cpc	r21, r25
 97c:	c0 f0       	brcs	.+48     	; 0x9ae <malloc+0x5c>
 97e:	48 17       	cp	r20, r24
 980:	59 07       	cpc	r21, r25
 982:	61 f4       	brne	.+24     	; 0x99c <malloc+0x4a>
 984:	82 81       	ldd	r24, Z+2	; 0x02
 986:	93 81       	ldd	r25, Z+3	; 0x03
 988:	20 97       	sbiw	r28, 0x00	; 0
 98a:	19 f0       	breq	.+6      	; 0x992 <malloc+0x40>
 98c:	9b 83       	std	Y+3, r25	; 0x03
 98e:	8a 83       	std	Y+2, r24	; 0x02
 990:	2b c0       	rjmp	.+86     	; 0x9e8 <malloc+0x96>
 992:	90 93 81 02 	sts	0x0281, r25	; 0x800281 <__flp+0x1>
 996:	80 93 80 02 	sts	0x0280, r24	; 0x800280 <__flp>
 99a:	26 c0       	rjmp	.+76     	; 0x9e8 <malloc+0x96>
 99c:	21 15       	cp	r18, r1
 99e:	31 05       	cpc	r19, r1
 9a0:	19 f0       	breq	.+6      	; 0x9a8 <malloc+0x56>
 9a2:	42 17       	cp	r20, r18
 9a4:	53 07       	cpc	r21, r19
 9a6:	18 f4       	brcc	.+6      	; 0x9ae <malloc+0x5c>
 9a8:	9a 01       	movw	r18, r20
 9aa:	be 01       	movw	r22, r28
 9ac:	df 01       	movw	r26, r30
 9ae:	ef 01       	movw	r28, r30
 9b0:	02 80       	ldd	r0, Z+2	; 0x02
 9b2:	f3 81       	ldd	r31, Z+3	; 0x03
 9b4:	e0 2d       	mov	r30, r0
 9b6:	dc cf       	rjmp	.-72     	; 0x970 <malloc+0x1e>
 9b8:	21 15       	cp	r18, r1
 9ba:	31 05       	cpc	r19, r1
 9bc:	09 f1       	breq	.+66     	; 0xa00 <malloc+0xae>
 9be:	28 1b       	sub	r18, r24
 9c0:	39 0b       	sbc	r19, r25
 9c2:	24 30       	cpi	r18, 0x04	; 4
 9c4:	31 05       	cpc	r19, r1
 9c6:	90 f4       	brcc	.+36     	; 0x9ec <malloc+0x9a>
 9c8:	12 96       	adiw	r26, 0x02	; 2
 9ca:	8d 91       	ld	r24, X+
 9cc:	9c 91       	ld	r25, X
 9ce:	13 97       	sbiw	r26, 0x03	; 3
 9d0:	61 15       	cp	r22, r1
 9d2:	71 05       	cpc	r23, r1
 9d4:	21 f0       	breq	.+8      	; 0x9de <malloc+0x8c>
 9d6:	fb 01       	movw	r30, r22
 9d8:	93 83       	std	Z+3, r25	; 0x03
 9da:	82 83       	std	Z+2, r24	; 0x02
 9dc:	04 c0       	rjmp	.+8      	; 0x9e6 <malloc+0x94>
 9de:	90 93 81 02 	sts	0x0281, r25	; 0x800281 <__flp+0x1>
 9e2:	80 93 80 02 	sts	0x0280, r24	; 0x800280 <__flp>
 9e6:	fd 01       	movw	r30, r26
 9e8:	32 96       	adiw	r30, 0x02	; 2
 9ea:	44 c0       	rjmp	.+136    	; 0xa74 <malloc+0x122>
 9ec:	fd 01       	movw	r30, r26
 9ee:	e2 0f       	add	r30, r18
 9f0:	f3 1f       	adc	r31, r19
 9f2:	81 93       	st	Z+, r24
 9f4:	91 93       	st	Z+, r25
 9f6:	22 50       	subi	r18, 0x02	; 2
 9f8:	31 09       	sbc	r19, r1
 9fa:	2d 93       	st	X+, r18
 9fc:	3c 93       	st	X, r19
 9fe:	3a c0       	rjmp	.+116    	; 0xa74 <malloc+0x122>
 a00:	20 91 7e 02 	lds	r18, 0x027E	; 0x80027e <__brkval>
 a04:	30 91 7f 02 	lds	r19, 0x027F	; 0x80027f <__brkval+0x1>
 a08:	23 2b       	or	r18, r19
 a0a:	41 f4       	brne	.+16     	; 0xa1c <malloc+0xca>
 a0c:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 a10:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 a14:	30 93 7f 02 	sts	0x027F, r19	; 0x80027f <__brkval+0x1>
 a18:	20 93 7e 02 	sts	0x027E, r18	; 0x80027e <__brkval>
 a1c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 a20:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 a24:	21 15       	cp	r18, r1
 a26:	31 05       	cpc	r19, r1
 a28:	41 f4       	brne	.+16     	; 0xa3a <malloc+0xe8>
 a2a:	2d b7       	in	r18, 0x3d	; 61
 a2c:	3e b7       	in	r19, 0x3e	; 62
 a2e:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 a32:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 a36:	24 1b       	sub	r18, r20
 a38:	35 0b       	sbc	r19, r21
 a3a:	e0 91 7e 02 	lds	r30, 0x027E	; 0x80027e <__brkval>
 a3e:	f0 91 7f 02 	lds	r31, 0x027F	; 0x80027f <__brkval+0x1>
 a42:	e2 17       	cp	r30, r18
 a44:	f3 07       	cpc	r31, r19
 a46:	a0 f4       	brcc	.+40     	; 0xa70 <malloc+0x11e>
 a48:	2e 1b       	sub	r18, r30
 a4a:	3f 0b       	sbc	r19, r31
 a4c:	28 17       	cp	r18, r24
 a4e:	39 07       	cpc	r19, r25
 a50:	78 f0       	brcs	.+30     	; 0xa70 <malloc+0x11e>
 a52:	ac 01       	movw	r20, r24
 a54:	4e 5f       	subi	r20, 0xFE	; 254
 a56:	5f 4f       	sbci	r21, 0xFF	; 255
 a58:	24 17       	cp	r18, r20
 a5a:	35 07       	cpc	r19, r21
 a5c:	48 f0       	brcs	.+18     	; 0xa70 <malloc+0x11e>
 a5e:	4e 0f       	add	r20, r30
 a60:	5f 1f       	adc	r21, r31
 a62:	50 93 7f 02 	sts	0x027F, r21	; 0x80027f <__brkval+0x1>
 a66:	40 93 7e 02 	sts	0x027E, r20	; 0x80027e <__brkval>
 a6a:	81 93       	st	Z+, r24
 a6c:	91 93       	st	Z+, r25
 a6e:	02 c0       	rjmp	.+4      	; 0xa74 <malloc+0x122>
 a70:	e0 e0       	ldi	r30, 0x00	; 0
 a72:	f0 e0       	ldi	r31, 0x00	; 0
 a74:	cf 01       	movw	r24, r30
 a76:	df 91       	pop	r29
 a78:	cf 91       	pop	r28
 a7a:	08 95       	ret

00000a7c <free>:
 a7c:	0f 93       	push	r16
 a7e:	1f 93       	push	r17
 a80:	cf 93       	push	r28
 a82:	df 93       	push	r29
 a84:	00 97       	sbiw	r24, 0x00	; 0
 a86:	09 f4       	brne	.+2      	; 0xa8a <free+0xe>
 a88:	8c c0       	rjmp	.+280    	; 0xba2 <free+0x126>
 a8a:	fc 01       	movw	r30, r24
 a8c:	32 97       	sbiw	r30, 0x02	; 2
 a8e:	13 82       	std	Z+3, r1	; 0x03
 a90:	12 82       	std	Z+2, r1	; 0x02
 a92:	00 91 80 02 	lds	r16, 0x0280	; 0x800280 <__flp>
 a96:	10 91 81 02 	lds	r17, 0x0281	; 0x800281 <__flp+0x1>
 a9a:	01 15       	cp	r16, r1
 a9c:	11 05       	cpc	r17, r1
 a9e:	81 f4       	brne	.+32     	; 0xac0 <free+0x44>
 aa0:	20 81       	ld	r18, Z
 aa2:	31 81       	ldd	r19, Z+1	; 0x01
 aa4:	82 0f       	add	r24, r18
 aa6:	93 1f       	adc	r25, r19
 aa8:	20 91 7e 02 	lds	r18, 0x027E	; 0x80027e <__brkval>
 aac:	30 91 7f 02 	lds	r19, 0x027F	; 0x80027f <__brkval+0x1>
 ab0:	28 17       	cp	r18, r24
 ab2:	39 07       	cpc	r19, r25
 ab4:	79 f5       	brne	.+94     	; 0xb14 <free+0x98>
 ab6:	f0 93 7f 02 	sts	0x027F, r31	; 0x80027f <__brkval+0x1>
 aba:	e0 93 7e 02 	sts	0x027E, r30	; 0x80027e <__brkval>
 abe:	71 c0       	rjmp	.+226    	; 0xba2 <free+0x126>
 ac0:	d8 01       	movw	r26, r16
 ac2:	40 e0       	ldi	r20, 0x00	; 0
 ac4:	50 e0       	ldi	r21, 0x00	; 0
 ac6:	ae 17       	cp	r26, r30
 ac8:	bf 07       	cpc	r27, r31
 aca:	50 f4       	brcc	.+20     	; 0xae0 <free+0x64>
 acc:	12 96       	adiw	r26, 0x02	; 2
 ace:	2d 91       	ld	r18, X+
 ad0:	3c 91       	ld	r19, X
 ad2:	13 97       	sbiw	r26, 0x03	; 3
 ad4:	ad 01       	movw	r20, r26
 ad6:	21 15       	cp	r18, r1
 ad8:	31 05       	cpc	r19, r1
 ada:	09 f1       	breq	.+66     	; 0xb1e <free+0xa2>
 adc:	d9 01       	movw	r26, r18
 ade:	f3 cf       	rjmp	.-26     	; 0xac6 <free+0x4a>
 ae0:	9d 01       	movw	r18, r26
 ae2:	da 01       	movw	r26, r20
 ae4:	33 83       	std	Z+3, r19	; 0x03
 ae6:	22 83       	std	Z+2, r18	; 0x02
 ae8:	60 81       	ld	r22, Z
 aea:	71 81       	ldd	r23, Z+1	; 0x01
 aec:	86 0f       	add	r24, r22
 aee:	97 1f       	adc	r25, r23
 af0:	82 17       	cp	r24, r18
 af2:	93 07       	cpc	r25, r19
 af4:	69 f4       	brne	.+26     	; 0xb10 <free+0x94>
 af6:	ec 01       	movw	r28, r24
 af8:	28 81       	ld	r18, Y
 afa:	39 81       	ldd	r19, Y+1	; 0x01
 afc:	26 0f       	add	r18, r22
 afe:	37 1f       	adc	r19, r23
 b00:	2e 5f       	subi	r18, 0xFE	; 254
 b02:	3f 4f       	sbci	r19, 0xFF	; 255
 b04:	31 83       	std	Z+1, r19	; 0x01
 b06:	20 83       	st	Z, r18
 b08:	8a 81       	ldd	r24, Y+2	; 0x02
 b0a:	9b 81       	ldd	r25, Y+3	; 0x03
 b0c:	93 83       	std	Z+3, r25	; 0x03
 b0e:	82 83       	std	Z+2, r24	; 0x02
 b10:	45 2b       	or	r20, r21
 b12:	29 f4       	brne	.+10     	; 0xb1e <free+0xa2>
 b14:	f0 93 81 02 	sts	0x0281, r31	; 0x800281 <__flp+0x1>
 b18:	e0 93 80 02 	sts	0x0280, r30	; 0x800280 <__flp>
 b1c:	42 c0       	rjmp	.+132    	; 0xba2 <free+0x126>
 b1e:	13 96       	adiw	r26, 0x03	; 3
 b20:	fc 93       	st	X, r31
 b22:	ee 93       	st	-X, r30
 b24:	12 97       	sbiw	r26, 0x02	; 2
 b26:	ed 01       	movw	r28, r26
 b28:	49 91       	ld	r20, Y+
 b2a:	59 91       	ld	r21, Y+
 b2c:	9e 01       	movw	r18, r28
 b2e:	24 0f       	add	r18, r20
 b30:	35 1f       	adc	r19, r21
 b32:	e2 17       	cp	r30, r18
 b34:	f3 07       	cpc	r31, r19
 b36:	71 f4       	brne	.+28     	; 0xb54 <free+0xd8>
 b38:	80 81       	ld	r24, Z
 b3a:	91 81       	ldd	r25, Z+1	; 0x01
 b3c:	84 0f       	add	r24, r20
 b3e:	95 1f       	adc	r25, r21
 b40:	02 96       	adiw	r24, 0x02	; 2
 b42:	11 96       	adiw	r26, 0x01	; 1
 b44:	9c 93       	st	X, r25
 b46:	8e 93       	st	-X, r24
 b48:	82 81       	ldd	r24, Z+2	; 0x02
 b4a:	93 81       	ldd	r25, Z+3	; 0x03
 b4c:	13 96       	adiw	r26, 0x03	; 3
 b4e:	9c 93       	st	X, r25
 b50:	8e 93       	st	-X, r24
 b52:	12 97       	sbiw	r26, 0x02	; 2
 b54:	e0 e0       	ldi	r30, 0x00	; 0
 b56:	f0 e0       	ldi	r31, 0x00	; 0
 b58:	d8 01       	movw	r26, r16
 b5a:	12 96       	adiw	r26, 0x02	; 2
 b5c:	8d 91       	ld	r24, X+
 b5e:	9c 91       	ld	r25, X
 b60:	13 97       	sbiw	r26, 0x03	; 3
 b62:	00 97       	sbiw	r24, 0x00	; 0
 b64:	19 f0       	breq	.+6      	; 0xb6c <free+0xf0>
 b66:	f8 01       	movw	r30, r16
 b68:	8c 01       	movw	r16, r24
 b6a:	f6 cf       	rjmp	.-20     	; 0xb58 <free+0xdc>
 b6c:	8d 91       	ld	r24, X+
 b6e:	9c 91       	ld	r25, X
 b70:	98 01       	movw	r18, r16
 b72:	2e 5f       	subi	r18, 0xFE	; 254
 b74:	3f 4f       	sbci	r19, 0xFF	; 255
 b76:	82 0f       	add	r24, r18
 b78:	93 1f       	adc	r25, r19
 b7a:	20 91 7e 02 	lds	r18, 0x027E	; 0x80027e <__brkval>
 b7e:	30 91 7f 02 	lds	r19, 0x027F	; 0x80027f <__brkval+0x1>
 b82:	28 17       	cp	r18, r24
 b84:	39 07       	cpc	r19, r25
 b86:	69 f4       	brne	.+26     	; 0xba2 <free+0x126>
 b88:	30 97       	sbiw	r30, 0x00	; 0
 b8a:	29 f4       	brne	.+10     	; 0xb96 <free+0x11a>
 b8c:	10 92 81 02 	sts	0x0281, r1	; 0x800281 <__flp+0x1>
 b90:	10 92 80 02 	sts	0x0280, r1	; 0x800280 <__flp>
 b94:	02 c0       	rjmp	.+4      	; 0xb9a <free+0x11e>
 b96:	13 82       	std	Z+3, r1	; 0x03
 b98:	12 82       	std	Z+2, r1	; 0x02
 b9a:	10 93 7f 02 	sts	0x027F, r17	; 0x80027f <__brkval+0x1>
 b9e:	00 93 7e 02 	sts	0x027E, r16	; 0x80027e <__brkval>
 ba2:	df 91       	pop	r29
 ba4:	cf 91       	pop	r28
 ba6:	1f 91       	pop	r17
 ba8:	0f 91       	pop	r16
 baa:	08 95       	ret

00000bac <memset>:
 bac:	dc 01       	movw	r26, r24
 bae:	01 c0       	rjmp	.+2      	; 0xbb2 <memset+0x6>
 bb0:	6d 93       	st	X+, r22
 bb2:	41 50       	subi	r20, 0x01	; 1
 bb4:	50 40       	sbci	r21, 0x00	; 0
 bb6:	e0 f7       	brcc	.-8      	; 0xbb0 <memset+0x4>
 bb8:	08 95       	ret

00000bba <_exit>:
 bba:	f8 94       	cli

00000bbc <__stop_program>:
 bbc:	ff cf       	rjmp	.-2      	; 0xbbc <__stop_program>
