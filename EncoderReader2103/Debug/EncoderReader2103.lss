
EncoderReader2103.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000ca6  00000d3a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ca6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001a7  00800106  00800106  00000d40  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d40  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d70  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000130  00000000  00000000  00000db0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001cb6  00000000  00000000  00000ee0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001115  00000000  00000000  00002b96  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c57  00000000  00000000  00003cab  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000274  00000000  00000000  00004904  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a2a  00000000  00000000  00004b78  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000083c  00000000  00000000  000055a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  00005dde  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
   2:	00 00       	nop
   4:	64 c0       	rjmp	.+200    	; 0xce <__bad_interrupt>
   6:	00 00       	nop
   8:	62 c0       	rjmp	.+196    	; 0xce <__bad_interrupt>
   a:	00 00       	nop
   c:	60 c0       	rjmp	.+192    	; 0xce <__bad_interrupt>
   e:	00 00       	nop
  10:	5e c0       	rjmp	.+188    	; 0xce <__bad_interrupt>
  12:	00 00       	nop
  14:	5c c0       	rjmp	.+184    	; 0xce <__bad_interrupt>
  16:	00 00       	nop
  18:	5a c0       	rjmp	.+180    	; 0xce <__bad_interrupt>
  1a:	00 00       	nop
  1c:	58 c0       	rjmp	.+176    	; 0xce <__bad_interrupt>
  1e:	00 00       	nop
  20:	56 c0       	rjmp	.+172    	; 0xce <__bad_interrupt>
  22:	00 00       	nop
  24:	54 c0       	rjmp	.+168    	; 0xce <__bad_interrupt>
  26:	00 00       	nop
  28:	52 c0       	rjmp	.+164    	; 0xce <__bad_interrupt>
  2a:	00 00       	nop
  2c:	50 c0       	rjmp	.+160    	; 0xce <__bad_interrupt>
  2e:	00 00       	nop
  30:	4e c0       	rjmp	.+156    	; 0xce <__bad_interrupt>
  32:	00 00       	nop
  34:	4c c0       	rjmp	.+152    	; 0xce <__bad_interrupt>
  36:	00 00       	nop
  38:	4a c0       	rjmp	.+148    	; 0xce <__bad_interrupt>
  3a:	00 00       	nop
  3c:	48 c0       	rjmp	.+144    	; 0xce <__bad_interrupt>
  3e:	00 00       	nop
  40:	46 c0       	rjmp	.+140    	; 0xce <__bad_interrupt>
  42:	00 00       	nop
  44:	4f c2       	rjmp	.+1182   	; 0x4e4 <__vector_17>
  46:	00 00       	nop
  48:	51 c0       	rjmp	.+162    	; 0xec <__vector_18>
  4a:	00 00       	nop
  4c:	40 c0       	rjmp	.+128    	; 0xce <__bad_interrupt>
  4e:	00 00       	nop
  50:	3e c0       	rjmp	.+124    	; 0xce <__bad_interrupt>
  52:	00 00       	nop
  54:	3c c0       	rjmp	.+120    	; 0xce <__bad_interrupt>
  56:	00 00       	nop
  58:	3a c0       	rjmp	.+116    	; 0xce <__bad_interrupt>
  5a:	00 00       	nop
  5c:	38 c0       	rjmp	.+112    	; 0xce <__bad_interrupt>
  5e:	00 00       	nop
  60:	36 c0       	rjmp	.+108    	; 0xce <__bad_interrupt>
  62:	00 00       	nop
  64:	34 c0       	rjmp	.+104    	; 0xce <__bad_interrupt>
  66:	00 00       	nop
  68:	32 c0       	rjmp	.+100    	; 0xce <__bad_interrupt>
  6a:	00 00       	nop
  6c:	30 c0       	rjmp	.+96     	; 0xce <__bad_interrupt>
  6e:	00 00       	nop
  70:	2e c0       	rjmp	.+92     	; 0xce <__bad_interrupt>
  72:	00 00       	nop
  74:	2c c0       	rjmp	.+88     	; 0xce <__bad_interrupt>
  76:	00 00       	nop
  78:	2a c0       	rjmp	.+84     	; 0xce <__bad_interrupt>
  7a:	00 00       	nop
  7c:	28 c0       	rjmp	.+80     	; 0xce <__bad_interrupt>
  7e:	00 00       	nop
  80:	26 c0       	rjmp	.+76     	; 0xce <__bad_interrupt>
  82:	00 00       	nop
  84:	24 c0       	rjmp	.+72     	; 0xce <__bad_interrupt>
  86:	00 00       	nop
  88:	22 c0       	rjmp	.+68     	; 0xce <__bad_interrupt>
  8a:	00 00       	nop
  8c:	20 c0       	rjmp	.+64     	; 0xce <__bad_interrupt>
  8e:	00 00       	nop
  90:	1e c0       	rjmp	.+60     	; 0xce <__bad_interrupt>
	...

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_clear_bss>:
  a0:	22 e0       	ldi	r18, 0x02	; 2
  a2:	a6 e0       	ldi	r26, 0x06	; 6
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	01 c0       	rjmp	.+2      	; 0xaa <.do_clear_bss_start>

000000a8 <.do_clear_bss_loop>:
  a8:	1d 92       	st	X+, r1

000000aa <.do_clear_bss_start>:
  aa:	ad 3a       	cpi	r26, 0xAD	; 173
  ac:	b2 07       	cpc	r27, r18
  ae:	e1 f7       	brne	.-8      	; 0xa8 <.do_clear_bss_loop>

000000b0 <__do_copy_data>:
  b0:	11 e0       	ldi	r17, 0x01	; 1
  b2:	a0 e0       	ldi	r26, 0x00	; 0
  b4:	b1 e0       	ldi	r27, 0x01	; 1
  b6:	e6 ea       	ldi	r30, 0xA6	; 166
  b8:	fc e0       	ldi	r31, 0x0C	; 12
  ba:	00 e0       	ldi	r16, 0x00	; 0
  bc:	0b bf       	out	0x3b, r16	; 59
  be:	02 c0       	rjmp	.+4      	; 0xc4 <__do_copy_data+0x14>
  c0:	07 90       	elpm	r0, Z+
  c2:	0d 92       	st	X+, r0
  c4:	a6 30       	cpi	r26, 0x06	; 6
  c6:	b1 07       	cpc	r27, r17
  c8:	d9 f7       	brne	.-10     	; 0xc0 <__do_copy_data+0x10>
  ca:	6b d2       	rcall	.+1238   	; 0x5a2 <main>
  cc:	ea c5       	rjmp	.+3028   	; 0xca2 <_exit>

000000ce <__bad_interrupt>:
  ce:	98 cf       	rjmp	.-208    	; 0x0 <__vectors>

000000d0 <adc_init>:
#include <avr/io.h>

void adc_init(void){
	
	/* Voltage ref AVcc with external capacitor on AREF pin */
	ADMUX |= (1<<REFS0);
  d0:	ec e7       	ldi	r30, 0x7C	; 124
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	80 81       	ld	r24, Z
  d6:	80 64       	ori	r24, 0x40	; 64
  d8:	80 83       	st	Z, r24
	
	/* Select prescaler to 64 --> conversion f= 125kHz */
	ADCSRA |= (1<<ADPS2)|(1<<ADPS2);
  da:	ea e7       	ldi	r30, 0x7A	; 122
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	80 81       	ld	r24, Z
  e0:	84 60       	ori	r24, 0x04	; 4
  e2:	80 83       	st	Z, r24
	
	/* Enable the ADC */
	ADCSRA |= (1<<ADEN);
  e4:	80 81       	ld	r24, Z
  e6:	80 68       	ori	r24, 0x80	; 128
  e8:	80 83       	st	Z, r24
  ea:	08 95       	ret

000000ec <__vector_18>:
	if (rx_on != rx_off) {
		rx_off++;
	}

	return true;
}
  ec:	1f 92       	push	r1
  ee:	0f 92       	push	r0
  f0:	0f b6       	in	r0, 0x3f	; 63
  f2:	0f 92       	push	r0
  f4:	11 24       	eor	r1, r1
  f6:	0b b6       	in	r0, 0x3b	; 59
  f8:	0f 92       	push	r0
  fa:	2f 93       	push	r18
  fc:	3f 93       	push	r19
  fe:	4f 93       	push	r20
 100:	5f 93       	push	r21
 102:	6f 93       	push	r22
 104:	8f 93       	push	r24
 106:	9f 93       	push	r25
 108:	af 93       	push	r26
 10a:	bf 93       	push	r27
 10c:	ef 93       	push	r30
 10e:	ff 93       	push	r31
 110:	cf 93       	push	r28
 112:	df 93       	push	r29
 114:	1f 92       	push	r1
 116:	cd b7       	in	r28, 0x3d	; 61
 118:	de b7       	in	r29, 0x3e	; 62
 11a:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
 11e:	80 ff       	sbrs	r24, 0
 120:	47 c0       	rjmp	.+142    	; 0x1b0 <__vector_18+0xc4>
 122:	90 91 de 00 	lds	r25, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
 126:	90 ff       	sbrs	r25, 0
 128:	43 c0       	rjmp	.+134    	; 0x1b0 <__vector_18+0xc4>
 12a:	10 92 ed 00 	sts	0x00ED, r1	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 12e:	ee ee       	ldi	r30, 0xEE	; 238
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	80 81       	ld	r24, Z
 134:	89 83       	std	Y+1, r24	; 0x01
 136:	80 81       	ld	r24, Z
 138:	8f 7b       	andi	r24, 0xBF	; 191
 13a:	80 83       	st	Z, r24
 13c:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <tx_off>
 140:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <tx_on>
 144:	98 17       	cp	r25, r24
 146:	89 f1       	breq	.+98     	; 0x1aa <__vector_18+0xbe>
 148:	8f 70       	andi	r24, 0x0F	; 15
 14a:	2b e0       	ldi	r18, 0x0B	; 11
 14c:	82 9f       	mul	r24, r18
 14e:	c0 01       	movw	r24, r0
 150:	11 24       	eor	r1, r1
 152:	fc 01       	movw	r30, r24
 154:	e4 54       	subi	r30, 0x44	; 68
 156:	fe 4f       	sbci	r31, 0xFE	; 254
 158:	20 81       	ld	r18, Z
 15a:	20 93 f0 00 	sts	0x00F0, r18	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 15e:	20 81       	ld	r18, Z
 160:	20 93 f2 00 	sts	0x00F2, r18	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 164:	21 81       	ldd	r18, Z+1	; 0x01
 166:	20 93 f3 00 	sts	0x00F3, r18	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 16a:	23 81       	ldd	r18, Z+3	; 0x03
 16c:	aa ef       	ldi	r26, 0xFA	; 250
 16e:	b0 e0       	ldi	r27, 0x00	; 0
 170:	2c 93       	st	X, r18
 172:	24 81       	ldd	r18, Z+4	; 0x04
 174:	2c 93       	st	X, r18
 176:	25 81       	ldd	r18, Z+5	; 0x05
 178:	2c 93       	st	X, r18
 17a:	26 81       	ldd	r18, Z+6	; 0x06
 17c:	2c 93       	st	X, r18
 17e:	27 81       	ldd	r18, Z+7	; 0x07
 180:	2c 93       	st	X, r18
 182:	20 85       	ldd	r18, Z+8	; 0x08
 184:	2c 93       	st	X, r18
 186:	21 85       	ldd	r18, Z+9	; 0x09
 188:	2c 93       	st	X, r18
 18a:	22 85       	ldd	r18, Z+10	; 0x0a
 18c:	2c 93       	st	X, r18
 18e:	fc 01       	movw	r30, r24
 190:	e2 54       	subi	r30, 0x42	; 66
 192:	fe 4f       	sbci	r31, 0xFE	; 254
 194:	80 81       	ld	r24, Z
 196:	8f 70       	andi	r24, 0x0F	; 15
 198:	80 64       	ori	r24, 0x40	; 64
 19a:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
 19e:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <tx_off>
 1a2:	8f 5f       	subi	r24, 0xFF	; 255
 1a4:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <tx_off>
 1a8:	7d c0       	rjmp	.+250    	; 0x2a4 <__vector_18+0x1b8>
 1aa:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <tx_busy>
 1ae:	7a c0       	rjmp	.+244    	; 0x2a4 <__vector_18+0x1b8>
 1b0:	81 ff       	sbrs	r24, 1
 1b2:	78 c0       	rjmp	.+240    	; 0x2a4 <__vector_18+0x1b8>
 1b4:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
 1b8:	81 ff       	sbrs	r24, 1
 1ba:	74 c0       	rjmp	.+232    	; 0x2a4 <__vector_18+0x1b8>
 1bc:	80 e1       	ldi	r24, 0x10	; 16
 1be:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 1c2:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <rx_on>
 1c6:	28 2f       	mov	r18, r24
 1c8:	30 e0       	ldi	r19, 0x00	; 0
 1ca:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <rx_off>
 1ce:	29 1b       	sub	r18, r25
 1d0:	31 09       	sbc	r19, r1
 1d2:	2f 77       	andi	r18, 0x7F	; 127
 1d4:	33 27       	eor	r19, r19
 1d6:	20 31       	cpi	r18, 0x10	; 16
 1d8:	31 05       	cpc	r19, r1
 1da:	0c f0       	brlt	.+2      	; 0x1de <__vector_18+0xf2>
 1dc:	58 c0       	rjmp	.+176    	; 0x28e <__vector_18+0x1a2>
 1de:	e8 2f       	mov	r30, r24
 1e0:	ef 70       	andi	r30, 0x0F	; 15
 1e2:	90 91 ef 00 	lds	r25, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
 1e6:	2e 2f       	mov	r18, r30
 1e8:	30 e0       	ldi	r19, 0x00	; 0
 1ea:	4b e0       	ldi	r20, 0x0B	; 11
 1ec:	e4 9f       	mul	r30, r20
 1ee:	f0 01       	movw	r30, r0
 1f0:	11 24       	eor	r1, r1
 1f2:	e4 5f       	subi	r30, 0xF4	; 244
 1f4:	fe 4f       	sbci	r31, 0xFE	; 254
 1f6:	9f 70       	andi	r25, 0x0F	; 15
 1f8:	42 81       	ldd	r20, Z+2	; 0x02
 1fa:	40 7f       	andi	r20, 0xF0	; 240
 1fc:	94 2b       	or	r25, r20
 1fe:	92 83       	std	Z+2, r25	; 0x02
 200:	90 91 f2 00 	lds	r25, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 204:	40 91 f0 00 	lds	r20, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 208:	47 70       	andi	r20, 0x07	; 7
 20a:	90 7e       	andi	r25, 0xE0	; 224
 20c:	94 2b       	or	r25, r20
 20e:	90 83       	st	Z, r25
 210:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 214:	91 83       	std	Z+1, r25	; 0x01
 216:	aa ef       	ldi	r26, 0xFA	; 250
 218:	b0 e0       	ldi	r27, 0x00	; 0
 21a:	9c 91       	ld	r25, X
 21c:	93 83       	std	Z+3, r25	; 0x03
 21e:	9c 91       	ld	r25, X
 220:	94 83       	std	Z+4, r25	; 0x04
 222:	9c 91       	ld	r25, X
 224:	95 83       	std	Z+5, r25	; 0x05
 226:	9c 91       	ld	r25, X
 228:	96 83       	std	Z+6, r25	; 0x06
 22a:	9c 91       	ld	r25, X
 22c:	97 83       	std	Z+7, r25	; 0x07
 22e:	9c 91       	ld	r25, X
 230:	90 87       	std	Z+8, r25	; 0x08
 232:	9c 91       	ld	r25, X
 234:	91 87       	std	Z+9, r25	; 0x09
 236:	9c 91       	ld	r25, X
 238:	92 87       	std	Z+10, r25	; 0x0a
 23a:	8f 5f       	subi	r24, 0xFF	; 255
 23c:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <rx_on>
 240:	40 81       	ld	r20, Z
 242:	42 95       	swap	r20
 244:	46 95       	lsr	r20
 246:	47 70       	andi	r20, 0x07	; 7
 248:	51 81       	ldd	r21, Z+1	; 0x01
 24a:	65 2f       	mov	r22, r21
 24c:	66 0f       	add	r22, r22
 24e:	66 0f       	add	r22, r22
 250:	66 0f       	add	r22, r22
 252:	86 2f       	mov	r24, r22
 254:	84 2b       	or	r24, r20
 256:	95 2f       	mov	r25, r21
 258:	92 95       	swap	r25
 25a:	96 95       	lsr	r25
 25c:	97 70       	andi	r25, 0x07	; 7
 25e:	89 2b       	or	r24, r25
 260:	b1 f4       	brne	.+44     	; 0x28e <__vector_18+0x1a2>
 262:	8b e0       	ldi	r24, 0x0B	; 11
 264:	82 9f       	mul	r24, r18
 266:	f0 01       	movw	r30, r0
 268:	83 9f       	mul	r24, r19
 26a:	f0 0d       	add	r31, r0
 26c:	11 24       	eor	r1, r1
 26e:	e4 5f       	subi	r30, 0xF4	; 244
 270:	fe 4f       	sbci	r31, 0xFE	; 254
 272:	83 81       	ldd	r24, Z+3	; 0x03
 274:	83 30       	cpi	r24, 0x03	; 3
 276:	59 f4       	brne	.+22     	; 0x28e <__vector_18+0x1a2>
 278:	98 e0       	ldi	r25, 0x08	; 8
 27a:	88 e1       	ldi	r24, 0x18	; 24
 27c:	0f b6       	in	r0, 0x3f	; 63
 27e:	f8 94       	cli
 280:	a8 95       	wdr
 282:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
 286:	0f be       	out	0x3f, r0	; 63
 288:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
 28c:	ff cf       	rjmp	.-2      	; 0x28c <__vector_18+0x1a0>
 28e:	ee ee       	ldi	r30, 0xEE	; 238
 290:	f0 e0       	ldi	r31, 0x00	; 0
 292:	80 81       	ld	r24, Z
 294:	89 83       	std	Y+1, r24	; 0x01
 296:	89 81       	ldd	r24, Y+1	; 0x01
 298:	80 81       	ld	r24, Z
 29a:	8f 7d       	andi	r24, 0xDF	; 223
 29c:	80 83       	st	Z, r24
 29e:	80 e8       	ldi	r24, 0x80	; 128
 2a0:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
 2a4:	0f 90       	pop	r0
 2a6:	df 91       	pop	r29
 2a8:	cf 91       	pop	r28
 2aa:	ff 91       	pop	r31
 2ac:	ef 91       	pop	r30
 2ae:	bf 91       	pop	r27
 2b0:	af 91       	pop	r26
 2b2:	9f 91       	pop	r25
 2b4:	8f 91       	pop	r24
 2b6:	6f 91       	pop	r22
 2b8:	5f 91       	pop	r21
 2ba:	4f 91       	pop	r20
 2bc:	3f 91       	pop	r19
 2be:	2f 91       	pop	r18
 2c0:	0f 90       	pop	r0
 2c2:	0b be       	out	0x3b, r0	; 59
 2c4:	0f 90       	pop	r0
 2c6:	0f be       	out	0x3f, r0	; 63
 2c8:	0f 90       	pop	r0
 2ca:	1f 90       	pop	r1
 2cc:	18 95       	reti

000002ce <can_init>:
 2ce:	cf 93       	push	r28
 2d0:	df 93       	push	r29
 2d2:	e8 ed       	ldi	r30, 0xD8	; 216
 2d4:	f0 e0       	ldi	r31, 0x00	; 0
 2d6:	21 e0       	ldi	r18, 0x01	; 1
 2d8:	20 83       	st	Z, r18
 2da:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 2de:	2c e0       	ldi	r18, 0x0C	; 12
 2e0:	20 93 e3 00 	sts	0x00E3, r18	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
 2e4:	27 e3       	ldi	r18, 0x37	; 55
 2e6:	20 93 e4 00 	sts	0x00E4, r18	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
 2ea:	10 92 e7 00 	sts	0x00E7, r1	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7e00e7>
 2ee:	10 92 e6 00 	sts	0x00E6, r1	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7e00e6>
 2f2:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 2f6:	10 92 e8 00 	sts	0x00E8, r1	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 2fa:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
 2fe:	10 92 e5 00 	sts	0x00E5, r1	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
 302:	cd ee       	ldi	r28, 0xED	; 237
 304:	d0 e0       	ldi	r29, 0x00	; 0
 306:	18 82       	st	Y, r1
 308:	ae ee       	ldi	r26, 0xEE	; 238
 30a:	b0 e0       	ldi	r27, 0x00	; 0
 30c:	1c 92       	st	X, r1
 30e:	20 e1       	ldi	r18, 0x10	; 16
 310:	28 83       	st	Y, r18
 312:	1c 92       	st	X, r1
 314:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7e00f4>
 318:	28 2f       	mov	r18, r24
 31a:	22 95       	swap	r18
 31c:	22 0f       	add	r18, r18
 31e:	20 7e       	andi	r18, 0xE0	; 224
 320:	20 93 f6 00 	sts	0x00F6, r18	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
 324:	96 95       	lsr	r25
 326:	87 95       	ror	r24
 328:	96 95       	lsr	r25
 32a:	87 95       	ror	r24
 32c:	96 95       	lsr	r25
 32e:	87 95       	ror	r24
 330:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
 334:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 338:	86 2f       	mov	r24, r22
 33a:	82 95       	swap	r24
 33c:	88 0f       	add	r24, r24
 33e:	80 7e       	andi	r24, 0xE0	; 224
 340:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 344:	76 95       	lsr	r23
 346:	67 95       	ror	r22
 348:	76 95       	lsr	r23
 34a:	67 95       	ror	r22
 34c:	76 95       	lsr	r23
 34e:	67 95       	ror	r22
 350:	60 93 f3 00 	sts	0x00F3, r22	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 354:	80 e8       	ldi	r24, 0x80	; 128
 356:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
 35a:	83 e0       	ldi	r24, 0x03	; 3
 35c:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
 360:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
 364:	80 eb       	ldi	r24, 0xB0	; 176
 366:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
 36a:	82 e0       	ldi	r24, 0x02	; 2
 36c:	80 83       	st	Z, r24
 36e:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <__data_end>
 372:	df 91       	pop	r29
 374:	cf 91       	pop	r28
 376:	08 95       	ret

00000378 <can_send_message>:

bool can_send_message(CanMessage_t* message) {
 378:	cf 93       	push	r28
 37a:	df 93       	push	r29
 37c:	fc 01       	movw	r30, r24
	bool result = false;

	CANGIE &= ~(1 << ENIT);
 37e:	ab ed       	ldi	r26, 0xDB	; 219
 380:	b0 e0       	ldi	r27, 0x00	; 0
 382:	8c 91       	ld	r24, X
 384:	8f 77       	andi	r24, 0x7F	; 127
 386:	8c 93       	st	X, r24

	if (!tx_busy) {
 388:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <tx_busy>
 38c:	81 11       	cpse	r24, r1
 38e:	27 c0       	rjmp	.+78     	; 0x3de <can_send_message+0x66>
		// Switch to Mob 0 access
		CANPAGE = 0 << 4;
 390:	10 92 ed 00 	sts	0x00ED, r1	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>

		// Set ID
		CANIDT2 = message->id << 5;
 394:	80 81       	ld	r24, Z
 396:	82 95       	swap	r24
 398:	88 0f       	add	r24, r24
 39a:	80 7e       	andi	r24, 0xE0	; 224
 39c:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
		CANIDT1 = message->id >> 3;
 3a0:	80 81       	ld	r24, Z
 3a2:	91 81       	ldd	r25, Z+1	; 0x01
 3a4:	96 95       	lsr	r25
 3a6:	87 95       	ror	r24
 3a8:	96 95       	lsr	r25
 3aa:	87 95       	ror	r24
 3ac:	96 95       	lsr	r25
 3ae:	87 95       	ror	r24
 3b0:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 3b4:	df 01       	movw	r26, r30
 3b6:	13 96       	adiw	r26, 0x03	; 3
 3b8:	9f 01       	movw	r18, r30
 3ba:	25 5f       	subi	r18, 0xF5	; 245
 3bc:	3f 4f       	sbci	r19, 0xFF	; 255

		// Program data registers - auto increment
		for (int i = 0; i < 8; i++) {
			CANMSG = message->data.u8[i];
 3be:	ca ef       	ldi	r28, 0xFA	; 250
 3c0:	d0 e0       	ldi	r29, 0x00	; 0
 3c2:	9d 91       	ld	r25, X+
 3c4:	98 83       	st	Y, r25
		// Set ID
		CANIDT2 = message->id << 5;
		CANIDT1 = message->id >> 3;

		// Program data registers - auto increment
		for (int i = 0; i < 8; i++) {
 3c6:	a2 17       	cp	r26, r18
 3c8:	b3 07       	cpc	r27, r19
 3ca:	d9 f7       	brne	.-10     	; 0x3c2 <can_send_message+0x4a>
			CANMSG = message->data.u8[i];
		}
		
		result = true;
		tx_busy = 1;
 3cc:	81 e0       	ldi	r24, 0x01	; 1
 3ce:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <tx_busy>

		// Set length, start send which restarts tx interrupt
		CANCDMOB = (1 << CONMOB0) | message->length;
 3d2:	82 81       	ldd	r24, Z+2	; 0x02
 3d4:	80 64       	ori	r24, 0x40	; 64
 3d6:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
		// Program data registers - auto increment
		for (int i = 0; i < 8; i++) {
			CANMSG = message->data.u8[i];
		}
		
		result = true;
 3da:	81 e0       	ldi	r24, 0x01	; 1
 3dc:	3c c0       	rjmp	.+120    	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
		tx_busy = 1;

		// Set length, start send which restarts tx interrupt
		CANCDMOB = (1 << CONMOB0) | message->length;
	}
	else if (TX_SIZE - ((tx_on - tx_off) & TX_ABS_MASK)) {
 3de:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <tx_on>
 3e2:	82 2f       	mov	r24, r18
 3e4:	90 e0       	ldi	r25, 0x00	; 0
 3e6:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <tx_off>
 3ea:	83 1b       	sub	r24, r19
 3ec:	91 09       	sbc	r25, r1
 3ee:	8f 77       	andi	r24, 0x7F	; 127
 3f0:	99 27       	eor	r25, r25
 3f2:	40 97       	sbiw	r24, 0x10	; 16
 3f4:	79 f1       	breq	.+94     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
		// Copy data into TX buffer
		tx_frames[tx_on & (TX_SIZE-1)].id = message->id;
 3f6:	a2 2f       	mov	r26, r18
 3f8:	af 70       	andi	r26, 0x0F	; 15
 3fa:	8b e0       	ldi	r24, 0x0B	; 11
 3fc:	a8 9f       	mul	r26, r24
 3fe:	d0 01       	movw	r26, r0
 400:	11 24       	eor	r1, r1
 402:	ed 01       	movw	r28, r26
 404:	c4 54       	subi	r28, 0x44	; 68
 406:	de 4f       	sbci	r29, 0xFE	; 254
 408:	80 81       	ld	r24, Z
 40a:	38 2f       	mov	r19, r24
 40c:	32 95       	swap	r19
 40e:	33 0f       	add	r19, r19
 410:	30 7e       	andi	r19, 0xE0	; 224
 412:	98 81       	ld	r25, Y
 414:	9f 71       	andi	r25, 0x1F	; 31
 416:	93 2b       	or	r25, r19
 418:	98 83       	st	Y, r25
 41a:	91 81       	ldd	r25, Z+1	; 0x01
 41c:	92 95       	swap	r25
 41e:	99 0f       	add	r25, r25
 420:	90 7e       	andi	r25, 0xE0	; 224
 422:	86 95       	lsr	r24
 424:	86 95       	lsr	r24
 426:	86 95       	lsr	r24
 428:	89 2b       	or	r24, r25
 42a:	89 83       	std	Y+1, r24	; 0x01
		tx_frames[tx_on & (TX_SIZE-1)].length = message->length;
 42c:	82 81       	ldd	r24, Z+2	; 0x02
 42e:	98 2f       	mov	r25, r24
 430:	9f 70       	andi	r25, 0x0F	; 15
 432:	8a 81       	ldd	r24, Y+2	; 0x02
 434:	80 7f       	andi	r24, 0xF0	; 240
 436:	89 2b       	or	r24, r25
 438:	8a 83       	std	Y+2, r24	; 0x02
		memcpy(tx_frames[tx_on & (TX_SIZE-1)].data, &message->data, CAN_FRAME_DATA_MAX_LENGTH);
 43a:	a1 54       	subi	r26, 0x41	; 65
 43c:	be 4f       	sbci	r27, 0xFE	; 254
 43e:	88 e0       	ldi	r24, 0x08	; 8
 440:	33 96       	adiw	r30, 0x03	; 3
 442:	01 90       	ld	r0, Z+
 444:	0d 92       	st	X+, r0
 446:	8a 95       	dec	r24
 448:	e1 f7       	brne	.-8      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>

		/*for (int i = 0; i < 8; i++) {
			tx_frames[tx_on & (TX_SIZE-1)].data[i] = message->data.u8[i];
		}*/

		tx_on++;
 44a:	2f 5f       	subi	r18, 0xFF	; 255
 44c:	20 93 0a 01 	sts	0x010A, r18	; 0x80010a <tx_on>
		result = true;
 450:	81 e0       	ldi	r24, 0x01	; 1
 452:	01 c0       	rjmp	.+2      	; 0x456 <__LOCK_REGION_LENGTH__+0x56>

	return true;
}

bool can_send_message(CanMessage_t* message) {
	bool result = false;
 454:	80 e0       	ldi	r24, 0x00	; 0

		tx_on++;
		result = true;
	}

	CANGIE |= (1 << ENIT);
 456:	eb ed       	ldi	r30, 0xDB	; 219
 458:	f0 e0       	ldi	r31, 0x00	; 0
 45a:	90 81       	ld	r25, Z
 45c:	90 68       	ori	r25, 0x80	; 128
 45e:	90 83       	st	Z, r25

	return result;
 460:	df 91       	pop	r29
 462:	cf 91       	pop	r28
 464:	08 95       	ret

00000466 <rgbled_turn_off>:
	DDRB |= LED_ALL;
	rgbled_turn_off(LED_ALL);
}

void rgbled_turn_off(RgbLedColor_t color) {
	PORTB |= color;
 466:	95 b1       	in	r25, 0x05	; 5
 468:	89 2b       	or	r24, r25
 46a:	85 b9       	out	0x05, r24	; 5
 46c:	08 95       	ret

0000046e <rgbled_init>:
#include "rgbled.h"
#include <avr/io.h>


void rgbled_init() {
	DDRB |= LED_ALL;
 46e:	84 b1       	in	r24, 0x04	; 4
 470:	80 6e       	ori	r24, 0xE0	; 224
 472:	84 b9       	out	0x04, r24	; 4
	rgbled_turn_off(LED_ALL);
 474:	80 ee       	ldi	r24, 0xE0	; 224
 476:	f7 cf       	rjmp	.-18     	; 0x466 <rgbled_turn_off>
 478:	08 95       	ret

0000047a <rgbled_turn_on>:
void rgbled_turn_off(RgbLedColor_t color) {
	PORTB |= color;
}

void rgbled_turn_on(RgbLedColor_t color) {
	PORTB &= ~color;
 47a:	95 b1       	in	r25, 0x05	; 5
 47c:	80 95       	com	r24
 47e:	98 23       	and	r25, r24
 480:	95 b9       	out	0x05, r25	; 5
 482:	08 95       	ret

00000484 <rgbled_toggle>:
}

void rgbled_toggle(RgbLedColor_t color) {
	PORTB ^= color;
 484:	95 b1       	in	r25, 0x05	; 5
 486:	89 27       	eor	r24, r25
 488:	85 b9       	out	0x05, r24	; 5
 48a:	08 95       	ret

0000048c <timer_init>:
	elapsed_microseconds[timer] = 0;
	timer_enabled[timer] = true;
}

void timer_stop(timer_t timer) {
	timer_enabled[timer] = false;
 48c:	14 bc       	out	0x24, r1	; 36
 48e:	81 e0       	ldi	r24, 0x01	; 1
 490:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
 494:	84 b5       	in	r24, 0x24	; 36
 496:	84 60       	ori	r24, 0x04	; 4
 498:	84 bd       	out	0x24, r24	; 36
 49a:	08 95       	ret

0000049c <timer_start>:
 49c:	90 e0       	ldi	r25, 0x00	; 0
 49e:	fc 01       	movw	r30, r24
 4a0:	ee 0f       	add	r30, r30
 4a2:	ff 1f       	adc	r31, r31
 4a4:	ee 0f       	add	r30, r30
 4a6:	ff 1f       	adc	r31, r31
 4a8:	e4 59       	subi	r30, 0x94	; 148
 4aa:	fd 4f       	sbci	r31, 0xFD	; 253
 4ac:	10 82       	st	Z, r1
 4ae:	11 82       	std	Z+1, r1	; 0x01
 4b0:	12 82       	std	Z+2, r1	; 0x02
 4b2:	13 82       	std	Z+3, r1	; 0x03
 4b4:	fc 01       	movw	r30, r24
 4b6:	e4 57       	subi	r30, 0x74	; 116
 4b8:	fd 4f       	sbci	r31, 0xFD	; 253
 4ba:	21 e0       	ldi	r18, 0x01	; 1
 4bc:	20 83       	st	Z, r18
 4be:	08 95       	ret

000004c0 <timer_elapsed_ms>:
}

uint16_t timer_elapsed_ms(timer_t timer) {
	return elapsed_microseconds[timer] / 1000;
 4c0:	24 e0       	ldi	r18, 0x04	; 4
 4c2:	82 9f       	mul	r24, r18
 4c4:	c0 01       	movw	r24, r0
 4c6:	11 24       	eor	r1, r1
 4c8:	fc 01       	movw	r30, r24
 4ca:	e4 59       	subi	r30, 0x94	; 148
 4cc:	fd 4f       	sbci	r31, 0xFD	; 253
 4ce:	60 81       	ld	r22, Z
 4d0:	71 81       	ldd	r23, Z+1	; 0x01
 4d2:	82 81       	ldd	r24, Z+2	; 0x02
 4d4:	93 81       	ldd	r25, Z+3	; 0x03
 4d6:	28 ee       	ldi	r18, 0xE8	; 232
 4d8:	33 e0       	ldi	r19, 0x03	; 3
 4da:	40 e0       	ldi	r20, 0x00	; 0
 4dc:	50 e0       	ldi	r21, 0x00	; 0
 4de:	27 d2       	rcall	.+1102   	; 0x92e <__udivmodsi4>
}
 4e0:	c9 01       	movw	r24, r18
 4e2:	08 95       	ret

000004e4 <__vector_17>:

ISR(TIMER0_OVF_vect) {
 4e4:	1f 92       	push	r1
 4e6:	0f 92       	push	r0
 4e8:	0f b6       	in	r0, 0x3f	; 63
 4ea:	0f 92       	push	r0
 4ec:	11 24       	eor	r1, r1
 4ee:	0b b6       	in	r0, 0x3b	; 59
 4f0:	0f 92       	push	r0
 4f2:	2f 93       	push	r18
 4f4:	3f 93       	push	r19
 4f6:	4f 93       	push	r20
 4f8:	5f 93       	push	r21
 4fa:	6f 93       	push	r22
 4fc:	7f 93       	push	r23
 4fe:	8f 93       	push	r24
 500:	af 93       	push	r26
 502:	bf 93       	push	r27
 504:	ef 93       	push	r30
 506:	ff 93       	push	r31
 508:	ac e8       	ldi	r26, 0x8C	; 140
 50a:	b2 e0       	ldi	r27, 0x02	; 2
 50c:	ec e6       	ldi	r30, 0x6C	; 108
 50e:	f2 e0       	ldi	r31, 0x02	; 2
 510:	2c e8       	ldi	r18, 0x8C	; 140
 512:	32 e0       	ldi	r19, 0x02	; 2
	for (int t = 0; t < NUMBER_OF_TIMERS; t++) {
		if (timer_enabled[t]){
 514:	8d 91       	ld	r24, X+
 516:	88 23       	and	r24, r24
 518:	59 f0       	breq	.+22     	; 0x530 <__vector_17+0x4c>
			elapsed_microseconds[t] += (1000000ULL * 256 * 256) / F_CPU;
 51a:	40 81       	ld	r20, Z
 51c:	51 81       	ldd	r21, Z+1	; 0x01
 51e:	62 81       	ldd	r22, Z+2	; 0x02
 520:	73 81       	ldd	r23, Z+3	; 0x03
 522:	50 5e       	subi	r21, 0xE0	; 224
 524:	6f 4f       	sbci	r22, 0xFF	; 255
 526:	7f 4f       	sbci	r23, 0xFF	; 255
 528:	40 83       	st	Z, r20
 52a:	51 83       	std	Z+1, r21	; 0x01
 52c:	62 83       	std	Z+2, r22	; 0x02
 52e:	73 83       	std	Z+3, r23	; 0x03
 530:	34 96       	adiw	r30, 0x04	; 4
uint16_t timer_elapsed_ms(timer_t timer) {
	return elapsed_microseconds[timer] / 1000;
}

ISR(TIMER0_OVF_vect) {
	for (int t = 0; t < NUMBER_OF_TIMERS; t++) {
 532:	e2 17       	cp	r30, r18
 534:	f3 07       	cpc	r31, r19
 536:	71 f7       	brne	.-36     	; 0x514 <__vector_17+0x30>
		if (timer_enabled[t]){
			elapsed_microseconds[t] += (1000000ULL * 256 * 256) / F_CPU;
		}
	}
}
 538:	ff 91       	pop	r31
 53a:	ef 91       	pop	r30
 53c:	bf 91       	pop	r27
 53e:	af 91       	pop	r26
 540:	8f 91       	pop	r24
 542:	7f 91       	pop	r23
 544:	6f 91       	pop	r22
 546:	5f 91       	pop	r21
 548:	4f 91       	pop	r20
 54a:	3f 91       	pop	r19
 54c:	2f 91       	pop	r18
 54e:	0f 90       	pop	r0
 550:	0b be       	out	0x3b, r0	; 59
 552:	0f 90       	pop	r0
 554:	0f be       	out	0x3f, r0	; 63
 556:	0f 90       	pop	r0
 558:	1f 90       	pop	r1
 55a:	18 95       	reti

0000055c <usbdbg_tx_char>:
	fdevopen(usbdbg_tx_char, NULL);
}

int usbdbg_tx_char(char c, FILE* stream)
{
	while (!(UCSR0A & (1 << UDRE0))) { }; // Wait until data register is empty
 55c:	e0 ec       	ldi	r30, 0xC0	; 192
 55e:	f0 e0       	ldi	r31, 0x00	; 0
 560:	90 81       	ld	r25, Z
 562:	95 ff       	sbrs	r25, 5
 564:	fd cf       	rjmp	.-6      	; 0x560 <usbdbg_tx_char+0x4>
	UDR0 = c;
 566:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	return 1;
}
 56a:	81 e0       	ldi	r24, 0x01	; 1
 56c:	90 e0       	ldi	r25, 0x00	; 0
 56e:	08 95       	ret

00000570 <usbdbg_init>:
#include <stdlib.h>

void usbdbg_init()
{
	const uint32_t baud_rate = 250000;
	UBRR0 = (F_CPU / 16) / baud_rate - 1;
 570:	81 e0       	ldi	r24, 0x01	; 1
 572:	90 e0       	ldi	r25, 0x00	; 0
 574:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 578:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UCSR0C = (3 << UCSZ0);	// 8 bit transfer
 57c:	86 e0       	ldi	r24, 0x06	; 6
 57e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UCSR0B |= (1 << TXEN0)|(1<<RXEN0)|(1<<RXCIE0); // Enable receive and transmit
 582:	e1 ec       	ldi	r30, 0xC1	; 193
 584:	f0 e0       	ldi	r31, 0x00	; 0
 586:	80 81       	ld	r24, Z
 588:	88 69       	ori	r24, 0x98	; 152
 58a:	80 83       	st	Z, r24
	
	fdevopen(usbdbg_tx_char, NULL);
 58c:	60 e0       	ldi	r22, 0x00	; 0
 58e:	70 e0       	ldi	r23, 0x00	; 0
 590:	8e ea       	ldi	r24, 0xAE	; 174
 592:	92 e0       	ldi	r25, 0x02	; 2
 594:	ee c1       	rjmp	.+988    	; 0x972 <fdevopen>
 596:	08 95       	ret

00000598 <pin_init>:
static CanMessage_t canMessage;
uint32_t countTime = 0;

void pin_init(){
	//Encoder 1 pin init
	DDRD &= ~((1<<ENCODER_A_2)|(1<<WHEEL_PIN));
 598:	8a b1       	in	r24, 0x0a	; 10
 59a:	89 7f       	andi	r24, 0xF9	; 249
 59c:	8a b9       	out	0x0a, r24	; 10
	DDRE &= ~((1<<ENCODER_A_1));
 59e:	6d 98       	cbi	0x0d, 5	; 13
 5a0:	08 95       	ret

000005a2 <main>:
	TCNT1 = 0;
}*/

int main(void)
{
	cli();
 5a2:	f8 94       	cli
	pin_init();
 5a4:	f9 df       	rcall	.-14     	; 0x598 <pin_init>
	usbdbg_init();
 5a6:	e4 df       	rcall	.-56     	; 0x570 <usbdbg_init>
	//interrupt_timer_init();
	timer_init();
 5a8:	71 df       	rcall	.-286    	; 0x48c <timer_init>
	can_init(0,0);
 5aa:	60 e0       	ldi	r22, 0x00	; 0
 5ac:	70 e0       	ldi	r23, 0x00	; 0
 5ae:	80 e0       	ldi	r24, 0x00	; 0
 5b0:	90 e0       	ldi	r25, 0x00	; 0
 5b2:	8d de       	rcall	.-742    	; 0x2ce <can_init>
	adc_init();
 5b4:	8d dd       	rcall	.-1254   	; 0xd0 <adc_init>
	rgbled_init();
 5b6:	5b df       	rcall	.-330    	; 0x46e <rgbled_init>
	sei();
 5b8:	78 94       	sei
	
	timer_start(TIMER1);
 5ba:	81 e0       	ldi	r24, 0x01	; 1
 5bc:	6f df       	rcall	.-290    	; 0x49c <timer_start>
	timer_start(TIMER2);
 5be:	82 e0       	ldi	r24, 0x02	; 2
 5c0:	6d df       	rcall	.-294    	; 0x49c <timer_start>
	
	canMessage.id = ENCODER_CAN_ID;
 5c2:	e8 e9       	ldi	r30, 0x98	; 152
 5c4:	f2 e0       	ldi	r31, 0x02	; 2
 5c6:	80 e2       	ldi	r24, 0x20	; 32
 5c8:	92 e0       	ldi	r25, 0x02	; 2
 5ca:	91 83       	std	Z+1, r25	; 0x01
 5cc:	80 83       	st	Z, r24
	canMessage.length = 6;
 5ce:	86 e0       	ldi	r24, 0x06	; 6
 5d0:	82 83       	std	Z+2, r24	; 0x02
	//uint16_t countWheel = 0;
	uint32_t rpmWheel = 0;
	
	uint8_t state1 = 0;
	uint8_t state2 = 0;
	uint8_t stateWheel = 0;
 5d2:	f1 2c       	mov	r15, r1
	
	//uint16_t countWheel = 0;
	uint32_t rpmWheel = 0;
	
	uint8_t state1 = 0;
	uint8_t state2 = 0;
 5d4:	b1 2c       	mov	r11, r1
	uint16_t rpm2 = 0;
	
	//uint16_t countWheel = 0;
	uint32_t rpmWheel = 0;
	
	uint8_t state1 = 0;
 5d6:	e1 2c       	mov	r14, r1
	
	uint16_t count2 = 0;
	uint16_t rpm2 = 0;
	
	//uint16_t countWheel = 0;
	uint32_t rpmWheel = 0;
 5d8:	21 2c       	mov	r2, r1
 5da:	31 2c       	mov	r3, r1
	canMessage.length = 6;

	uint16_t count1 = 0;
	uint16_t rpm1 = 0;
	
	uint16_t count2 = 0;
 5dc:	00 e0       	ldi	r16, 0x00	; 0
 5de:	10 e0       	ldi	r17, 0x00	; 0
	timer_start(TIMER2);
	
	canMessage.id = ENCODER_CAN_ID;
	canMessage.length = 6;

	uint16_t count1 = 0;
 5e0:	c0 e0       	ldi	r28, 0x00	; 0
 5e2:	d0 e0       	ldi	r29, 0x00	; 0
		if (timer_elapsed_ms(TIMER1) >= 100)
		{
			rgbled_toggle(LED_BLUE);
			
			rpm1 = count1 * COUNTCONSTANT;
			canMessage.data.u16[0] = rpm1;
 5e4:	6f 01       	movw	r12, r30
			
			canMessage.data.u16[2] = rpmWheel;
			can_send_message(&canMessage);
			
			count1 = 0;
			count2 = 0;
 5e6:	81 2c       	mov	r8, r1
 5e8:	91 2c       	mov	r9, r1
		
		if ((PINE & (1<<ENCODER_A_1)) && !state1)
		{
			count1++;
			state1 = 1;	
		} else if (!(PINE & (1<<ENCODER_A_1)) && state1){
 5ea:	a1 2c       	mov	r10, r1
		if ((PIND & (1<<WHEEL_PIN)) && !stateWheel)
		{
			rgbled_turn_off(LED_RED);
			countTime = timer_elapsed_ms(TIMER2);
			timer_start(TIMER2);
			rpmWheel = WHEEL_COUNT_CONSTANT/countTime;
 5ec:	0f 2e       	mov	r0, r31
 5ee:	f0 e6       	ldi	r31, 0x60	; 96
 5f0:	4f 2e       	mov	r4, r31
 5f2:	fa ee       	ldi	r31, 0xEA	; 234
 5f4:	5f 2e       	mov	r5, r31
 5f6:	61 2c       	mov	r6, r1
 5f8:	71 2c       	mov	r7, r1
 5fa:	f0 2d       	mov	r31, r0
	uint8_t state2 = 0;
	uint8_t stateWheel = 0;
	
	while (1) 
    {
		rgbled_toggle(LED_GREEN);
 5fc:	80 e4       	ldi	r24, 0x40	; 64
 5fe:	42 df       	rcall	.-380    	; 0x484 <rgbled_toggle>
		
		if (timer_elapsed_ms(TIMER1) >= 100)
 600:	81 e0       	ldi	r24, 0x01	; 1
 602:	5e df       	rcall	.-324    	; 0x4c0 <timer_elapsed_ms>
 604:	84 36       	cpi	r24, 0x64	; 100
 606:	91 05       	cpc	r25, r1
 608:	80 f1       	brcs	.+96     	; 0x66a <main+0xc8>
		{
			rgbled_toggle(LED_BLUE);
 60a:	80 e8       	ldi	r24, 0x80	; 128
 60c:	3b df       	rcall	.-394    	; 0x484 <rgbled_toggle>
			
			rpm1 = count1 * COUNTCONSTANT;
 60e:	be 01       	movw	r22, r28
 610:	80 e0       	ldi	r24, 0x00	; 0
 612:	90 e0       	ldi	r25, 0x00	; 0
 614:	9b d0       	rcall	.+310    	; 0x74c <__floatunsisf>
 616:	20 e0       	ldi	r18, 0x00	; 0
 618:	30 e0       	ldi	r19, 0x00	; 0
 61a:	46 e9       	ldi	r20, 0x96	; 150
 61c:	5f e3       	ldi	r21, 0x3F	; 63
 61e:	fc d0       	rcall	.+504    	; 0x818 <__mulsf3>
 620:	69 d0       	rcall	.+210    	; 0x6f4 <__fixunssfsi>
 622:	f6 01       	movw	r30, r12
 624:	74 83       	std	Z+4, r23	; 0x04
 626:	63 83       	std	Z+3, r22	; 0x03
			canMessage.data.u16[0] = rpm1;
			
			rpm2 = count2 * COUNTCONSTANT;
 628:	b8 01       	movw	r22, r16
 62a:	80 e0       	ldi	r24, 0x00	; 0
 62c:	90 e0       	ldi	r25, 0x00	; 0
 62e:	8e d0       	rcall	.+284    	; 0x74c <__floatunsisf>
 630:	20 e0       	ldi	r18, 0x00	; 0
 632:	30 e0       	ldi	r19, 0x00	; 0
 634:	46 e9       	ldi	r20, 0x96	; 150
 636:	5f e3       	ldi	r21, 0x3F	; 63
 638:	ef d0       	rcall	.+478    	; 0x818 <__mulsf3>
 63a:	5c d0       	rcall	.+184    	; 0x6f4 <__fixunssfsi>
 63c:	f6 01       	movw	r30, r12
 63e:	76 83       	std	Z+6, r23	; 0x06
 640:	65 83       	std	Z+5, r22	; 0x05
			canMessage.data.u16[1] = rpm2;
			
			if (timer_elapsed_ms(TIMER2) > 5000)
 642:	82 e0       	ldi	r24, 0x02	; 2
 644:	3d df       	rcall	.-390    	; 0x4c0 <timer_elapsed_ms>
 646:	89 38       	cpi	r24, 0x89	; 137
 648:	93 41       	sbci	r25, 0x13	; 19
 64a:	10 f0       	brcs	.+4      	; 0x650 <main+0xae>
			{
				rpmWheel = 0;
 64c:	21 2c       	mov	r2, r1
 64e:	31 2c       	mov	r3, r1
			}
			
			canMessage.data.u16[2] = rpmWheel;
 650:	82 2d       	mov	r24, r2
 652:	93 2d       	mov	r25, r3
 654:	f6 01       	movw	r30, r12
 656:	90 87       	std	Z+8, r25	; 0x08
 658:	87 83       	std	Z+7, r24	; 0x07
			can_send_message(&canMessage);
 65a:	c6 01       	movw	r24, r12
 65c:	8d de       	rcall	.-742    	; 0x378 <can_send_message>
			
			count1 = 0;
			count2 = 0;
			timer_start(TIMER1);
 65e:	81 e0       	ldi	r24, 0x01	; 1
 660:	1d df       	rcall	.-454    	; 0x49c <timer_start>
			
			canMessage.data.u16[2] = rpmWheel;
			can_send_message(&canMessage);
			
			count1 = 0;
			count2 = 0;
 662:	08 2d       	mov	r16, r8
 664:	19 2d       	mov	r17, r9
			}
			
			canMessage.data.u16[2] = rpmWheel;
			can_send_message(&canMessage);
			
			count1 = 0;
 666:	c8 2d       	mov	r28, r8
 668:	d1 2f       	mov	r29, r17
			count2 = 0;
			timer_start(TIMER1);
		}
		
		if ((PINE & (1<<ENCODER_A_1)) && !state1)
 66a:	65 9b       	sbis	0x0c, 5	; 12
 66c:	06 c0       	rjmp	.+12     	; 0x67a <main+0xd8>
 66e:	e1 10       	cpse	r14, r1
 670:	04 c0       	rjmp	.+8      	; 0x67a <main+0xd8>
		{
			count1++;
 672:	21 96       	adiw	r28, 0x01	; 1
			state1 = 1;	
 674:	ee 24       	eor	r14, r14
 676:	e3 94       	inc	r14
 678:	02 c0       	rjmp	.+4      	; 0x67e <main+0xdc>
		} else if (!(PINE & (1<<ENCODER_A_1)) && state1){
 67a:	65 9b       	sbis	0x0c, 5	; 12
 67c:	ea 2c       	mov	r14, r10
			state1 = 0;
		}
		
		if ((PIND & (1<<ENCODER_A_2)) && !state2)
 67e:	4a 9b       	sbis	0x09, 2	; 9
 680:	07 c0       	rjmp	.+14     	; 0x690 <main+0xee>
 682:	b1 10       	cpse	r11, r1
 684:	05 c0       	rjmp	.+10     	; 0x690 <main+0xee>
		{
			count2++;
 686:	0f 5f       	subi	r16, 0xFF	; 255
 688:	1f 4f       	sbci	r17, 0xFF	; 255
			state2 = 1;
 68a:	bb 24       	eor	r11, r11
 68c:	b3 94       	inc	r11
 68e:	02 c0       	rjmp	.+4      	; 0x694 <main+0xf2>
			
			} else if (!(PIND & (1<<ENCODER_A_2)) && state2){
 690:	4a 9b       	sbis	0x09, 2	; 9
 692:	ba 2c       	mov	r11, r10
			state2 = 0;
		}
		
		if ((PIND & (1<<WHEEL_PIN)) && !stateWheel)
 694:	49 9b       	sbis	0x09, 1	; 9
 696:	22 c0       	rjmp	.+68     	; 0x6dc <main+0x13a>
 698:	f1 10       	cpse	r15, r1
 69a:	29 c0       	rjmp	.+82     	; 0x6ee <main+0x14c>
		{
			rgbled_turn_off(LED_RED);
 69c:	80 e2       	ldi	r24, 0x20	; 32
 69e:	e3 de       	rcall	.-570    	; 0x466 <rgbled_turn_off>
			countTime = timer_elapsed_ms(TIMER2);
 6a0:	82 e0       	ldi	r24, 0x02	; 2
 6a2:	0e df       	rcall	.-484    	; 0x4c0 <timer_elapsed_ms>
 6a4:	a0 e0       	ldi	r26, 0x00	; 0
 6a6:	b0 e0       	ldi	r27, 0x00	; 0
 6a8:	80 93 94 02 	sts	0x0294, r24	; 0x800294 <countTime>
 6ac:	90 93 95 02 	sts	0x0295, r25	; 0x800295 <countTime+0x1>
 6b0:	a0 93 96 02 	sts	0x0296, r26	; 0x800296 <countTime+0x2>
 6b4:	b0 93 97 02 	sts	0x0297, r27	; 0x800297 <countTime+0x3>
			timer_start(TIMER2);
 6b8:	82 e0       	ldi	r24, 0x02	; 2
 6ba:	f0 de       	rcall	.-544    	; 0x49c <timer_start>
			rpmWheel = WHEEL_COUNT_CONSTANT/countTime;
 6bc:	20 91 94 02 	lds	r18, 0x0294	; 0x800294 <countTime>
 6c0:	30 91 95 02 	lds	r19, 0x0295	; 0x800295 <countTime+0x1>
 6c4:	40 91 96 02 	lds	r20, 0x0296	; 0x800296 <countTime+0x2>
 6c8:	50 91 97 02 	lds	r21, 0x0297	; 0x800297 <countTime+0x3>
 6cc:	c3 01       	movw	r24, r6
 6ce:	b2 01       	movw	r22, r4
 6d0:	2e d1       	rcall	.+604    	; 0x92e <__udivmodsi4>
 6d2:	22 2e       	mov	r2, r18
 6d4:	33 2e       	mov	r3, r19
			stateWheel = 1;
 6d6:	ff 24       	eor	r15, r15
 6d8:	f3 94       	inc	r15
 6da:	90 cf       	rjmp	.-224    	; 0x5fc <main+0x5a>
		}
		else if (!(PIND & (1<<WHEEL_PIN)) && stateWheel)
 6dc:	49 99       	sbic	0x09, 1	; 9
 6de:	8e cf       	rjmp	.-228    	; 0x5fc <main+0x5a>
 6e0:	ff 20       	and	r15, r15
 6e2:	09 f4       	brne	.+2      	; 0x6e6 <main+0x144>
 6e4:	8b cf       	rjmp	.-234    	; 0x5fc <main+0x5a>
		{
			rgbled_turn_on(LED_RED);
 6e6:	80 e2       	ldi	r24, 0x20	; 32
 6e8:	c8 de       	rcall	.-624    	; 0x47a <rgbled_turn_on>
			stateWheel = 0;	
 6ea:	fa 2c       	mov	r15, r10
 6ec:	87 cf       	rjmp	.-242    	; 0x5fc <main+0x5a>
			countTime = timer_elapsed_ms(TIMER2);
			timer_start(TIMER2);
			rpmWheel = WHEEL_COUNT_CONSTANT/countTime;
			stateWheel = 1;
		}
		else if (!(PIND & (1<<WHEEL_PIN)) && stateWheel)
 6ee:	49 9b       	sbis	0x09, 1	; 9
 6f0:	fa cf       	rjmp	.-12     	; 0x6e6 <main+0x144>
 6f2:	84 cf       	rjmp	.-248    	; 0x5fc <main+0x5a>

000006f4 <__fixunssfsi>:
 6f4:	70 d0       	rcall	.+224    	; 0x7d6 <__fp_splitA>
 6f6:	88 f0       	brcs	.+34     	; 0x71a <__fixunssfsi+0x26>
 6f8:	9f 57       	subi	r25, 0x7F	; 127
 6fa:	90 f0       	brcs	.+36     	; 0x720 <__fixunssfsi+0x2c>
 6fc:	b9 2f       	mov	r27, r25
 6fe:	99 27       	eor	r25, r25
 700:	b7 51       	subi	r27, 0x17	; 23
 702:	a0 f0       	brcs	.+40     	; 0x72c <__fixunssfsi+0x38>
 704:	d1 f0       	breq	.+52     	; 0x73a <__fixunssfsi+0x46>
 706:	66 0f       	add	r22, r22
 708:	77 1f       	adc	r23, r23
 70a:	88 1f       	adc	r24, r24
 70c:	99 1f       	adc	r25, r25
 70e:	1a f0       	brmi	.+6      	; 0x716 <__fixunssfsi+0x22>
 710:	ba 95       	dec	r27
 712:	c9 f7       	brne	.-14     	; 0x706 <__fixunssfsi+0x12>
 714:	12 c0       	rjmp	.+36     	; 0x73a <__fixunssfsi+0x46>
 716:	b1 30       	cpi	r27, 0x01	; 1
 718:	81 f0       	breq	.+32     	; 0x73a <__fixunssfsi+0x46>
 71a:	77 d0       	rcall	.+238    	; 0x80a <__fp_zero>
 71c:	b1 e0       	ldi	r27, 0x01	; 1
 71e:	08 95       	ret
 720:	74 c0       	rjmp	.+232    	; 0x80a <__fp_zero>
 722:	67 2f       	mov	r22, r23
 724:	78 2f       	mov	r23, r24
 726:	88 27       	eor	r24, r24
 728:	b8 5f       	subi	r27, 0xF8	; 248
 72a:	39 f0       	breq	.+14     	; 0x73a <__fixunssfsi+0x46>
 72c:	b9 3f       	cpi	r27, 0xF9	; 249
 72e:	cc f3       	brlt	.-14     	; 0x722 <__fixunssfsi+0x2e>
 730:	86 95       	lsr	r24
 732:	77 95       	ror	r23
 734:	67 95       	ror	r22
 736:	b3 95       	inc	r27
 738:	d9 f7       	brne	.-10     	; 0x730 <__fixunssfsi+0x3c>
 73a:	3e f4       	brtc	.+14     	; 0x74a <__fixunssfsi+0x56>
 73c:	90 95       	com	r25
 73e:	80 95       	com	r24
 740:	70 95       	com	r23
 742:	61 95       	neg	r22
 744:	7f 4f       	sbci	r23, 0xFF	; 255
 746:	8f 4f       	sbci	r24, 0xFF	; 255
 748:	9f 4f       	sbci	r25, 0xFF	; 255
 74a:	08 95       	ret

0000074c <__floatunsisf>:
 74c:	e8 94       	clt
 74e:	09 c0       	rjmp	.+18     	; 0x762 <__floatsisf+0x12>

00000750 <__floatsisf>:
 750:	97 fb       	bst	r25, 7
 752:	3e f4       	brtc	.+14     	; 0x762 <__floatsisf+0x12>
 754:	90 95       	com	r25
 756:	80 95       	com	r24
 758:	70 95       	com	r23
 75a:	61 95       	neg	r22
 75c:	7f 4f       	sbci	r23, 0xFF	; 255
 75e:	8f 4f       	sbci	r24, 0xFF	; 255
 760:	9f 4f       	sbci	r25, 0xFF	; 255
 762:	99 23       	and	r25, r25
 764:	a9 f0       	breq	.+42     	; 0x790 <__floatsisf+0x40>
 766:	f9 2f       	mov	r31, r25
 768:	96 e9       	ldi	r25, 0x96	; 150
 76a:	bb 27       	eor	r27, r27
 76c:	93 95       	inc	r25
 76e:	f6 95       	lsr	r31
 770:	87 95       	ror	r24
 772:	77 95       	ror	r23
 774:	67 95       	ror	r22
 776:	b7 95       	ror	r27
 778:	f1 11       	cpse	r31, r1
 77a:	f8 cf       	rjmp	.-16     	; 0x76c <__floatsisf+0x1c>
 77c:	fa f4       	brpl	.+62     	; 0x7bc <__floatsisf+0x6c>
 77e:	bb 0f       	add	r27, r27
 780:	11 f4       	brne	.+4      	; 0x786 <__floatsisf+0x36>
 782:	60 ff       	sbrs	r22, 0
 784:	1b c0       	rjmp	.+54     	; 0x7bc <__floatsisf+0x6c>
 786:	6f 5f       	subi	r22, 0xFF	; 255
 788:	7f 4f       	sbci	r23, 0xFF	; 255
 78a:	8f 4f       	sbci	r24, 0xFF	; 255
 78c:	9f 4f       	sbci	r25, 0xFF	; 255
 78e:	16 c0       	rjmp	.+44     	; 0x7bc <__floatsisf+0x6c>
 790:	88 23       	and	r24, r24
 792:	11 f0       	breq	.+4      	; 0x798 <__floatsisf+0x48>
 794:	96 e9       	ldi	r25, 0x96	; 150
 796:	11 c0       	rjmp	.+34     	; 0x7ba <__floatsisf+0x6a>
 798:	77 23       	and	r23, r23
 79a:	21 f0       	breq	.+8      	; 0x7a4 <__floatsisf+0x54>
 79c:	9e e8       	ldi	r25, 0x8E	; 142
 79e:	87 2f       	mov	r24, r23
 7a0:	76 2f       	mov	r23, r22
 7a2:	05 c0       	rjmp	.+10     	; 0x7ae <__floatsisf+0x5e>
 7a4:	66 23       	and	r22, r22
 7a6:	71 f0       	breq	.+28     	; 0x7c4 <__floatsisf+0x74>
 7a8:	96 e8       	ldi	r25, 0x86	; 134
 7aa:	86 2f       	mov	r24, r22
 7ac:	70 e0       	ldi	r23, 0x00	; 0
 7ae:	60 e0       	ldi	r22, 0x00	; 0
 7b0:	2a f0       	brmi	.+10     	; 0x7bc <__floatsisf+0x6c>
 7b2:	9a 95       	dec	r25
 7b4:	66 0f       	add	r22, r22
 7b6:	77 1f       	adc	r23, r23
 7b8:	88 1f       	adc	r24, r24
 7ba:	da f7       	brpl	.-10     	; 0x7b2 <__floatsisf+0x62>
 7bc:	88 0f       	add	r24, r24
 7be:	96 95       	lsr	r25
 7c0:	87 95       	ror	r24
 7c2:	97 f9       	bld	r25, 7
 7c4:	08 95       	ret

000007c6 <__fp_split3>:
 7c6:	57 fd       	sbrc	r21, 7
 7c8:	90 58       	subi	r25, 0x80	; 128
 7ca:	44 0f       	add	r20, r20
 7cc:	55 1f       	adc	r21, r21
 7ce:	59 f0       	breq	.+22     	; 0x7e6 <__fp_splitA+0x10>
 7d0:	5f 3f       	cpi	r21, 0xFF	; 255
 7d2:	71 f0       	breq	.+28     	; 0x7f0 <__fp_splitA+0x1a>
 7d4:	47 95       	ror	r20

000007d6 <__fp_splitA>:
 7d6:	88 0f       	add	r24, r24
 7d8:	97 fb       	bst	r25, 7
 7da:	99 1f       	adc	r25, r25
 7dc:	61 f0       	breq	.+24     	; 0x7f6 <__fp_splitA+0x20>
 7de:	9f 3f       	cpi	r25, 0xFF	; 255
 7e0:	79 f0       	breq	.+30     	; 0x800 <__fp_splitA+0x2a>
 7e2:	87 95       	ror	r24
 7e4:	08 95       	ret
 7e6:	12 16       	cp	r1, r18
 7e8:	13 06       	cpc	r1, r19
 7ea:	14 06       	cpc	r1, r20
 7ec:	55 1f       	adc	r21, r21
 7ee:	f2 cf       	rjmp	.-28     	; 0x7d4 <__fp_split3+0xe>
 7f0:	46 95       	lsr	r20
 7f2:	f1 df       	rcall	.-30     	; 0x7d6 <__fp_splitA>
 7f4:	08 c0       	rjmp	.+16     	; 0x806 <__fp_splitA+0x30>
 7f6:	16 16       	cp	r1, r22
 7f8:	17 06       	cpc	r1, r23
 7fa:	18 06       	cpc	r1, r24
 7fc:	99 1f       	adc	r25, r25
 7fe:	f1 cf       	rjmp	.-30     	; 0x7e2 <__fp_splitA+0xc>
 800:	86 95       	lsr	r24
 802:	71 05       	cpc	r23, r1
 804:	61 05       	cpc	r22, r1
 806:	08 94       	sec
 808:	08 95       	ret

0000080a <__fp_zero>:
 80a:	e8 94       	clt

0000080c <__fp_szero>:
 80c:	bb 27       	eor	r27, r27
 80e:	66 27       	eor	r22, r22
 810:	77 27       	eor	r23, r23
 812:	cb 01       	movw	r24, r22
 814:	97 f9       	bld	r25, 7
 816:	08 95       	ret

00000818 <__mulsf3>:
 818:	0b d0       	rcall	.+22     	; 0x830 <__mulsf3x>
 81a:	78 c0       	rjmp	.+240    	; 0x90c <__fp_round>
 81c:	69 d0       	rcall	.+210    	; 0x8f0 <__fp_pscA>
 81e:	28 f0       	brcs	.+10     	; 0x82a <__mulsf3+0x12>
 820:	6e d0       	rcall	.+220    	; 0x8fe <__fp_pscB>
 822:	18 f0       	brcs	.+6      	; 0x82a <__mulsf3+0x12>
 824:	95 23       	and	r25, r21
 826:	09 f0       	breq	.+2      	; 0x82a <__mulsf3+0x12>
 828:	5a c0       	rjmp	.+180    	; 0x8de <__fp_inf>
 82a:	5f c0       	rjmp	.+190    	; 0x8ea <__fp_nan>
 82c:	11 24       	eor	r1, r1
 82e:	ee cf       	rjmp	.-36     	; 0x80c <__fp_szero>

00000830 <__mulsf3x>:
 830:	ca df       	rcall	.-108    	; 0x7c6 <__fp_split3>
 832:	a0 f3       	brcs	.-24     	; 0x81c <__mulsf3+0x4>

00000834 <__mulsf3_pse>:
 834:	95 9f       	mul	r25, r21
 836:	d1 f3       	breq	.-12     	; 0x82c <__mulsf3+0x14>
 838:	95 0f       	add	r25, r21
 83a:	50 e0       	ldi	r21, 0x00	; 0
 83c:	55 1f       	adc	r21, r21
 83e:	62 9f       	mul	r22, r18
 840:	f0 01       	movw	r30, r0
 842:	72 9f       	mul	r23, r18
 844:	bb 27       	eor	r27, r27
 846:	f0 0d       	add	r31, r0
 848:	b1 1d       	adc	r27, r1
 84a:	63 9f       	mul	r22, r19
 84c:	aa 27       	eor	r26, r26
 84e:	f0 0d       	add	r31, r0
 850:	b1 1d       	adc	r27, r1
 852:	aa 1f       	adc	r26, r26
 854:	64 9f       	mul	r22, r20
 856:	66 27       	eor	r22, r22
 858:	b0 0d       	add	r27, r0
 85a:	a1 1d       	adc	r26, r1
 85c:	66 1f       	adc	r22, r22
 85e:	82 9f       	mul	r24, r18
 860:	22 27       	eor	r18, r18
 862:	b0 0d       	add	r27, r0
 864:	a1 1d       	adc	r26, r1
 866:	62 1f       	adc	r22, r18
 868:	73 9f       	mul	r23, r19
 86a:	b0 0d       	add	r27, r0
 86c:	a1 1d       	adc	r26, r1
 86e:	62 1f       	adc	r22, r18
 870:	83 9f       	mul	r24, r19
 872:	a0 0d       	add	r26, r0
 874:	61 1d       	adc	r22, r1
 876:	22 1f       	adc	r18, r18
 878:	74 9f       	mul	r23, r20
 87a:	33 27       	eor	r19, r19
 87c:	a0 0d       	add	r26, r0
 87e:	61 1d       	adc	r22, r1
 880:	23 1f       	adc	r18, r19
 882:	84 9f       	mul	r24, r20
 884:	60 0d       	add	r22, r0
 886:	21 1d       	adc	r18, r1
 888:	82 2f       	mov	r24, r18
 88a:	76 2f       	mov	r23, r22
 88c:	6a 2f       	mov	r22, r26
 88e:	11 24       	eor	r1, r1
 890:	9f 57       	subi	r25, 0x7F	; 127
 892:	50 40       	sbci	r21, 0x00	; 0
 894:	8a f0       	brmi	.+34     	; 0x8b8 <__mulsf3_pse+0x84>
 896:	e1 f0       	breq	.+56     	; 0x8d0 <__mulsf3_pse+0x9c>
 898:	88 23       	and	r24, r24
 89a:	4a f0       	brmi	.+18     	; 0x8ae <__mulsf3_pse+0x7a>
 89c:	ee 0f       	add	r30, r30
 89e:	ff 1f       	adc	r31, r31
 8a0:	bb 1f       	adc	r27, r27
 8a2:	66 1f       	adc	r22, r22
 8a4:	77 1f       	adc	r23, r23
 8a6:	88 1f       	adc	r24, r24
 8a8:	91 50       	subi	r25, 0x01	; 1
 8aa:	50 40       	sbci	r21, 0x00	; 0
 8ac:	a9 f7       	brne	.-22     	; 0x898 <__mulsf3_pse+0x64>
 8ae:	9e 3f       	cpi	r25, 0xFE	; 254
 8b0:	51 05       	cpc	r21, r1
 8b2:	70 f0       	brcs	.+28     	; 0x8d0 <__mulsf3_pse+0x9c>
 8b4:	14 c0       	rjmp	.+40     	; 0x8de <__fp_inf>
 8b6:	aa cf       	rjmp	.-172    	; 0x80c <__fp_szero>
 8b8:	5f 3f       	cpi	r21, 0xFF	; 255
 8ba:	ec f3       	brlt	.-6      	; 0x8b6 <__mulsf3_pse+0x82>
 8bc:	98 3e       	cpi	r25, 0xE8	; 232
 8be:	dc f3       	brlt	.-10     	; 0x8b6 <__mulsf3_pse+0x82>
 8c0:	86 95       	lsr	r24
 8c2:	77 95       	ror	r23
 8c4:	67 95       	ror	r22
 8c6:	b7 95       	ror	r27
 8c8:	f7 95       	ror	r31
 8ca:	e7 95       	ror	r30
 8cc:	9f 5f       	subi	r25, 0xFF	; 255
 8ce:	c1 f7       	brne	.-16     	; 0x8c0 <__mulsf3_pse+0x8c>
 8d0:	fe 2b       	or	r31, r30
 8d2:	88 0f       	add	r24, r24
 8d4:	91 1d       	adc	r25, r1
 8d6:	96 95       	lsr	r25
 8d8:	87 95       	ror	r24
 8da:	97 f9       	bld	r25, 7
 8dc:	08 95       	ret

000008de <__fp_inf>:
 8de:	97 f9       	bld	r25, 7
 8e0:	9f 67       	ori	r25, 0x7F	; 127
 8e2:	80 e8       	ldi	r24, 0x80	; 128
 8e4:	70 e0       	ldi	r23, 0x00	; 0
 8e6:	60 e0       	ldi	r22, 0x00	; 0
 8e8:	08 95       	ret

000008ea <__fp_nan>:
 8ea:	9f ef       	ldi	r25, 0xFF	; 255
 8ec:	80 ec       	ldi	r24, 0xC0	; 192
 8ee:	08 95       	ret

000008f0 <__fp_pscA>:
 8f0:	00 24       	eor	r0, r0
 8f2:	0a 94       	dec	r0
 8f4:	16 16       	cp	r1, r22
 8f6:	17 06       	cpc	r1, r23
 8f8:	18 06       	cpc	r1, r24
 8fa:	09 06       	cpc	r0, r25
 8fc:	08 95       	ret

000008fe <__fp_pscB>:
 8fe:	00 24       	eor	r0, r0
 900:	0a 94       	dec	r0
 902:	12 16       	cp	r1, r18
 904:	13 06       	cpc	r1, r19
 906:	14 06       	cpc	r1, r20
 908:	05 06       	cpc	r0, r21
 90a:	08 95       	ret

0000090c <__fp_round>:
 90c:	09 2e       	mov	r0, r25
 90e:	03 94       	inc	r0
 910:	00 0c       	add	r0, r0
 912:	11 f4       	brne	.+4      	; 0x918 <__fp_round+0xc>
 914:	88 23       	and	r24, r24
 916:	52 f0       	brmi	.+20     	; 0x92c <__fp_round+0x20>
 918:	bb 0f       	add	r27, r27
 91a:	40 f4       	brcc	.+16     	; 0x92c <__fp_round+0x20>
 91c:	bf 2b       	or	r27, r31
 91e:	11 f4       	brne	.+4      	; 0x924 <__fp_round+0x18>
 920:	60 ff       	sbrs	r22, 0
 922:	04 c0       	rjmp	.+8      	; 0x92c <__fp_round+0x20>
 924:	6f 5f       	subi	r22, 0xFF	; 255
 926:	7f 4f       	sbci	r23, 0xFF	; 255
 928:	8f 4f       	sbci	r24, 0xFF	; 255
 92a:	9f 4f       	sbci	r25, 0xFF	; 255
 92c:	08 95       	ret

0000092e <__udivmodsi4>:
 92e:	a1 e2       	ldi	r26, 0x21	; 33
 930:	1a 2e       	mov	r1, r26
 932:	aa 1b       	sub	r26, r26
 934:	bb 1b       	sub	r27, r27
 936:	fd 01       	movw	r30, r26
 938:	0d c0       	rjmp	.+26     	; 0x954 <__udivmodsi4_ep>

0000093a <__udivmodsi4_loop>:
 93a:	aa 1f       	adc	r26, r26
 93c:	bb 1f       	adc	r27, r27
 93e:	ee 1f       	adc	r30, r30
 940:	ff 1f       	adc	r31, r31
 942:	a2 17       	cp	r26, r18
 944:	b3 07       	cpc	r27, r19
 946:	e4 07       	cpc	r30, r20
 948:	f5 07       	cpc	r31, r21
 94a:	20 f0       	brcs	.+8      	; 0x954 <__udivmodsi4_ep>
 94c:	a2 1b       	sub	r26, r18
 94e:	b3 0b       	sbc	r27, r19
 950:	e4 0b       	sbc	r30, r20
 952:	f5 0b       	sbc	r31, r21

00000954 <__udivmodsi4_ep>:
 954:	66 1f       	adc	r22, r22
 956:	77 1f       	adc	r23, r23
 958:	88 1f       	adc	r24, r24
 95a:	99 1f       	adc	r25, r25
 95c:	1a 94       	dec	r1
 95e:	69 f7       	brne	.-38     	; 0x93a <__udivmodsi4_loop>
 960:	60 95       	com	r22
 962:	70 95       	com	r23
 964:	80 95       	com	r24
 966:	90 95       	com	r25
 968:	9b 01       	movw	r18, r22
 96a:	ac 01       	movw	r20, r24
 96c:	bd 01       	movw	r22, r26
 96e:	cf 01       	movw	r24, r30
 970:	08 95       	ret

00000972 <fdevopen>:
 972:	0f 93       	push	r16
 974:	1f 93       	push	r17
 976:	cf 93       	push	r28
 978:	df 93       	push	r29
 97a:	00 97       	sbiw	r24, 0x00	; 0
 97c:	31 f4       	brne	.+12     	; 0x98a <fdevopen+0x18>
 97e:	61 15       	cp	r22, r1
 980:	71 05       	cpc	r23, r1
 982:	19 f4       	brne	.+6      	; 0x98a <fdevopen+0x18>
 984:	80 e0       	ldi	r24, 0x00	; 0
 986:	90 e0       	ldi	r25, 0x00	; 0
 988:	39 c0       	rjmp	.+114    	; 0x9fc <fdevopen+0x8a>
 98a:	8b 01       	movw	r16, r22
 98c:	ec 01       	movw	r28, r24
 98e:	6e e0       	ldi	r22, 0x0E	; 14
 990:	70 e0       	ldi	r23, 0x00	; 0
 992:	81 e0       	ldi	r24, 0x01	; 1
 994:	90 e0       	ldi	r25, 0x00	; 0
 996:	37 d0       	rcall	.+110    	; 0xa06 <calloc>
 998:	fc 01       	movw	r30, r24
 99a:	89 2b       	or	r24, r25
 99c:	99 f3       	breq	.-26     	; 0x984 <fdevopen+0x12>
 99e:	80 e8       	ldi	r24, 0x80	; 128
 9a0:	83 83       	std	Z+3, r24	; 0x03
 9a2:	01 15       	cp	r16, r1
 9a4:	11 05       	cpc	r17, r1
 9a6:	71 f0       	breq	.+28     	; 0x9c4 <fdevopen+0x52>
 9a8:	13 87       	std	Z+11, r17	; 0x0b
 9aa:	02 87       	std	Z+10, r16	; 0x0a
 9ac:	81 e8       	ldi	r24, 0x81	; 129
 9ae:	83 83       	std	Z+3, r24	; 0x03
 9b0:	80 91 a3 02 	lds	r24, 0x02A3	; 0x8002a3 <__iob>
 9b4:	90 91 a4 02 	lds	r25, 0x02A4	; 0x8002a4 <__iob+0x1>
 9b8:	89 2b       	or	r24, r25
 9ba:	21 f4       	brne	.+8      	; 0x9c4 <fdevopen+0x52>
 9bc:	f0 93 a4 02 	sts	0x02A4, r31	; 0x8002a4 <__iob+0x1>
 9c0:	e0 93 a3 02 	sts	0x02A3, r30	; 0x8002a3 <__iob>
 9c4:	20 97       	sbiw	r28, 0x00	; 0
 9c6:	c9 f0       	breq	.+50     	; 0x9fa <fdevopen+0x88>
 9c8:	d1 87       	std	Z+9, r29	; 0x09
 9ca:	c0 87       	std	Z+8, r28	; 0x08
 9cc:	83 81       	ldd	r24, Z+3	; 0x03
 9ce:	82 60       	ori	r24, 0x02	; 2
 9d0:	83 83       	std	Z+3, r24	; 0x03
 9d2:	80 91 a5 02 	lds	r24, 0x02A5	; 0x8002a5 <__iob+0x2>
 9d6:	90 91 a6 02 	lds	r25, 0x02A6	; 0x8002a6 <__iob+0x3>
 9da:	89 2b       	or	r24, r25
 9dc:	71 f4       	brne	.+28     	; 0x9fa <fdevopen+0x88>
 9de:	f0 93 a6 02 	sts	0x02A6, r31	; 0x8002a6 <__iob+0x3>
 9e2:	e0 93 a5 02 	sts	0x02A5, r30	; 0x8002a5 <__iob+0x2>
 9e6:	80 91 a7 02 	lds	r24, 0x02A7	; 0x8002a7 <__iob+0x4>
 9ea:	90 91 a8 02 	lds	r25, 0x02A8	; 0x8002a8 <__iob+0x5>
 9ee:	89 2b       	or	r24, r25
 9f0:	21 f4       	brne	.+8      	; 0x9fa <fdevopen+0x88>
 9f2:	f0 93 a8 02 	sts	0x02A8, r31	; 0x8002a8 <__iob+0x5>
 9f6:	e0 93 a7 02 	sts	0x02A7, r30	; 0x8002a7 <__iob+0x4>
 9fa:	cf 01       	movw	r24, r30
 9fc:	df 91       	pop	r29
 9fe:	cf 91       	pop	r28
 a00:	1f 91       	pop	r17
 a02:	0f 91       	pop	r16
 a04:	08 95       	ret

00000a06 <calloc>:
 a06:	0f 93       	push	r16
 a08:	1f 93       	push	r17
 a0a:	cf 93       	push	r28
 a0c:	df 93       	push	r29
 a0e:	86 9f       	mul	r24, r22
 a10:	80 01       	movw	r16, r0
 a12:	87 9f       	mul	r24, r23
 a14:	10 0d       	add	r17, r0
 a16:	96 9f       	mul	r25, r22
 a18:	10 0d       	add	r17, r0
 a1a:	11 24       	eor	r1, r1
 a1c:	c8 01       	movw	r24, r16
 a1e:	0d d0       	rcall	.+26     	; 0xa3a <malloc>
 a20:	ec 01       	movw	r28, r24
 a22:	00 97       	sbiw	r24, 0x00	; 0
 a24:	21 f0       	breq	.+8      	; 0xa2e <calloc+0x28>
 a26:	a8 01       	movw	r20, r16
 a28:	60 e0       	ldi	r22, 0x00	; 0
 a2a:	70 e0       	ldi	r23, 0x00	; 0
 a2c:	33 d1       	rcall	.+614    	; 0xc94 <memset>
 a2e:	ce 01       	movw	r24, r28
 a30:	df 91       	pop	r29
 a32:	cf 91       	pop	r28
 a34:	1f 91       	pop	r17
 a36:	0f 91       	pop	r16
 a38:	08 95       	ret

00000a3a <malloc>:
 a3a:	cf 93       	push	r28
 a3c:	df 93       	push	r29
 a3e:	82 30       	cpi	r24, 0x02	; 2
 a40:	91 05       	cpc	r25, r1
 a42:	10 f4       	brcc	.+4      	; 0xa48 <malloc+0xe>
 a44:	82 e0       	ldi	r24, 0x02	; 2
 a46:	90 e0       	ldi	r25, 0x00	; 0
 a48:	e0 91 ab 02 	lds	r30, 0x02AB	; 0x8002ab <__flp>
 a4c:	f0 91 ac 02 	lds	r31, 0x02AC	; 0x8002ac <__flp+0x1>
 a50:	20 e0       	ldi	r18, 0x00	; 0
 a52:	30 e0       	ldi	r19, 0x00	; 0
 a54:	c0 e0       	ldi	r28, 0x00	; 0
 a56:	d0 e0       	ldi	r29, 0x00	; 0
 a58:	30 97       	sbiw	r30, 0x00	; 0
 a5a:	11 f1       	breq	.+68     	; 0xaa0 <malloc+0x66>
 a5c:	40 81       	ld	r20, Z
 a5e:	51 81       	ldd	r21, Z+1	; 0x01
 a60:	48 17       	cp	r20, r24
 a62:	59 07       	cpc	r21, r25
 a64:	c0 f0       	brcs	.+48     	; 0xa96 <malloc+0x5c>
 a66:	48 17       	cp	r20, r24
 a68:	59 07       	cpc	r21, r25
 a6a:	61 f4       	brne	.+24     	; 0xa84 <malloc+0x4a>
 a6c:	82 81       	ldd	r24, Z+2	; 0x02
 a6e:	93 81       	ldd	r25, Z+3	; 0x03
 a70:	20 97       	sbiw	r28, 0x00	; 0
 a72:	19 f0       	breq	.+6      	; 0xa7a <malloc+0x40>
 a74:	9b 83       	std	Y+3, r25	; 0x03
 a76:	8a 83       	std	Y+2, r24	; 0x02
 a78:	2b c0       	rjmp	.+86     	; 0xad0 <malloc+0x96>
 a7a:	90 93 ac 02 	sts	0x02AC, r25	; 0x8002ac <__flp+0x1>
 a7e:	80 93 ab 02 	sts	0x02AB, r24	; 0x8002ab <__flp>
 a82:	26 c0       	rjmp	.+76     	; 0xad0 <malloc+0x96>
 a84:	21 15       	cp	r18, r1
 a86:	31 05       	cpc	r19, r1
 a88:	19 f0       	breq	.+6      	; 0xa90 <malloc+0x56>
 a8a:	42 17       	cp	r20, r18
 a8c:	53 07       	cpc	r21, r19
 a8e:	18 f4       	brcc	.+6      	; 0xa96 <malloc+0x5c>
 a90:	9a 01       	movw	r18, r20
 a92:	be 01       	movw	r22, r28
 a94:	df 01       	movw	r26, r30
 a96:	ef 01       	movw	r28, r30
 a98:	02 80       	ldd	r0, Z+2	; 0x02
 a9a:	f3 81       	ldd	r31, Z+3	; 0x03
 a9c:	e0 2d       	mov	r30, r0
 a9e:	dc cf       	rjmp	.-72     	; 0xa58 <malloc+0x1e>
 aa0:	21 15       	cp	r18, r1
 aa2:	31 05       	cpc	r19, r1
 aa4:	09 f1       	breq	.+66     	; 0xae8 <malloc+0xae>
 aa6:	28 1b       	sub	r18, r24
 aa8:	39 0b       	sbc	r19, r25
 aaa:	24 30       	cpi	r18, 0x04	; 4
 aac:	31 05       	cpc	r19, r1
 aae:	90 f4       	brcc	.+36     	; 0xad4 <malloc+0x9a>
 ab0:	12 96       	adiw	r26, 0x02	; 2
 ab2:	8d 91       	ld	r24, X+
 ab4:	9c 91       	ld	r25, X
 ab6:	13 97       	sbiw	r26, 0x03	; 3
 ab8:	61 15       	cp	r22, r1
 aba:	71 05       	cpc	r23, r1
 abc:	21 f0       	breq	.+8      	; 0xac6 <malloc+0x8c>
 abe:	fb 01       	movw	r30, r22
 ac0:	93 83       	std	Z+3, r25	; 0x03
 ac2:	82 83       	std	Z+2, r24	; 0x02
 ac4:	04 c0       	rjmp	.+8      	; 0xace <malloc+0x94>
 ac6:	90 93 ac 02 	sts	0x02AC, r25	; 0x8002ac <__flp+0x1>
 aca:	80 93 ab 02 	sts	0x02AB, r24	; 0x8002ab <__flp>
 ace:	fd 01       	movw	r30, r26
 ad0:	32 96       	adiw	r30, 0x02	; 2
 ad2:	44 c0       	rjmp	.+136    	; 0xb5c <malloc+0x122>
 ad4:	fd 01       	movw	r30, r26
 ad6:	e2 0f       	add	r30, r18
 ad8:	f3 1f       	adc	r31, r19
 ada:	81 93       	st	Z+, r24
 adc:	91 93       	st	Z+, r25
 ade:	22 50       	subi	r18, 0x02	; 2
 ae0:	31 09       	sbc	r19, r1
 ae2:	2d 93       	st	X+, r18
 ae4:	3c 93       	st	X, r19
 ae6:	3a c0       	rjmp	.+116    	; 0xb5c <malloc+0x122>
 ae8:	20 91 a9 02 	lds	r18, 0x02A9	; 0x8002a9 <__brkval>
 aec:	30 91 aa 02 	lds	r19, 0x02AA	; 0x8002aa <__brkval+0x1>
 af0:	23 2b       	or	r18, r19
 af2:	41 f4       	brne	.+16     	; 0xb04 <malloc+0xca>
 af4:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 af8:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 afc:	30 93 aa 02 	sts	0x02AA, r19	; 0x8002aa <__brkval+0x1>
 b00:	20 93 a9 02 	sts	0x02A9, r18	; 0x8002a9 <__brkval>
 b04:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 b08:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 b0c:	21 15       	cp	r18, r1
 b0e:	31 05       	cpc	r19, r1
 b10:	41 f4       	brne	.+16     	; 0xb22 <malloc+0xe8>
 b12:	2d b7       	in	r18, 0x3d	; 61
 b14:	3e b7       	in	r19, 0x3e	; 62
 b16:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 b1a:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 b1e:	24 1b       	sub	r18, r20
 b20:	35 0b       	sbc	r19, r21
 b22:	e0 91 a9 02 	lds	r30, 0x02A9	; 0x8002a9 <__brkval>
 b26:	f0 91 aa 02 	lds	r31, 0x02AA	; 0x8002aa <__brkval+0x1>
 b2a:	e2 17       	cp	r30, r18
 b2c:	f3 07       	cpc	r31, r19
 b2e:	a0 f4       	brcc	.+40     	; 0xb58 <malloc+0x11e>
 b30:	2e 1b       	sub	r18, r30
 b32:	3f 0b       	sbc	r19, r31
 b34:	28 17       	cp	r18, r24
 b36:	39 07       	cpc	r19, r25
 b38:	78 f0       	brcs	.+30     	; 0xb58 <malloc+0x11e>
 b3a:	ac 01       	movw	r20, r24
 b3c:	4e 5f       	subi	r20, 0xFE	; 254
 b3e:	5f 4f       	sbci	r21, 0xFF	; 255
 b40:	24 17       	cp	r18, r20
 b42:	35 07       	cpc	r19, r21
 b44:	48 f0       	brcs	.+18     	; 0xb58 <malloc+0x11e>
 b46:	4e 0f       	add	r20, r30
 b48:	5f 1f       	adc	r21, r31
 b4a:	50 93 aa 02 	sts	0x02AA, r21	; 0x8002aa <__brkval+0x1>
 b4e:	40 93 a9 02 	sts	0x02A9, r20	; 0x8002a9 <__brkval>
 b52:	81 93       	st	Z+, r24
 b54:	91 93       	st	Z+, r25
 b56:	02 c0       	rjmp	.+4      	; 0xb5c <malloc+0x122>
 b58:	e0 e0       	ldi	r30, 0x00	; 0
 b5a:	f0 e0       	ldi	r31, 0x00	; 0
 b5c:	cf 01       	movw	r24, r30
 b5e:	df 91       	pop	r29
 b60:	cf 91       	pop	r28
 b62:	08 95       	ret

00000b64 <free>:
 b64:	0f 93       	push	r16
 b66:	1f 93       	push	r17
 b68:	cf 93       	push	r28
 b6a:	df 93       	push	r29
 b6c:	00 97       	sbiw	r24, 0x00	; 0
 b6e:	09 f4       	brne	.+2      	; 0xb72 <free+0xe>
 b70:	8c c0       	rjmp	.+280    	; 0xc8a <free+0x126>
 b72:	fc 01       	movw	r30, r24
 b74:	32 97       	sbiw	r30, 0x02	; 2
 b76:	13 82       	std	Z+3, r1	; 0x03
 b78:	12 82       	std	Z+2, r1	; 0x02
 b7a:	00 91 ab 02 	lds	r16, 0x02AB	; 0x8002ab <__flp>
 b7e:	10 91 ac 02 	lds	r17, 0x02AC	; 0x8002ac <__flp+0x1>
 b82:	01 15       	cp	r16, r1
 b84:	11 05       	cpc	r17, r1
 b86:	81 f4       	brne	.+32     	; 0xba8 <free+0x44>
 b88:	20 81       	ld	r18, Z
 b8a:	31 81       	ldd	r19, Z+1	; 0x01
 b8c:	82 0f       	add	r24, r18
 b8e:	93 1f       	adc	r25, r19
 b90:	20 91 a9 02 	lds	r18, 0x02A9	; 0x8002a9 <__brkval>
 b94:	30 91 aa 02 	lds	r19, 0x02AA	; 0x8002aa <__brkval+0x1>
 b98:	28 17       	cp	r18, r24
 b9a:	39 07       	cpc	r19, r25
 b9c:	79 f5       	brne	.+94     	; 0xbfc <free+0x98>
 b9e:	f0 93 aa 02 	sts	0x02AA, r31	; 0x8002aa <__brkval+0x1>
 ba2:	e0 93 a9 02 	sts	0x02A9, r30	; 0x8002a9 <__brkval>
 ba6:	71 c0       	rjmp	.+226    	; 0xc8a <free+0x126>
 ba8:	d8 01       	movw	r26, r16
 baa:	40 e0       	ldi	r20, 0x00	; 0
 bac:	50 e0       	ldi	r21, 0x00	; 0
 bae:	ae 17       	cp	r26, r30
 bb0:	bf 07       	cpc	r27, r31
 bb2:	50 f4       	brcc	.+20     	; 0xbc8 <free+0x64>
 bb4:	12 96       	adiw	r26, 0x02	; 2
 bb6:	2d 91       	ld	r18, X+
 bb8:	3c 91       	ld	r19, X
 bba:	13 97       	sbiw	r26, 0x03	; 3
 bbc:	ad 01       	movw	r20, r26
 bbe:	21 15       	cp	r18, r1
 bc0:	31 05       	cpc	r19, r1
 bc2:	09 f1       	breq	.+66     	; 0xc06 <free+0xa2>
 bc4:	d9 01       	movw	r26, r18
 bc6:	f3 cf       	rjmp	.-26     	; 0xbae <free+0x4a>
 bc8:	9d 01       	movw	r18, r26
 bca:	da 01       	movw	r26, r20
 bcc:	33 83       	std	Z+3, r19	; 0x03
 bce:	22 83       	std	Z+2, r18	; 0x02
 bd0:	60 81       	ld	r22, Z
 bd2:	71 81       	ldd	r23, Z+1	; 0x01
 bd4:	86 0f       	add	r24, r22
 bd6:	97 1f       	adc	r25, r23
 bd8:	82 17       	cp	r24, r18
 bda:	93 07       	cpc	r25, r19
 bdc:	69 f4       	brne	.+26     	; 0xbf8 <free+0x94>
 bde:	ec 01       	movw	r28, r24
 be0:	28 81       	ld	r18, Y
 be2:	39 81       	ldd	r19, Y+1	; 0x01
 be4:	26 0f       	add	r18, r22
 be6:	37 1f       	adc	r19, r23
 be8:	2e 5f       	subi	r18, 0xFE	; 254
 bea:	3f 4f       	sbci	r19, 0xFF	; 255
 bec:	31 83       	std	Z+1, r19	; 0x01
 bee:	20 83       	st	Z, r18
 bf0:	8a 81       	ldd	r24, Y+2	; 0x02
 bf2:	9b 81       	ldd	r25, Y+3	; 0x03
 bf4:	93 83       	std	Z+3, r25	; 0x03
 bf6:	82 83       	std	Z+2, r24	; 0x02
 bf8:	45 2b       	or	r20, r21
 bfa:	29 f4       	brne	.+10     	; 0xc06 <free+0xa2>
 bfc:	f0 93 ac 02 	sts	0x02AC, r31	; 0x8002ac <__flp+0x1>
 c00:	e0 93 ab 02 	sts	0x02AB, r30	; 0x8002ab <__flp>
 c04:	42 c0       	rjmp	.+132    	; 0xc8a <free+0x126>
 c06:	13 96       	adiw	r26, 0x03	; 3
 c08:	fc 93       	st	X, r31
 c0a:	ee 93       	st	-X, r30
 c0c:	12 97       	sbiw	r26, 0x02	; 2
 c0e:	ed 01       	movw	r28, r26
 c10:	49 91       	ld	r20, Y+
 c12:	59 91       	ld	r21, Y+
 c14:	9e 01       	movw	r18, r28
 c16:	24 0f       	add	r18, r20
 c18:	35 1f       	adc	r19, r21
 c1a:	e2 17       	cp	r30, r18
 c1c:	f3 07       	cpc	r31, r19
 c1e:	71 f4       	brne	.+28     	; 0xc3c <free+0xd8>
 c20:	80 81       	ld	r24, Z
 c22:	91 81       	ldd	r25, Z+1	; 0x01
 c24:	84 0f       	add	r24, r20
 c26:	95 1f       	adc	r25, r21
 c28:	02 96       	adiw	r24, 0x02	; 2
 c2a:	11 96       	adiw	r26, 0x01	; 1
 c2c:	9c 93       	st	X, r25
 c2e:	8e 93       	st	-X, r24
 c30:	82 81       	ldd	r24, Z+2	; 0x02
 c32:	93 81       	ldd	r25, Z+3	; 0x03
 c34:	13 96       	adiw	r26, 0x03	; 3
 c36:	9c 93       	st	X, r25
 c38:	8e 93       	st	-X, r24
 c3a:	12 97       	sbiw	r26, 0x02	; 2
 c3c:	e0 e0       	ldi	r30, 0x00	; 0
 c3e:	f0 e0       	ldi	r31, 0x00	; 0
 c40:	d8 01       	movw	r26, r16
 c42:	12 96       	adiw	r26, 0x02	; 2
 c44:	8d 91       	ld	r24, X+
 c46:	9c 91       	ld	r25, X
 c48:	13 97       	sbiw	r26, 0x03	; 3
 c4a:	00 97       	sbiw	r24, 0x00	; 0
 c4c:	19 f0       	breq	.+6      	; 0xc54 <free+0xf0>
 c4e:	f8 01       	movw	r30, r16
 c50:	8c 01       	movw	r16, r24
 c52:	f6 cf       	rjmp	.-20     	; 0xc40 <free+0xdc>
 c54:	8d 91       	ld	r24, X+
 c56:	9c 91       	ld	r25, X
 c58:	98 01       	movw	r18, r16
 c5a:	2e 5f       	subi	r18, 0xFE	; 254
 c5c:	3f 4f       	sbci	r19, 0xFF	; 255
 c5e:	82 0f       	add	r24, r18
 c60:	93 1f       	adc	r25, r19
 c62:	20 91 a9 02 	lds	r18, 0x02A9	; 0x8002a9 <__brkval>
 c66:	30 91 aa 02 	lds	r19, 0x02AA	; 0x8002aa <__brkval+0x1>
 c6a:	28 17       	cp	r18, r24
 c6c:	39 07       	cpc	r19, r25
 c6e:	69 f4       	brne	.+26     	; 0xc8a <free+0x126>
 c70:	30 97       	sbiw	r30, 0x00	; 0
 c72:	29 f4       	brne	.+10     	; 0xc7e <free+0x11a>
 c74:	10 92 ac 02 	sts	0x02AC, r1	; 0x8002ac <__flp+0x1>
 c78:	10 92 ab 02 	sts	0x02AB, r1	; 0x8002ab <__flp>
 c7c:	02 c0       	rjmp	.+4      	; 0xc82 <free+0x11e>
 c7e:	13 82       	std	Z+3, r1	; 0x03
 c80:	12 82       	std	Z+2, r1	; 0x02
 c82:	10 93 aa 02 	sts	0x02AA, r17	; 0x8002aa <__brkval+0x1>
 c86:	00 93 a9 02 	sts	0x02A9, r16	; 0x8002a9 <__brkval>
 c8a:	df 91       	pop	r29
 c8c:	cf 91       	pop	r28
 c8e:	1f 91       	pop	r17
 c90:	0f 91       	pop	r16
 c92:	08 95       	ret

00000c94 <memset>:
 c94:	dc 01       	movw	r26, r24
 c96:	01 c0       	rjmp	.+2      	; 0xc9a <memset+0x6>
 c98:	6d 93       	st	X+, r22
 c9a:	41 50       	subi	r20, 0x01	; 1
 c9c:	50 40       	sbci	r21, 0x00	; 0
 c9e:	e0 f7       	brcc	.-8      	; 0xc98 <memset+0x4>
 ca0:	08 95       	ret

00000ca2 <_exit>:
 ca2:	f8 94       	cli

00000ca4 <__stop_program>:
 ca4:	ff cf       	rjmp	.-2      	; 0xca4 <__stop_program>
