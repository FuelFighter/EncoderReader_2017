
EncoderReader2103.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000c0a  00000c9e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c0a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001be  00800106  00800106  00000ca4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ca4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000cd4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  00000d10  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000cb9  00000000  00000000  00000df8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000660  00000000  00000000  00001ab1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009cb  00000000  00000000  00002111  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000228  00000000  00000000  00002adc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004ba  00000000  00000000  00002d04  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000874  00000000  00000000  000031be  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  00003a32  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
   2:	00 00       	nop
   4:	62 c0       	rjmp	.+196    	; 0xca <__bad_interrupt>
   6:	00 00       	nop
   8:	60 c0       	rjmp	.+192    	; 0xca <__bad_interrupt>
   a:	00 00       	nop
   c:	5e c0       	rjmp	.+188    	; 0xca <__bad_interrupt>
   e:	00 00       	nop
  10:	5c c0       	rjmp	.+184    	; 0xca <__bad_interrupt>
  12:	00 00       	nop
  14:	5a c0       	rjmp	.+180    	; 0xca <__bad_interrupt>
  16:	00 00       	nop
  18:	58 c0       	rjmp	.+176    	; 0xca <__bad_interrupt>
  1a:	00 00       	nop
  1c:	56 c0       	rjmp	.+172    	; 0xca <__bad_interrupt>
  1e:	00 00       	nop
  20:	54 c0       	rjmp	.+168    	; 0xca <__bad_interrupt>
  22:	00 00       	nop
  24:	52 c0       	rjmp	.+164    	; 0xca <__bad_interrupt>
  26:	00 00       	nop
  28:	50 c0       	rjmp	.+160    	; 0xca <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4e c0       	rjmp	.+156    	; 0xca <__bad_interrupt>
  2e:	00 00       	nop
  30:	4c c0       	rjmp	.+152    	; 0xca <__bad_interrupt>
  32:	00 00       	nop
  34:	4a c0       	rjmp	.+148    	; 0xca <__bad_interrupt>
  36:	00 00       	nop
  38:	48 c0       	rjmp	.+144    	; 0xca <__bad_interrupt>
  3a:	00 00       	nop
  3c:	46 c0       	rjmp	.+140    	; 0xca <__bad_interrupt>
  3e:	00 00       	nop
  40:	44 c0       	rjmp	.+136    	; 0xca <__bad_interrupt>
  42:	00 00       	nop
  44:	29 c2       	rjmp	.+1106   	; 0x498 <__vector_17>
  46:	00 00       	nop
  48:	41 c0       	rjmp	.+130    	; 0xcc <__vector_18>
  4a:	00 00       	nop
  4c:	3e c0       	rjmp	.+124    	; 0xca <__bad_interrupt>
  4e:	00 00       	nop
  50:	3c c0       	rjmp	.+120    	; 0xca <__bad_interrupt>
  52:	00 00       	nop
  54:	3a c0       	rjmp	.+116    	; 0xca <__bad_interrupt>
  56:	00 00       	nop
  58:	38 c0       	rjmp	.+112    	; 0xca <__bad_interrupt>
  5a:	00 00       	nop
  5c:	36 c0       	rjmp	.+108    	; 0xca <__bad_interrupt>
  5e:	00 00       	nop
  60:	34 c0       	rjmp	.+104    	; 0xca <__bad_interrupt>
  62:	00 00       	nop
  64:	32 c0       	rjmp	.+100    	; 0xca <__bad_interrupt>
  66:	00 00       	nop
  68:	30 c0       	rjmp	.+96     	; 0xca <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2e c0       	rjmp	.+92     	; 0xca <__bad_interrupt>
  6e:	00 00       	nop
  70:	2c c0       	rjmp	.+88     	; 0xca <__bad_interrupt>
  72:	00 00       	nop
  74:	2a c0       	rjmp	.+84     	; 0xca <__bad_interrupt>
  76:	00 00       	nop
  78:	28 c0       	rjmp	.+80     	; 0xca <__bad_interrupt>
  7a:	00 00       	nop
  7c:	26 c0       	rjmp	.+76     	; 0xca <__bad_interrupt>
  7e:	00 00       	nop
  80:	24 c0       	rjmp	.+72     	; 0xca <__bad_interrupt>
  82:	00 00       	nop
  84:	22 c0       	rjmp	.+68     	; 0xca <__bad_interrupt>
  86:	00 00       	nop
  88:	20 c0       	rjmp	.+64     	; 0xca <__bad_interrupt>
  8a:	00 00       	nop
  8c:	1e c0       	rjmp	.+60     	; 0xca <__bad_interrupt>
  8e:	00 00       	nop
  90:	1c c0       	rjmp	.+56     	; 0xca <__bad_interrupt>
	...

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d8 e0       	ldi	r29, 0x08	; 8
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_clear_bss>:
  a0:	22 e0       	ldi	r18, 0x02	; 2
  a2:	a6 e0       	ldi	r26, 0x06	; 6
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	01 c0       	rjmp	.+2      	; 0xaa <.do_clear_bss_start>

000000a8 <.do_clear_bss_loop>:
  a8:	1d 92       	st	X+, r1

000000aa <.do_clear_bss_start>:
  aa:	a4 3c       	cpi	r26, 0xC4	; 196
  ac:	b2 07       	cpc	r27, r18
  ae:	e1 f7       	brne	.-8      	; 0xa8 <.do_clear_bss_loop>

000000b0 <__do_copy_data>:
  b0:	11 e0       	ldi	r17, 0x01	; 1
  b2:	a0 e0       	ldi	r26, 0x00	; 0
  b4:	b1 e0       	ldi	r27, 0x01	; 1
  b6:	ea e0       	ldi	r30, 0x0A	; 10
  b8:	fc e0       	ldi	r31, 0x0C	; 12
  ba:	02 c0       	rjmp	.+4      	; 0xc0 <__do_copy_data+0x10>
  bc:	05 90       	lpm	r0, Z+
  be:	0d 92       	st	X+, r0
  c0:	a6 30       	cpi	r26, 0x06	; 6
  c2:	b1 07       	cpc	r27, r17
  c4:	d9 f7       	brne	.-10     	; 0xbc <__do_copy_data+0xc>
  c6:	71 d2       	rcall	.+1250   	; 0x5aa <main>
  c8:	9e c5       	rjmp	.+2876   	; 0xc06 <_exit>

000000ca <__bad_interrupt>:
  ca:	9a cf       	rjmp	.-204    	; 0x0 <__vectors>

000000cc <__vector_18>:
	if (rx_on != rx_off) {
		rx_off++;
	}

	return true;
}
  cc:	1f 92       	push	r1
  ce:	0f 92       	push	r0
  d0:	0f b6       	in	r0, 0x3f	; 63
  d2:	0f 92       	push	r0
  d4:	11 24       	eor	r1, r1
  d6:	2f 93       	push	r18
  d8:	3f 93       	push	r19
  da:	4f 93       	push	r20
  dc:	5f 93       	push	r21
  de:	6f 93       	push	r22
  e0:	8f 93       	push	r24
  e2:	9f 93       	push	r25
  e4:	af 93       	push	r26
  e6:	bf 93       	push	r27
  e8:	ef 93       	push	r30
  ea:	ff 93       	push	r31
  ec:	cf 93       	push	r28
  ee:	df 93       	push	r29
  f0:	1f 92       	push	r1
  f2:	cd b7       	in	r28, 0x3d	; 61
  f4:	de b7       	in	r29, 0x3e	; 62
  f6:	80 91 e0 00 	lds	r24, 0x00E0
  fa:	80 ff       	sbrs	r24, 0
  fc:	47 c0       	rjmp	.+142    	; 0x18c <__vector_18+0xc0>
  fe:	90 91 de 00 	lds	r25, 0x00DE
 102:	90 ff       	sbrs	r25, 0
 104:	43 c0       	rjmp	.+134    	; 0x18c <__vector_18+0xc0>
 106:	10 92 ed 00 	sts	0x00ED, r1
 10a:	ee ee       	ldi	r30, 0xEE	; 238
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	80 81       	ld	r24, Z
 110:	89 83       	std	Y+1, r24	; 0x01
 112:	80 81       	ld	r24, Z
 114:	8f 7b       	andi	r24, 0xBF	; 191
 116:	80 83       	st	Z, r24
 118:	80 91 0b 01 	lds	r24, 0x010B
 11c:	90 91 0a 01 	lds	r25, 0x010A
 120:	98 17       	cp	r25, r24
 122:	89 f1       	breq	.+98     	; 0x186 <__vector_18+0xba>
 124:	8f 70       	andi	r24, 0x0F	; 15
 126:	2b e0       	ldi	r18, 0x0B	; 11
 128:	82 9f       	mul	r24, r18
 12a:	c0 01       	movw	r24, r0
 12c:	11 24       	eor	r1, r1
 12e:	fc 01       	movw	r30, r24
 130:	e4 54       	subi	r30, 0x44	; 68
 132:	fe 4f       	sbci	r31, 0xFE	; 254
 134:	20 81       	ld	r18, Z
 136:	20 93 f0 00 	sts	0x00F0, r18
 13a:	20 81       	ld	r18, Z
 13c:	20 93 f2 00 	sts	0x00F2, r18
 140:	21 81       	ldd	r18, Z+1	; 0x01
 142:	20 93 f3 00 	sts	0x00F3, r18
 146:	23 81       	ldd	r18, Z+3	; 0x03
 148:	aa ef       	ldi	r26, 0xFA	; 250
 14a:	b0 e0       	ldi	r27, 0x00	; 0
 14c:	2c 93       	st	X, r18
 14e:	24 81       	ldd	r18, Z+4	; 0x04
 150:	2c 93       	st	X, r18
 152:	25 81       	ldd	r18, Z+5	; 0x05
 154:	2c 93       	st	X, r18
 156:	26 81       	ldd	r18, Z+6	; 0x06
 158:	2c 93       	st	X, r18
 15a:	27 81       	ldd	r18, Z+7	; 0x07
 15c:	2c 93       	st	X, r18
 15e:	20 85       	ldd	r18, Z+8	; 0x08
 160:	2c 93       	st	X, r18
 162:	21 85       	ldd	r18, Z+9	; 0x09
 164:	2c 93       	st	X, r18
 166:	22 85       	ldd	r18, Z+10	; 0x0a
 168:	2c 93       	st	X, r18
 16a:	fc 01       	movw	r30, r24
 16c:	e2 54       	subi	r30, 0x42	; 66
 16e:	fe 4f       	sbci	r31, 0xFE	; 254
 170:	80 81       	ld	r24, Z
 172:	8f 70       	andi	r24, 0x0F	; 15
 174:	80 64       	ori	r24, 0x40	; 64
 176:	80 93 ef 00 	sts	0x00EF, r24
 17a:	80 91 0b 01 	lds	r24, 0x010B
 17e:	8f 5f       	subi	r24, 0xFF	; 255
 180:	80 93 0b 01 	sts	0x010B, r24
 184:	7d c0       	rjmp	.+250    	; 0x280 <__vector_18+0x1b4>
 186:	10 92 09 01 	sts	0x0109, r1
 18a:	7a c0       	rjmp	.+244    	; 0x280 <__vector_18+0x1b4>
 18c:	81 ff       	sbrs	r24, 1
 18e:	78 c0       	rjmp	.+240    	; 0x280 <__vector_18+0x1b4>
 190:	80 91 de 00 	lds	r24, 0x00DE
 194:	81 ff       	sbrs	r24, 1
 196:	74 c0       	rjmp	.+232    	; 0x280 <__vector_18+0x1b4>
 198:	80 e1       	ldi	r24, 0x10	; 16
 19a:	80 93 ed 00 	sts	0x00ED, r24
 19e:	80 91 07 01 	lds	r24, 0x0107
 1a2:	28 2f       	mov	r18, r24
 1a4:	30 e0       	ldi	r19, 0x00	; 0
 1a6:	90 91 08 01 	lds	r25, 0x0108
 1aa:	29 1b       	sub	r18, r25
 1ac:	31 09       	sbc	r19, r1
 1ae:	2f 77       	andi	r18, 0x7F	; 127
 1b0:	33 27       	eor	r19, r19
 1b2:	20 31       	cpi	r18, 0x10	; 16
 1b4:	31 05       	cpc	r19, r1
 1b6:	0c f0       	brlt	.+2      	; 0x1ba <__vector_18+0xee>
 1b8:	58 c0       	rjmp	.+176    	; 0x26a <__vector_18+0x19e>
 1ba:	e8 2f       	mov	r30, r24
 1bc:	ef 70       	andi	r30, 0x0F	; 15
 1be:	90 91 ef 00 	lds	r25, 0x00EF
 1c2:	2e 2f       	mov	r18, r30
 1c4:	30 e0       	ldi	r19, 0x00	; 0
 1c6:	4b e0       	ldi	r20, 0x0B	; 11
 1c8:	e4 9f       	mul	r30, r20
 1ca:	f0 01       	movw	r30, r0
 1cc:	11 24       	eor	r1, r1
 1ce:	e4 5f       	subi	r30, 0xF4	; 244
 1d0:	fe 4f       	sbci	r31, 0xFE	; 254
 1d2:	9f 70       	andi	r25, 0x0F	; 15
 1d4:	42 81       	ldd	r20, Z+2	; 0x02
 1d6:	40 7f       	andi	r20, 0xF0	; 240
 1d8:	94 2b       	or	r25, r20
 1da:	92 83       	std	Z+2, r25	; 0x02
 1dc:	90 91 f2 00 	lds	r25, 0x00F2
 1e0:	40 91 f0 00 	lds	r20, 0x00F0
 1e4:	47 70       	andi	r20, 0x07	; 7
 1e6:	90 7e       	andi	r25, 0xE0	; 224
 1e8:	94 2b       	or	r25, r20
 1ea:	90 83       	st	Z, r25
 1ec:	90 91 f3 00 	lds	r25, 0x00F3
 1f0:	91 83       	std	Z+1, r25	; 0x01
 1f2:	aa ef       	ldi	r26, 0xFA	; 250
 1f4:	b0 e0       	ldi	r27, 0x00	; 0
 1f6:	9c 91       	ld	r25, X
 1f8:	93 83       	std	Z+3, r25	; 0x03
 1fa:	9c 91       	ld	r25, X
 1fc:	94 83       	std	Z+4, r25	; 0x04
 1fe:	9c 91       	ld	r25, X
 200:	95 83       	std	Z+5, r25	; 0x05
 202:	9c 91       	ld	r25, X
 204:	96 83       	std	Z+6, r25	; 0x06
 206:	9c 91       	ld	r25, X
 208:	97 83       	std	Z+7, r25	; 0x07
 20a:	9c 91       	ld	r25, X
 20c:	90 87       	std	Z+8, r25	; 0x08
 20e:	9c 91       	ld	r25, X
 210:	91 87       	std	Z+9, r25	; 0x09
 212:	9c 91       	ld	r25, X
 214:	92 87       	std	Z+10, r25	; 0x0a
 216:	8f 5f       	subi	r24, 0xFF	; 255
 218:	80 93 07 01 	sts	0x0107, r24
 21c:	40 81       	ld	r20, Z
 21e:	42 95       	swap	r20
 220:	46 95       	lsr	r20
 222:	47 70       	andi	r20, 0x07	; 7
 224:	51 81       	ldd	r21, Z+1	; 0x01
 226:	65 2f       	mov	r22, r21
 228:	66 0f       	add	r22, r22
 22a:	66 0f       	add	r22, r22
 22c:	66 0f       	add	r22, r22
 22e:	86 2f       	mov	r24, r22
 230:	84 2b       	or	r24, r20
 232:	95 2f       	mov	r25, r21
 234:	92 95       	swap	r25
 236:	96 95       	lsr	r25
 238:	97 70       	andi	r25, 0x07	; 7
 23a:	89 2b       	or	r24, r25
 23c:	b1 f4       	brne	.+44     	; 0x26a <__vector_18+0x19e>
 23e:	8b e0       	ldi	r24, 0x0B	; 11
 240:	82 9f       	mul	r24, r18
 242:	f0 01       	movw	r30, r0
 244:	83 9f       	mul	r24, r19
 246:	f0 0d       	add	r31, r0
 248:	11 24       	eor	r1, r1
 24a:	e4 5f       	subi	r30, 0xF4	; 244
 24c:	fe 4f       	sbci	r31, 0xFE	; 254
 24e:	83 81       	ldd	r24, Z+3	; 0x03
 250:	83 30       	cpi	r24, 0x03	; 3
 252:	59 f4       	brne	.+22     	; 0x26a <__vector_18+0x19e>
 254:	98 e0       	ldi	r25, 0x08	; 8
 256:	88 e1       	ldi	r24, 0x18	; 24
 258:	0f b6       	in	r0, 0x3f	; 63
 25a:	f8 94       	cli
 25c:	a8 95       	wdr
 25e:	80 93 60 00 	sts	0x0060, r24
 262:	0f be       	out	0x3f, r0	; 63
 264:	90 93 60 00 	sts	0x0060, r25
 268:	ff cf       	rjmp	.-2      	; 0x268 <__vector_18+0x19c>
 26a:	ee ee       	ldi	r30, 0xEE	; 238
 26c:	f0 e0       	ldi	r31, 0x00	; 0
 26e:	80 81       	ld	r24, Z
 270:	89 83       	std	Y+1, r24	; 0x01
 272:	89 81       	ldd	r24, Y+1	; 0x01
 274:	80 81       	ld	r24, Z
 276:	8f 7d       	andi	r24, 0xDF	; 223
 278:	80 83       	st	Z, r24
 27a:	80 e8       	ldi	r24, 0x80	; 128
 27c:	80 93 ef 00 	sts	0x00EF, r24
 280:	0f 90       	pop	r0
 282:	df 91       	pop	r29
 284:	cf 91       	pop	r28
 286:	ff 91       	pop	r31
 288:	ef 91       	pop	r30
 28a:	bf 91       	pop	r27
 28c:	af 91       	pop	r26
 28e:	9f 91       	pop	r25
 290:	8f 91       	pop	r24
 292:	6f 91       	pop	r22
 294:	5f 91       	pop	r21
 296:	4f 91       	pop	r20
 298:	3f 91       	pop	r19
 29a:	2f 91       	pop	r18
 29c:	0f 90       	pop	r0
 29e:	0f be       	out	0x3f, r0	; 63
 2a0:	0f 90       	pop	r0
 2a2:	1f 90       	pop	r1
 2a4:	18 95       	reti

000002a6 <can_init>:
 2a6:	cf 93       	push	r28
 2a8:	df 93       	push	r29
 2aa:	e8 ed       	ldi	r30, 0xD8	; 216
 2ac:	f0 e0       	ldi	r31, 0x00	; 0
 2ae:	21 e0       	ldi	r18, 0x01	; 1
 2b0:	20 83       	st	Z, r18
 2b2:	2e ef       	ldi	r18, 0xFE	; 254
 2b4:	20 93 e2 00 	sts	0x00E2, r18
 2b8:	2c e0       	ldi	r18, 0x0C	; 12
 2ba:	20 93 e3 00 	sts	0x00E3, r18
 2be:	27 e3       	ldi	r18, 0x37	; 55
 2c0:	20 93 e4 00 	sts	0x00E4, r18
 2c4:	10 92 e7 00 	sts	0x00E7, r1
 2c8:	10 92 e6 00 	sts	0x00E6, r1
 2cc:	10 92 e9 00 	sts	0x00E9, r1
 2d0:	10 92 e8 00 	sts	0x00E8, r1
 2d4:	10 92 ec 00 	sts	0x00EC, r1
 2d8:	10 92 e5 00 	sts	0x00E5, r1
 2dc:	cd ee       	ldi	r28, 0xED	; 237
 2de:	d0 e0       	ldi	r29, 0x00	; 0
 2e0:	18 82       	st	Y, r1
 2e2:	ae ee       	ldi	r26, 0xEE	; 238
 2e4:	b0 e0       	ldi	r27, 0x00	; 0
 2e6:	1c 92       	st	X, r1
 2e8:	20 e1       	ldi	r18, 0x10	; 16
 2ea:	28 83       	st	Y, r18
 2ec:	1c 92       	st	X, r1
 2ee:	10 92 f4 00 	sts	0x00F4, r1
 2f2:	28 2f       	mov	r18, r24
 2f4:	22 95       	swap	r18
 2f6:	22 0f       	add	r18, r18
 2f8:	20 7e       	andi	r18, 0xE0	; 224
 2fa:	20 93 f6 00 	sts	0x00F6, r18
 2fe:	96 95       	lsr	r25
 300:	87 95       	ror	r24
 302:	96 95       	lsr	r25
 304:	87 95       	ror	r24
 306:	96 95       	lsr	r25
 308:	87 95       	ror	r24
 30a:	80 93 f7 00 	sts	0x00F7, r24
 30e:	10 92 f0 00 	sts	0x00F0, r1
 312:	86 2f       	mov	r24, r22
 314:	82 95       	swap	r24
 316:	88 0f       	add	r24, r24
 318:	80 7e       	andi	r24, 0xE0	; 224
 31a:	80 93 f2 00 	sts	0x00F2, r24
 31e:	76 95       	lsr	r23
 320:	67 95       	ror	r22
 322:	76 95       	lsr	r23
 324:	67 95       	ror	r22
 326:	76 95       	lsr	r23
 328:	67 95       	ror	r22
 32a:	60 93 f3 00 	sts	0x00F3, r22
 32e:	80 e8       	ldi	r24, 0x80	; 128
 330:	80 93 ef 00 	sts	0x00EF, r24
 334:	83 e0       	ldi	r24, 0x03	; 3
 336:	80 93 dc 00 	sts	0x00DC, r24
 33a:	80 93 de 00 	sts	0x00DE, r24
 33e:	80 eb       	ldi	r24, 0xB0	; 176
 340:	80 93 db 00 	sts	0x00DB, r24
 344:	82 e0       	ldi	r24, 0x02	; 2
 346:	80 83       	st	Z, r24
 348:	10 92 06 01 	sts	0x0106, r1
 34c:	df 91       	pop	r29
 34e:	cf 91       	pop	r28
 350:	08 95       	ret

00000352 <can_send_message>:

bool can_send_message(CanMessage_t* message) {
 352:	cf 93       	push	r28
 354:	df 93       	push	r29
 356:	fc 01       	movw	r30, r24
	bool result = false;

	CANGIE &= ~(1 << ENIT);
 358:	ab ed       	ldi	r26, 0xDB	; 219
 35a:	b0 e0       	ldi	r27, 0x00	; 0
 35c:	8c 91       	ld	r24, X
 35e:	8f 77       	andi	r24, 0x7F	; 127
 360:	8c 93       	st	X, r24

	if (!tx_busy) {
 362:	80 91 09 01 	lds	r24, 0x0109
 366:	81 11       	cpse	r24, r1
 368:	27 c0       	rjmp	.+78     	; 0x3b8 <can_send_message+0x66>
		// Switch to Mob 0 access
		CANPAGE = 0 << 4;
 36a:	10 92 ed 00 	sts	0x00ED, r1

		// Set ID
		CANIDT2 = message->id << 5;
 36e:	80 81       	ld	r24, Z
 370:	82 95       	swap	r24
 372:	88 0f       	add	r24, r24
 374:	80 7e       	andi	r24, 0xE0	; 224
 376:	80 93 f2 00 	sts	0x00F2, r24
		CANIDT1 = message->id >> 3;
 37a:	80 81       	ld	r24, Z
 37c:	91 81       	ldd	r25, Z+1	; 0x01
 37e:	96 95       	lsr	r25
 380:	87 95       	ror	r24
 382:	96 95       	lsr	r25
 384:	87 95       	ror	r24
 386:	96 95       	lsr	r25
 388:	87 95       	ror	r24
 38a:	80 93 f3 00 	sts	0x00F3, r24
 38e:	df 01       	movw	r26, r30
 390:	13 96       	adiw	r26, 0x03	; 3
 392:	9f 01       	movw	r18, r30
 394:	25 5f       	subi	r18, 0xF5	; 245
 396:	3f 4f       	sbci	r19, 0xFF	; 255

		// Program data registers - auto increment
		for (int i = 0; i < 8; i++) {
			CANMSG = message->data[i];
 398:	ca ef       	ldi	r28, 0xFA	; 250
 39a:	d0 e0       	ldi	r29, 0x00	; 0
 39c:	9d 91       	ld	r25, X+
 39e:	98 83       	st	Y, r25
		// Set ID
		CANIDT2 = message->id << 5;
		CANIDT1 = message->id >> 3;

		// Program data registers - auto increment
		for (int i = 0; i < 8; i++) {
 3a0:	a2 17       	cp	r26, r18
 3a2:	b3 07       	cpc	r27, r19
 3a4:	d9 f7       	brne	.-10     	; 0x39c <can_send_message+0x4a>
			CANMSG = message->data[i];
		}
		
		result = true;
		tx_busy = 1;
 3a6:	81 e0       	ldi	r24, 0x01	; 1
 3a8:	80 93 09 01 	sts	0x0109, r24

		// Set length, start send which restarts tx interrupt
		CANCDMOB = (1 << CONMOB0) | message->length;
 3ac:	82 81       	ldd	r24, Z+2	; 0x02
 3ae:	80 64       	ori	r24, 0x40	; 64
 3b0:	80 93 ef 00 	sts	0x00EF, r24
		// Program data registers - auto increment
		for (int i = 0; i < 8; i++) {
			CANMSG = message->data[i];
		}
		
		result = true;
 3b4:	81 e0       	ldi	r24, 0x01	; 1
 3b6:	3c c0       	rjmp	.+120    	; 0x430 <can_send_message+0xde>
		tx_busy = 1;

		// Set length, start send which restarts tx interrupt
		CANCDMOB = (1 << CONMOB0) | message->length;
	}
	else if (TX_SIZE - ((tx_on - tx_off) & TX_ABS_MASK)) {
 3b8:	20 91 0a 01 	lds	r18, 0x010A
 3bc:	82 2f       	mov	r24, r18
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	30 91 0b 01 	lds	r19, 0x010B
 3c4:	83 1b       	sub	r24, r19
 3c6:	91 09       	sbc	r25, r1
 3c8:	8f 77       	andi	r24, 0x7F	; 127
 3ca:	99 27       	eor	r25, r25
 3cc:	40 97       	sbiw	r24, 0x10	; 16
 3ce:	79 f1       	breq	.+94     	; 0x42e <can_send_message+0xdc>
		// Copy data into TX buffer
		tx_frames[tx_on & (TX_SIZE-1)].id = message->id;
 3d0:	a2 2f       	mov	r26, r18
 3d2:	af 70       	andi	r26, 0x0F	; 15
 3d4:	8b e0       	ldi	r24, 0x0B	; 11
 3d6:	a8 9f       	mul	r26, r24
 3d8:	d0 01       	movw	r26, r0
 3da:	11 24       	eor	r1, r1
 3dc:	ed 01       	movw	r28, r26
 3de:	c4 54       	subi	r28, 0x44	; 68
 3e0:	de 4f       	sbci	r29, 0xFE	; 254
 3e2:	80 81       	ld	r24, Z
 3e4:	38 2f       	mov	r19, r24
 3e6:	32 95       	swap	r19
 3e8:	33 0f       	add	r19, r19
 3ea:	30 7e       	andi	r19, 0xE0	; 224
 3ec:	98 81       	ld	r25, Y
 3ee:	9f 71       	andi	r25, 0x1F	; 31
 3f0:	93 2b       	or	r25, r19
 3f2:	98 83       	st	Y, r25
 3f4:	91 81       	ldd	r25, Z+1	; 0x01
 3f6:	92 95       	swap	r25
 3f8:	99 0f       	add	r25, r25
 3fa:	90 7e       	andi	r25, 0xE0	; 224
 3fc:	86 95       	lsr	r24
 3fe:	86 95       	lsr	r24
 400:	86 95       	lsr	r24
 402:	89 2b       	or	r24, r25
 404:	89 83       	std	Y+1, r24	; 0x01
		tx_frames[tx_on & (TX_SIZE-1)].length = message->length;
 406:	82 81       	ldd	r24, Z+2	; 0x02
 408:	98 2f       	mov	r25, r24
 40a:	9f 70       	andi	r25, 0x0F	; 15
 40c:	8a 81       	ldd	r24, Y+2	; 0x02
 40e:	80 7f       	andi	r24, 0xF0	; 240
 410:	89 2b       	or	r24, r25
 412:	8a 83       	std	Y+2, r24	; 0x02
		memcpy(tx_frames[tx_on & (TX_SIZE-1)].data, message->data, CAN_FRAME_DATA_MAX_LENGTH);
 414:	a1 54       	subi	r26, 0x41	; 65
 416:	be 4f       	sbci	r27, 0xFE	; 254
 418:	88 e0       	ldi	r24, 0x08	; 8
 41a:	33 96       	adiw	r30, 0x03	; 3
 41c:	01 90       	ld	r0, Z+
 41e:	0d 92       	st	X+, r0
 420:	8a 95       	dec	r24
 422:	e1 f7       	brne	.-8      	; 0x41c <can_send_message+0xca>

		/*for (int i = 0; i < 8; i++) {
			tx_frames[tx_on & (TX_SIZE-1)].data[i] = message->data[i];
		}*/

		tx_on++;
 424:	2f 5f       	subi	r18, 0xFF	; 255
 426:	20 93 0a 01 	sts	0x010A, r18
		result = true;
 42a:	81 e0       	ldi	r24, 0x01	; 1
 42c:	01 c0       	rjmp	.+2      	; 0x430 <can_send_message+0xde>

	return true;
}

bool can_send_message(CanMessage_t* message) {
	bool result = false;
 42e:	80 e0       	ldi	r24, 0x00	; 0

		tx_on++;
		result = true;
	}

	CANGIE |= (1 << ENIT);
 430:	eb ed       	ldi	r30, 0xDB	; 219
 432:	f0 e0       	ldi	r31, 0x00	; 0
 434:	90 81       	ld	r25, Z
 436:	90 68       	ori	r25, 0x80	; 128
 438:	90 83       	st	Z, r25

	return result;
 43a:	df 91       	pop	r29
 43c:	cf 91       	pop	r28
 43e:	08 95       	ret

00000440 <timer_init>:
	elapsed_microseconds[timer] = 0;
	timer_enabled[timer] = true;
}

void timer_stop(timer_t timer) {
	timer_enabled[timer] = false;
 440:	14 bc       	out	0x24, r1	; 36
 442:	81 e0       	ldi	r24, 0x01	; 1
 444:	80 93 6e 00 	sts	0x006E, r24
 448:	84 b5       	in	r24, 0x24	; 36
 44a:	84 60       	ori	r24, 0x04	; 4
 44c:	84 bd       	out	0x24, r24	; 36
 44e:	08 95       	ret

00000450 <timer_start>:
 450:	90 e0       	ldi	r25, 0x00	; 0
 452:	fc 01       	movw	r30, r24
 454:	ee 0f       	add	r30, r30
 456:	ff 1f       	adc	r31, r31
 458:	ee 0f       	add	r30, r30
 45a:	ff 1f       	adc	r31, r31
 45c:	e4 59       	subi	r30, 0x94	; 148
 45e:	fd 4f       	sbci	r31, 0xFD	; 253
 460:	10 82       	st	Z, r1
 462:	11 82       	std	Z+1, r1	; 0x01
 464:	12 82       	std	Z+2, r1	; 0x02
 466:	13 82       	std	Z+3, r1	; 0x03
 468:	fc 01       	movw	r30, r24
 46a:	e4 57       	subi	r30, 0x74	; 116
 46c:	fd 4f       	sbci	r31, 0xFD	; 253
 46e:	21 e0       	ldi	r18, 0x01	; 1
 470:	20 83       	st	Z, r18
 472:	08 95       	ret

00000474 <timer_elapsed_ms>:
}

uint16_t timer_elapsed_ms(timer_t timer) {
	return elapsed_microseconds[timer] / 1000;
 474:	24 e0       	ldi	r18, 0x04	; 4
 476:	82 9f       	mul	r24, r18
 478:	c0 01       	movw	r24, r0
 47a:	11 24       	eor	r1, r1
 47c:	fc 01       	movw	r30, r24
 47e:	e4 59       	subi	r30, 0x94	; 148
 480:	fd 4f       	sbci	r31, 0xFD	; 253
 482:	60 81       	ld	r22, Z
 484:	71 81       	ldd	r23, Z+1	; 0x01
 486:	82 81       	ldd	r24, Z+2	; 0x02
 488:	93 81       	ldd	r25, Z+3	; 0x03
 48a:	28 ee       	ldi	r18, 0xE8	; 232
 48c:	33 e0       	ldi	r19, 0x03	; 3
 48e:	40 e0       	ldi	r20, 0x00	; 0
 490:	50 e0       	ldi	r21, 0x00	; 0
 492:	e3 d1       	rcall	.+966    	; 0x85a <__udivmodsi4>
}
 494:	c9 01       	movw	r24, r18
 496:	08 95       	ret

00000498 <__vector_17>:

ISR(TIMER0_OVF_vect) {
 498:	1f 92       	push	r1
 49a:	0f 92       	push	r0
 49c:	0f b6       	in	r0, 0x3f	; 63
 49e:	0f 92       	push	r0
 4a0:	11 24       	eor	r1, r1
 4a2:	2f 93       	push	r18
 4a4:	3f 93       	push	r19
 4a6:	4f 93       	push	r20
 4a8:	5f 93       	push	r21
 4aa:	6f 93       	push	r22
 4ac:	7f 93       	push	r23
 4ae:	8f 93       	push	r24
 4b0:	af 93       	push	r26
 4b2:	bf 93       	push	r27
 4b4:	ef 93       	push	r30
 4b6:	ff 93       	push	r31
 4b8:	ac e8       	ldi	r26, 0x8C	; 140
 4ba:	b2 e0       	ldi	r27, 0x02	; 2
 4bc:	ec e6       	ldi	r30, 0x6C	; 108
 4be:	f2 e0       	ldi	r31, 0x02	; 2
 4c0:	2c e8       	ldi	r18, 0x8C	; 140
 4c2:	32 e0       	ldi	r19, 0x02	; 2
	for (int t = 0; t < NUMBER_OF_TIMERS; t++) {
		if (timer_enabled[t]){
 4c4:	8d 91       	ld	r24, X+
 4c6:	88 23       	and	r24, r24
 4c8:	59 f0       	breq	.+22     	; 0x4e0 <__vector_17+0x48>
			elapsed_microseconds[t] += (1000000ULL * 256 * 256) / F_CPU;
 4ca:	40 81       	ld	r20, Z
 4cc:	51 81       	ldd	r21, Z+1	; 0x01
 4ce:	62 81       	ldd	r22, Z+2	; 0x02
 4d0:	73 81       	ldd	r23, Z+3	; 0x03
 4d2:	50 5e       	subi	r21, 0xE0	; 224
 4d4:	6f 4f       	sbci	r22, 0xFF	; 255
 4d6:	7f 4f       	sbci	r23, 0xFF	; 255
 4d8:	40 83       	st	Z, r20
 4da:	51 83       	std	Z+1, r21	; 0x01
 4dc:	62 83       	std	Z+2, r22	; 0x02
 4de:	73 83       	std	Z+3, r23	; 0x03
 4e0:	34 96       	adiw	r30, 0x04	; 4
uint16_t timer_elapsed_ms(timer_t timer) {
	return elapsed_microseconds[timer] / 1000;
}

ISR(TIMER0_OVF_vect) {
	for (int t = 0; t < NUMBER_OF_TIMERS; t++) {
 4e2:	e2 17       	cp	r30, r18
 4e4:	f3 07       	cpc	r31, r19
 4e6:	71 f7       	brne	.-36     	; 0x4c4 <__vector_17+0x2c>
		if (timer_enabled[t]){
			elapsed_microseconds[t] += (1000000ULL * 256 * 256) / F_CPU;
		}
	}
}
 4e8:	ff 91       	pop	r31
 4ea:	ef 91       	pop	r30
 4ec:	bf 91       	pop	r27
 4ee:	af 91       	pop	r26
 4f0:	8f 91       	pop	r24
 4f2:	7f 91       	pop	r23
 4f4:	6f 91       	pop	r22
 4f6:	5f 91       	pop	r21
 4f8:	4f 91       	pop	r20
 4fa:	3f 91       	pop	r19
 4fc:	2f 91       	pop	r18
 4fe:	0f 90       	pop	r0
 500:	0f be       	out	0x3f, r0	; 63
 502:	0f 90       	pop	r0
 504:	1f 90       	pop	r1
 506:	18 95       	reti

00000508 <usbdbg_tx_char>:
	fdevopen(usbdbg_tx_char, NULL);
}

int usbdbg_tx_char(char c, FILE* stream)
{
	while (!(UCSR0A & (1 << UDRE0))) { }; // Wait until data register is empty
 508:	e0 ec       	ldi	r30, 0xC0	; 192
 50a:	f0 e0       	ldi	r31, 0x00	; 0
 50c:	90 81       	ld	r25, Z
 50e:	95 ff       	sbrs	r25, 5
 510:	fd cf       	rjmp	.-6      	; 0x50c <usbdbg_tx_char+0x4>
	UDR0 = c;
 512:	80 93 c6 00 	sts	0x00C6, r24
	return 1;
}
 516:	81 e0       	ldi	r24, 0x01	; 1
 518:	90 e0       	ldi	r25, 0x00	; 0
 51a:	08 95       	ret

0000051c <usbdbg_init>:
#include <stdlib.h>

void usbdbg_init()
{
	const uint32_t baud_rate = 19200;
	UBRR0 = (F_CPU / 16) / baud_rate - 1;
 51c:	89 e1       	ldi	r24, 0x19	; 25
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	90 93 c5 00 	sts	0x00C5, r25
 524:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0C = (3 << UCSZ0);	// 8 bit transfer
 528:	86 e0       	ldi	r24, 0x06	; 6
 52a:	80 93 c2 00 	sts	0x00C2, r24
	UCSR0B |= (1 << TXEN0)|(1<<RXEN0)|(1<<RXCIE0); // Enable receive and transmit
 52e:	e1 ec       	ldi	r30, 0xC1	; 193
 530:	f0 e0       	ldi	r31, 0x00	; 0
 532:	80 81       	ld	r24, Z
 534:	88 69       	ori	r24, 0x98	; 152
 536:	80 83       	st	Z, r24
	
	fdevopen(usbdbg_tx_char, NULL);
 538:	60 e0       	ldi	r22, 0x00	; 0
 53a:	70 e0       	ldi	r23, 0x00	; 0
 53c:	84 e8       	ldi	r24, 0x84	; 132
 53e:	92 e0       	ldi	r25, 0x02	; 2
 540:	ca c1       	rjmp	.+916    	; 0x8d6 <fdevopen>
 542:	08 95       	ret

00000544 <pin_init>:
	}
	return output;
}

void timers_conf()
{
 544:	8d b1       	in	r24, 0x0d	; 13
 546:	88 7f       	andi	r24, 0xF8	; 248
 548:	8d b9       	out	0x0d, r24	; 13
 54a:	84 b1       	in	r24, 0x04	; 4
 54c:	88 7f       	andi	r24, 0xF8	; 248
 54e:	84 b9       	out	0x04, r24	; 4
 550:	73 9a       	sbi	0x0e, 3	; 14
 552:	2b 9a       	sbi	0x05, 3	; 5
 554:	08 95       	ret

00000556 <low_pass_filter>:
 556:	0f 93       	push	r16
 558:	1f 93       	push	r17
 55a:	fb 01       	movw	r30, r22
 55c:	40 81       	ld	r20, Z
 55e:	51 81       	ldd	r21, Z+1	; 0x01
 560:	62 81       	ldd	r22, Z+2	; 0x02
 562:	73 81       	ldd	r23, Z+3	; 0x03
 564:	8a 01       	movw	r16, r20
 566:	9b 01       	movw	r18, r22
 568:	08 0f       	add	r16, r24
 56a:	19 1f       	adc	r17, r25
 56c:	21 1d       	adc	r18, r1
 56e:	31 1d       	adc	r19, r1
 570:	d9 01       	movw	r26, r18
 572:	c8 01       	movw	r24, r16
 574:	68 94       	set
 576:	13 f8       	bld	r1, 3
 578:	76 95       	lsr	r23
 57a:	67 95       	ror	r22
 57c:	57 95       	ror	r21
 57e:	47 95       	ror	r20
 580:	16 94       	lsr	r1
 582:	d1 f7       	brne	.-12     	; 0x578 <low_pass_filter+0x22>
 584:	84 1b       	sub	r24, r20
 586:	95 0b       	sbc	r25, r21
 588:	a6 0b       	sbc	r26, r22
 58a:	b7 0b       	sbc	r27, r23
 58c:	68 94       	set
 58e:	13 f8       	bld	r1, 3
 590:	b6 95       	lsr	r27
 592:	a7 95       	ror	r26
 594:	97 95       	ror	r25
 596:	87 95       	ror	r24
 598:	16 94       	lsr	r1
 59a:	d1 f7       	brne	.-12     	; 0x590 <low_pass_filter+0x3a>
 59c:	80 83       	st	Z, r24
 59e:	91 83       	std	Z+1, r25	; 0x01
 5a0:	a2 83       	std	Z+2, r26	; 0x02
 5a2:	b3 83       	std	Z+3, r27	; 0x03
 5a4:	1f 91       	pop	r17
 5a6:	0f 91       	pop	r16
 5a8:	08 95       	ret

000005aa <main>:

}

int main(void)
{
	cli();
 5aa:	f8 94       	cli
	pin_init();
 5ac:	cb df       	rcall	.-106    	; 0x544 <pin_init>
	usbdbg_init();
 5ae:	b6 df       	rcall	.-148    	; 0x51c <usbdbg_init>
	timer_init();
 5b0:	47 df       	rcall	.-370    	; 0x440 <timer_init>
	can_init(0,0);
 5b2:	60 e0       	ldi	r22, 0x00	; 0
 5b4:	70 e0       	ldi	r23, 0x00	; 0
 5b6:	80 e0       	ldi	r24, 0x00	; 0
 5b8:	90 e0       	ldi	r25, 0x00	; 0
 5ba:	75 de       	rcall	.-790    	; 0x2a6 <can_init>
	timer_start(TIMER0);
 5bc:	80 e0       	ldi	r24, 0x00	; 0
 5be:	48 df       	rcall	.-368    	; 0x450 <timer_start>
	timers_conf();
	sei();
 5c0:	78 94       	sei
	
	uint8_t state = MEASURE;
    txFrame.id = ENCODER_ID;
 5c2:	ef ea       	ldi	r30, 0xAF	; 175
 5c4:	f2 e0       	ldi	r31, 0x02	; 2
 5c6:	85 e0       	ldi	r24, 0x05	; 5
 5c8:	90 e0       	ldi	r25, 0x00	; 0
 5ca:	91 83       	std	Z+1, r25	; 0x01
 5cc:	80 83       	st	Z, r24
	txFrame.length = 5;
 5ce:	82 83       	std	Z+2, r24	; 0x02
			}
			
			//Wheel Hall Sensor
			if ((PINB & (1<<WHEEL_PIN)) && !m1_state)
			{
				w_counts = TCNT2;
 5d0:	0f 2e       	mov	r0, r31
 5d2:	f2 eb       	ldi	r31, 0xB2	; 178
 5d4:	cf 2e       	mov	r12, r31
 5d6:	d1 2c       	mov	r13, r1
 5d8:	f0 2d       	mov	r31, r0
				TCNT2 = 0;
				w_samples++;
				w_state = 1;
 5da:	77 24       	eor	r7, r7
 5dc:	73 94       	inc	r7
			}
			
			//Encoder 2
			if ((PINF & (1<<ENCODER_I_2)) && !m1_state)
			{
				m2_counts = TCNT3;
 5de:	0f 2e       	mov	r0, r31
 5e0:	f4 e9       	ldi	r31, 0x94	; 148
 5e2:	ef 2e       	mov	r14, r31
 5e4:	f1 2c       	mov	r15, r1
 5e6:	f0 2d       	mov	r31, r0
			
		case MEASURE:
			//Encoder 1
			if ((PINB & (1<<ENCODER_I_1)) && !m1_state)
			{
				m1_counts += TCNT1;
 5e8:	04 e8       	ldi	r16, 0x84	; 132
 5ea:	10 e0       	ldi	r17, 0x00	; 0
		switch (state)
		{
		case SEND:
			m1_counts = m1_counts/m1_samples;
			low_pass_filter(calculate_rpm(m1_counts),&m1_rpm);
			txFrame.data[0] = m1_rpm >> 8;
 5ec:	ef 01       	movw	r28, r30
	 *oldValue = ((*oldValue - (*oldValue >> FILTER_SHIFT) + newValue) >> FILTER_SHIFT);
}

uint16_t calculate_rpm(uint16_t count)
{
	uint32_t output = 0;
 5ee:	61 2c       	mov	r6, r1
 5f0:	51 2c       	mov	r5, r1
	if (count >= 200)
	{
		output = COUNTCONSTANT/count;
 5f2:	0f 2e       	mov	r0, r31
 5f4:	81 2c       	mov	r8, r1
 5f6:	f6 ea       	ldi	r31, 0xA6	; 166
 5f8:	9f 2e       	mov	r9, r31
 5fa:	fe e0       	ldi	r31, 0x0E	; 14
 5fc:	af 2e       	mov	r10, r31
 5fe:	b1 2c       	mov	r11, r1
 600:	f0 2d       	mov	r31, r0
    txFrame.id = ENCODER_ID;
	txFrame.length = 5;
	
	while (1) 
    {
		if (timer_elapsed_ms(TIMER0) > 100)
 602:	80 e0       	ldi	r24, 0x00	; 0
 604:	37 df       	rcall	.-402    	; 0x474 <timer_elapsed_ms>
 606:	85 36       	cpi	r24, 0x65	; 101
 608:	91 05       	cpc	r25, r1
 60a:	08 f4       	brcc	.+2      	; 0x60e <main+0x64>
 60c:	86 c0       	rjmp	.+268    	; 0x71a <main+0x170>
		}
		
		switch (state)
		{
		case SEND:
			m1_counts = m1_counts/m1_samples;
 60e:	80 91 9e 02 	lds	r24, 0x029E
 612:	90 91 9f 02 	lds	r25, 0x029F
 616:	60 91 98 02 	lds	r22, 0x0298
 61a:	70 91 99 02 	lds	r23, 0x0299
 61e:	09 d1       	rcall	.+530    	; 0x832 <__udivmodhi4>
 620:	70 93 9f 02 	sts	0x029F, r23
 624:	60 93 9e 02 	sts	0x029E, r22
}

uint16_t calculate_rpm(uint16_t count)
{
	uint32_t output = 0;
	if (count >= 200)
 628:	68 3c       	cpi	r22, 0xC8	; 200
 62a:	71 05       	cpc	r23, r1
 62c:	38 f0       	brcs	.+14     	; 0x63c <main+0x92>
	{
		output = COUNTCONSTANT/count;
 62e:	9b 01       	movw	r18, r22
 630:	40 e0       	ldi	r20, 0x00	; 0
 632:	50 e0       	ldi	r21, 0x00	; 0
 634:	c5 01       	movw	r24, r10
 636:	b4 01       	movw	r22, r8
 638:	32 d1       	rcall	.+612    	; 0x89e <__divmodsi4>
 63a:	02 c0       	rjmp	.+4      	; 0x640 <main+0x96>
	 *oldValue = ((*oldValue - (*oldValue >> FILTER_SHIFT) + newValue) >> FILTER_SHIFT);
}

uint16_t calculate_rpm(uint16_t count)
{
	uint32_t output = 0;
 63c:	26 2d       	mov	r18, r6
 63e:	35 2d       	mov	r19, r5
		
		switch (state)
		{
		case SEND:
			m1_counts = m1_counts/m1_samples;
			low_pass_filter(calculate_rpm(m1_counts),&m1_rpm);
 640:	6b ea       	ldi	r22, 0xAB	; 171
 642:	72 e0       	ldi	r23, 0x02	; 2
 644:	82 2f       	mov	r24, r18
 646:	93 2f       	mov	r25, r19
 648:	86 df       	rcall	.-244    	; 0x556 <low_pass_filter>
			txFrame.data[0] = m1_rpm >> 8;
 64a:	80 91 ab 02 	lds	r24, 0x02AB
 64e:	90 91 ac 02 	lds	r25, 0x02AC
 652:	9b 83       	std	Y+3, r25	; 0x03
			txFrame.data[1] = m1_rpm;
 654:	8c 83       	std	Y+4, r24	; 0x04
			m1_samples = 0;
 656:	10 92 99 02 	sts	0x0299, r1
 65a:	10 92 98 02 	sts	0x0298, r1
			m1_counts = 0;
 65e:	10 92 9f 02 	sts	0x029F, r1
 662:	10 92 9e 02 	sts	0x029E, r1
			
			m2_counts = m2_counts/m2_samples;
 666:	80 91 9c 02 	lds	r24, 0x029C
 66a:	90 91 9d 02 	lds	r25, 0x029D
 66e:	60 91 96 02 	lds	r22, 0x0296
 672:	70 91 97 02 	lds	r23, 0x0297
 676:	dd d0       	rcall	.+442    	; 0x832 <__udivmodhi4>
 678:	70 93 9d 02 	sts	0x029D, r23
 67c:	60 93 9c 02 	sts	0x029C, r22
}

uint16_t calculate_rpm(uint16_t count)
{
	uint32_t output = 0;
	if (count >= 200)
 680:	68 3c       	cpi	r22, 0xC8	; 200
 682:	71 05       	cpc	r23, r1
 684:	38 f0       	brcs	.+14     	; 0x694 <main+0xea>
	{
		output = COUNTCONSTANT/count;
 686:	9b 01       	movw	r18, r22
 688:	40 e0       	ldi	r20, 0x00	; 0
 68a:	50 e0       	ldi	r21, 0x00	; 0
 68c:	c5 01       	movw	r24, r10
 68e:	b4 01       	movw	r22, r8
 690:	06 d1       	rcall	.+524    	; 0x89e <__divmodsi4>
 692:	02 c0       	rjmp	.+4      	; 0x698 <main+0xee>
	 *oldValue = ((*oldValue - (*oldValue >> FILTER_SHIFT) + newValue) >> FILTER_SHIFT);
}

uint16_t calculate_rpm(uint16_t count)
{
	uint32_t output = 0;
 694:	26 2d       	mov	r18, r6
 696:	35 2d       	mov	r19, r5
			txFrame.data[1] = m1_rpm;
			m1_samples = 0;
			m1_counts = 0;
			
			m2_counts = m2_counts/m2_samples;
			low_pass_filter(calculate_rpm(m2_counts),&m2_rpm);
 698:	67 ea       	ldi	r22, 0xA7	; 167
 69a:	72 e0       	ldi	r23, 0x02	; 2
 69c:	82 2f       	mov	r24, r18
 69e:	93 2f       	mov	r25, r19
 6a0:	5a df       	rcall	.-332    	; 0x556 <low_pass_filter>
			txFrame.data[2] = m2_rpm >> 8;
 6a2:	80 91 a7 02 	lds	r24, 0x02A7
 6a6:	90 91 a8 02 	lds	r25, 0x02A8
 6aa:	9d 83       	std	Y+5, r25	; 0x05
			txFrame.data[3] = m2_rpm;
 6ac:	8e 83       	std	Y+6, r24	; 0x06
			m2_samples = 0;
 6ae:	10 92 97 02 	sts	0x0297, r1
 6b2:	10 92 96 02 	sts	0x0296, r1
			m2_counts = 0;
 6b6:	10 92 9d 02 	sts	0x029D, r1
 6ba:	10 92 9c 02 	sts	0x029C, r1
			
			w_counts = w_counts/w_samples;
 6be:	80 91 9a 02 	lds	r24, 0x029A
 6c2:	90 91 9b 02 	lds	r25, 0x029B
 6c6:	60 91 94 02 	lds	r22, 0x0294
 6ca:	70 91 95 02 	lds	r23, 0x0295
 6ce:	b1 d0       	rcall	.+354    	; 0x832 <__udivmodhi4>
 6d0:	70 93 9b 02 	sts	0x029B, r23
 6d4:	60 93 9a 02 	sts	0x029A, r22
}

uint16_t calculate_rpm(uint16_t count)
{
	uint32_t output = 0;
	if (count >= 200)
 6d8:	68 3c       	cpi	r22, 0xC8	; 200
 6da:	71 05       	cpc	r23, r1
 6dc:	38 f0       	brcs	.+14     	; 0x6ec <main+0x142>
	{
		output = COUNTCONSTANT/count;
 6de:	9b 01       	movw	r18, r22
 6e0:	40 e0       	ldi	r20, 0x00	; 0
 6e2:	50 e0       	ldi	r21, 0x00	; 0
 6e4:	c5 01       	movw	r24, r10
 6e6:	b4 01       	movw	r22, r8
 6e8:	da d0       	rcall	.+436    	; 0x89e <__divmodsi4>
 6ea:	02 c0       	rjmp	.+4      	; 0x6f0 <main+0x146>
	 *oldValue = ((*oldValue - (*oldValue >> FILTER_SHIFT) + newValue) >> FILTER_SHIFT);
}

uint16_t calculate_rpm(uint16_t count)
{
	uint32_t output = 0;
 6ec:	26 2d       	mov	r18, r6
 6ee:	35 2d       	mov	r19, r5
			txFrame.data[3] = m2_rpm;
			m2_samples = 0;
			m2_counts = 0;
			
			w_counts = w_counts/w_samples;
			low_pass_filter(calculate_rpm(w_counts),&w_rpm);
 6f0:	63 ea       	ldi	r22, 0xA3	; 163
 6f2:	72 e0       	ldi	r23, 0x02	; 2
 6f4:	82 2f       	mov	r24, r18
 6f6:	93 2f       	mov	r25, r19
 6f8:	2e df       	rcall	.-420    	; 0x556 <low_pass_filter>
			txFrame.data[4] = w_rpm; 
 6fa:	80 91 a3 02 	lds	r24, 0x02A3
 6fe:	8f 83       	std	Y+7, r24	; 0x07
			w_samples = 0;
 700:	10 92 95 02 	sts	0x0295, r1
 704:	10 92 94 02 	sts	0x0294, r1
			w_counts = 0;
 708:	10 92 9b 02 	sts	0x029B, r1
 70c:	10 92 9a 02 	sts	0x029A, r1
			
			can_send_message(&txFrame);
 710:	ce 01       	movw	r24, r28
 712:	1f de       	rcall	.-962    	; 0x352 <can_send_message>
			state = MEASURE;
			timer_start(TIMER0);
 714:	80 e0       	ldi	r24, 0x00	; 0
 716:	9c de       	rcall	.-712    	; 0x450 <timer_start>
			break;
 718:	74 cf       	rjmp	.-280    	; 0x602 <main+0x58>
			
		case MEASURE:
			//Encoder 1
			if ((PINB & (1<<ENCODER_I_1)) && !m1_state)
 71a:	18 9b       	sbis	0x03, 0	; 3
 71c:	22 c0       	rjmp	.+68     	; 0x762 <main+0x1b8>
 71e:	80 91 a2 02 	lds	r24, 0x02A2
 722:	81 11       	cpse	r24, r1
 724:	6f c0       	rjmp	.+222    	; 0x804 <main+0x25a>
			{
				m1_counts += TCNT1;
 726:	f8 01       	movw	r30, r16
 728:	80 81       	ld	r24, Z
 72a:	91 81       	ldd	r25, Z+1	; 0x01
 72c:	20 91 9e 02 	lds	r18, 0x029E
 730:	30 91 9f 02 	lds	r19, 0x029F
 734:	82 0f       	add	r24, r18
 736:	93 1f       	adc	r25, r19
 738:	90 93 9f 02 	sts	0x029F, r25
 73c:	80 93 9e 02 	sts	0x029E, r24
				TCNT1 = 0;
 740:	11 82       	std	Z+1, r1	; 0x01
 742:	10 82       	st	Z, r1
				m1_samples++;
 744:	80 91 98 02 	lds	r24, 0x0298
 748:	90 91 99 02 	lds	r25, 0x0299
 74c:	01 96       	adiw	r24, 0x01	; 1
 74e:	90 93 99 02 	sts	0x0299, r25
 752:	80 93 98 02 	sts	0x0298, r24
				m1_state = 1;
 756:	70 92 a2 02 	sts	0x02A2, r7
			{
				m1_state = 0;
			}
			
			//Encoder 2
			if ((PINF & (1<<ENCODER_I_2)) && !m1_state)
 75a:	8f b1       	in	r24, 0x0f	; 15
			{
				m2_counts = TCNT3;
				TCNT3 = 0;
				m2_samples++;
				m2_state = 1;
			} else if (!(PINB & (1<<ENCODER_I_1)) && m1_state)
 75c:	18 9b       	sbis	0x03, 0	; 3
 75e:	2c c0       	rjmp	.+88     	; 0x7b8 <main+0x20e>
 760:	2d c0       	rjmp	.+90     	; 0x7bc <main+0x212>
			{
				m1_counts += TCNT1;
				TCNT1 = 0;
				m1_samples++;
				m1_state = 1;
			} else if (!(PINB & (1<<ENCODER_I_1)) && m1_state)
 762:	18 99       	sbic	0x03, 0	; 3
 764:	08 c0       	rjmp	.+16     	; 0x776 <main+0x1cc>
 766:	80 91 a2 02 	lds	r24, 0x02A2
 76a:	88 23       	and	r24, r24
 76c:	09 f4       	brne	.+2      	; 0x770 <main+0x1c6>
 76e:	4d c0       	rjmp	.+154    	; 0x80a <main+0x260>
			{
				m1_state = 0;
 770:	10 92 a2 02 	sts	0x02A2, r1
 774:	4a c0       	rjmp	.+148    	; 0x80a <main+0x260>
			}
			
			//Encoder 2
			if ((PINF & (1<<ENCODER_I_2)) && !m1_state)
 776:	78 9b       	sbis	0x0f, 0	; 15
 778:	19 c0       	rjmp	.+50     	; 0x7ac <main+0x202>
 77a:	80 91 a2 02 	lds	r24, 0x02A2
 77e:	81 11       	cpse	r24, r1
 780:	47 c0       	rjmp	.+142    	; 0x810 <main+0x266>
			{
				m2_counts = TCNT3;
 782:	f7 01       	movw	r30, r14
 784:	80 81       	ld	r24, Z
 786:	91 81       	ldd	r25, Z+1	; 0x01
 788:	90 93 9d 02 	sts	0x029D, r25
 78c:	80 93 9c 02 	sts	0x029C, r24
				TCNT3 = 0;
 790:	11 82       	std	Z+1, r1	; 0x01
 792:	10 82       	st	Z, r1
				m2_samples++;
 794:	80 91 96 02 	lds	r24, 0x0296
 798:	90 91 97 02 	lds	r25, 0x0297
 79c:	01 96       	adiw	r24, 0x01	; 1
 79e:	90 93 97 02 	sts	0x0297, r25
 7a2:	80 93 96 02 	sts	0x0296, r24
				m2_state = 1;
 7a6:	70 92 a1 02 	sts	0x02A1, r7
 7aa:	08 c0       	rjmp	.+16     	; 0x7bc <main+0x212>
			} else if (!(PINB & (1<<ENCODER_I_1)) && m1_state)
 7ac:	18 99       	sbic	0x03, 0	; 3
 7ae:	06 c0       	rjmp	.+12     	; 0x7bc <main+0x212>
 7b0:	80 91 a2 02 	lds	r24, 0x02A2
 7b4:	88 23       	and	r24, r24
 7b6:	79 f1       	breq	.+94     	; 0x816 <main+0x26c>
			{
				m2_state = 0;
 7b8:	10 92 a1 02 	sts	0x02A1, r1
			}
			
			//Wheel Hall Sensor
			if ((PINB & (1<<WHEEL_PIN)) && !m1_state)
 7bc:	1c 9b       	sbis	0x03, 4	; 3
 7be:	18 c0       	rjmp	.+48     	; 0x7f0 <main+0x246>
 7c0:	80 91 a2 02 	lds	r24, 0x02A2
 7c4:	81 11       	cpse	r24, r1
 7c6:	2a c0       	rjmp	.+84     	; 0x81c <main+0x272>
			{
				w_counts = TCNT2;
 7c8:	f6 01       	movw	r30, r12
 7ca:	80 81       	ld	r24, Z
 7cc:	90 e0       	ldi	r25, 0x00	; 0
 7ce:	90 93 9b 02 	sts	0x029B, r25
 7d2:	80 93 9a 02 	sts	0x029A, r24
				TCNT2 = 0;
 7d6:	10 82       	st	Z, r1
				w_samples++;
 7d8:	80 91 94 02 	lds	r24, 0x0294
 7dc:	90 91 95 02 	lds	r25, 0x0295
 7e0:	01 96       	adiw	r24, 0x01	; 1
 7e2:	90 93 95 02 	sts	0x0295, r25
 7e6:	80 93 94 02 	sts	0x0294, r24
				w_state = 1;
 7ea:	70 92 a0 02 	sts	0x02A0, r7
 7ee:	09 cf       	rjmp	.-494    	; 0x602 <main+0x58>
			} else if (!(PINB & (1<<WHEEL_PIN)) && m1_state)
 7f0:	1c 99       	sbic	0x03, 4	; 3
 7f2:	07 cf       	rjmp	.-498    	; 0x602 <main+0x58>
 7f4:	80 91 a2 02 	lds	r24, 0x02A2
 7f8:	88 23       	and	r24, r24
 7fa:	09 f4       	brne	.+2      	; 0x7fe <main+0x254>
 7fc:	02 cf       	rjmp	.-508    	; 0x602 <main+0x58>
			{
				w_state = 0;
 7fe:	10 92 a0 02 	sts	0x02A0, r1
 802:	ff ce       	rjmp	.-514    	; 0x602 <main+0x58>
			{
				m1_counts += TCNT1;
				TCNT1 = 0;
				m1_samples++;
				m1_state = 1;
			} else if (!(PINB & (1<<ENCODER_I_1)) && m1_state)
 804:	18 9b       	sbis	0x03, 0	; 3
 806:	b4 cf       	rjmp	.-152    	; 0x770 <main+0x1c6>
 808:	0c c0       	rjmp	.+24     	; 0x822 <main+0x278>
			{
				m1_state = 0;
			}
			
			//Encoder 2
			if ((PINF & (1<<ENCODER_I_2)) && !m1_state)
 80a:	78 99       	sbic	0x0f, 0	; 15
 80c:	ba cf       	rjmp	.-140    	; 0x782 <main+0x1d8>
 80e:	ce cf       	rjmp	.-100    	; 0x7ac <main+0x202>
			{
				m2_counts = TCNT3;
				TCNT3 = 0;
				m2_samples++;
				m2_state = 1;
			} else if (!(PINB & (1<<ENCODER_I_1)) && m1_state)
 810:	18 9b       	sbis	0x03, 0	; 3
 812:	d2 cf       	rjmp	.-92     	; 0x7b8 <main+0x20e>
 814:	09 c0       	rjmp	.+18     	; 0x828 <main+0x27e>
			{
				m2_state = 0;
			}
			
			//Wheel Hall Sensor
			if ((PINB & (1<<WHEEL_PIN)) && !m1_state)
 816:	1c 99       	sbic	0x03, 4	; 3
 818:	d7 cf       	rjmp	.-82     	; 0x7c8 <main+0x21e>
 81a:	09 c0       	rjmp	.+18     	; 0x82e <main+0x284>
			{
				w_counts = TCNT2;
				TCNT2 = 0;
				w_samples++;
				w_state = 1;
			} else if (!(PINB & (1<<WHEEL_PIN)) && m1_state)
 81c:	1c 9b       	sbis	0x03, 4	; 3
 81e:	ef cf       	rjmp	.-34     	; 0x7fe <main+0x254>
 820:	f0 ce       	rjmp	.-544    	; 0x602 <main+0x58>
			{
				m1_state = 0;
			}
			
			//Encoder 2
			if ((PINF & (1<<ENCODER_I_2)) && !m1_state)
 822:	78 99       	sbic	0x0f, 0	; 15
 824:	f5 cf       	rjmp	.-22     	; 0x810 <main+0x266>
 826:	c2 cf       	rjmp	.-124    	; 0x7ac <main+0x202>
			{
				m2_state = 0;
			}
			
			//Wheel Hall Sensor
			if ((PINB & (1<<WHEEL_PIN)) && !m1_state)
 828:	1c 99       	sbic	0x03, 4	; 3
 82a:	f8 cf       	rjmp	.-16     	; 0x81c <main+0x272>
 82c:	e1 cf       	rjmp	.-62     	; 0x7f0 <main+0x246>
			{
				w_counts = TCNT2;
				TCNT2 = 0;
				w_samples++;
				w_state = 1;
			} else if (!(PINB & (1<<WHEEL_PIN)) && m1_state)
 82e:	83 b1       	in	r24, 0x03	; 3
 830:	e8 ce       	rjmp	.-560    	; 0x602 <main+0x58>

00000832 <__udivmodhi4>:
 832:	aa 1b       	sub	r26, r26
 834:	bb 1b       	sub	r27, r27
 836:	51 e1       	ldi	r21, 0x11	; 17
 838:	07 c0       	rjmp	.+14     	; 0x848 <__udivmodhi4_ep>

0000083a <__udivmodhi4_loop>:
 83a:	aa 1f       	adc	r26, r26
 83c:	bb 1f       	adc	r27, r27
 83e:	a6 17       	cp	r26, r22
 840:	b7 07       	cpc	r27, r23
 842:	10 f0       	brcs	.+4      	; 0x848 <__udivmodhi4_ep>
 844:	a6 1b       	sub	r26, r22
 846:	b7 0b       	sbc	r27, r23

00000848 <__udivmodhi4_ep>:
 848:	88 1f       	adc	r24, r24
 84a:	99 1f       	adc	r25, r25
 84c:	5a 95       	dec	r21
 84e:	a9 f7       	brne	.-22     	; 0x83a <__udivmodhi4_loop>
 850:	80 95       	com	r24
 852:	90 95       	com	r25
 854:	bc 01       	movw	r22, r24
 856:	cd 01       	movw	r24, r26
 858:	08 95       	ret

0000085a <__udivmodsi4>:
 85a:	a1 e2       	ldi	r26, 0x21	; 33
 85c:	1a 2e       	mov	r1, r26
 85e:	aa 1b       	sub	r26, r26
 860:	bb 1b       	sub	r27, r27
 862:	fd 01       	movw	r30, r26
 864:	0d c0       	rjmp	.+26     	; 0x880 <__udivmodsi4_ep>

00000866 <__udivmodsi4_loop>:
 866:	aa 1f       	adc	r26, r26
 868:	bb 1f       	adc	r27, r27
 86a:	ee 1f       	adc	r30, r30
 86c:	ff 1f       	adc	r31, r31
 86e:	a2 17       	cp	r26, r18
 870:	b3 07       	cpc	r27, r19
 872:	e4 07       	cpc	r30, r20
 874:	f5 07       	cpc	r31, r21
 876:	20 f0       	brcs	.+8      	; 0x880 <__udivmodsi4_ep>
 878:	a2 1b       	sub	r26, r18
 87a:	b3 0b       	sbc	r27, r19
 87c:	e4 0b       	sbc	r30, r20
 87e:	f5 0b       	sbc	r31, r21

00000880 <__udivmodsi4_ep>:
 880:	66 1f       	adc	r22, r22
 882:	77 1f       	adc	r23, r23
 884:	88 1f       	adc	r24, r24
 886:	99 1f       	adc	r25, r25
 888:	1a 94       	dec	r1
 88a:	69 f7       	brne	.-38     	; 0x866 <__udivmodsi4_loop>
 88c:	60 95       	com	r22
 88e:	70 95       	com	r23
 890:	80 95       	com	r24
 892:	90 95       	com	r25
 894:	9b 01       	movw	r18, r22
 896:	ac 01       	movw	r20, r24
 898:	bd 01       	movw	r22, r26
 89a:	cf 01       	movw	r24, r30
 89c:	08 95       	ret

0000089e <__divmodsi4>:
 89e:	05 2e       	mov	r0, r21
 8a0:	97 fb       	bst	r25, 7
 8a2:	16 f4       	brtc	.+4      	; 0x8a8 <__divmodsi4+0xa>
 8a4:	00 94       	com	r0
 8a6:	0f d0       	rcall	.+30     	; 0x8c6 <__negsi2>
 8a8:	57 fd       	sbrc	r21, 7
 8aa:	05 d0       	rcall	.+10     	; 0x8b6 <__divmodsi4_neg2>
 8ac:	d6 df       	rcall	.-84     	; 0x85a <__udivmodsi4>
 8ae:	07 fc       	sbrc	r0, 7
 8b0:	02 d0       	rcall	.+4      	; 0x8b6 <__divmodsi4_neg2>
 8b2:	46 f4       	brtc	.+16     	; 0x8c4 <__divmodsi4_exit>
 8b4:	08 c0       	rjmp	.+16     	; 0x8c6 <__negsi2>

000008b6 <__divmodsi4_neg2>:
 8b6:	50 95       	com	r21
 8b8:	40 95       	com	r20
 8ba:	30 95       	com	r19
 8bc:	21 95       	neg	r18
 8be:	3f 4f       	sbci	r19, 0xFF	; 255
 8c0:	4f 4f       	sbci	r20, 0xFF	; 255
 8c2:	5f 4f       	sbci	r21, 0xFF	; 255

000008c4 <__divmodsi4_exit>:
 8c4:	08 95       	ret

000008c6 <__negsi2>:
 8c6:	90 95       	com	r25
 8c8:	80 95       	com	r24
 8ca:	70 95       	com	r23
 8cc:	61 95       	neg	r22
 8ce:	7f 4f       	sbci	r23, 0xFF	; 255
 8d0:	8f 4f       	sbci	r24, 0xFF	; 255
 8d2:	9f 4f       	sbci	r25, 0xFF	; 255
 8d4:	08 95       	ret

000008d6 <fdevopen>:
 8d6:	0f 93       	push	r16
 8d8:	1f 93       	push	r17
 8da:	cf 93       	push	r28
 8dc:	df 93       	push	r29
 8de:	00 97       	sbiw	r24, 0x00	; 0
 8e0:	31 f4       	brne	.+12     	; 0x8ee <fdevopen+0x18>
 8e2:	61 15       	cp	r22, r1
 8e4:	71 05       	cpc	r23, r1
 8e6:	19 f4       	brne	.+6      	; 0x8ee <fdevopen+0x18>
 8e8:	80 e0       	ldi	r24, 0x00	; 0
 8ea:	90 e0       	ldi	r25, 0x00	; 0
 8ec:	39 c0       	rjmp	.+114    	; 0x960 <__stack+0x61>
 8ee:	8b 01       	movw	r16, r22
 8f0:	ec 01       	movw	r28, r24
 8f2:	6e e0       	ldi	r22, 0x0E	; 14
 8f4:	70 e0       	ldi	r23, 0x00	; 0
 8f6:	81 e0       	ldi	r24, 0x01	; 1
 8f8:	90 e0       	ldi	r25, 0x00	; 0
 8fa:	37 d0       	rcall	.+110    	; 0x96a <calloc>
 8fc:	fc 01       	movw	r30, r24
 8fe:	89 2b       	or	r24, r25
 900:	99 f3       	breq	.-26     	; 0x8e8 <fdevopen+0x12>
 902:	80 e8       	ldi	r24, 0x80	; 128
 904:	83 83       	std	Z+3, r24	; 0x03
 906:	01 15       	cp	r16, r1
 908:	11 05       	cpc	r17, r1
 90a:	71 f0       	breq	.+28     	; 0x928 <__stack+0x29>
 90c:	13 87       	std	Z+11, r17	; 0x0b
 90e:	02 87       	std	Z+10, r16	; 0x0a
 910:	81 e8       	ldi	r24, 0x81	; 129
 912:	83 83       	std	Z+3, r24	; 0x03
 914:	80 91 ba 02 	lds	r24, 0x02BA
 918:	90 91 bb 02 	lds	r25, 0x02BB
 91c:	89 2b       	or	r24, r25
 91e:	21 f4       	brne	.+8      	; 0x928 <__stack+0x29>
 920:	f0 93 bb 02 	sts	0x02BB, r31
 924:	e0 93 ba 02 	sts	0x02BA, r30
 928:	20 97       	sbiw	r28, 0x00	; 0
 92a:	c9 f0       	breq	.+50     	; 0x95e <__stack+0x5f>
 92c:	d1 87       	std	Z+9, r29	; 0x09
 92e:	c0 87       	std	Z+8, r28	; 0x08
 930:	83 81       	ldd	r24, Z+3	; 0x03
 932:	82 60       	ori	r24, 0x02	; 2
 934:	83 83       	std	Z+3, r24	; 0x03
 936:	80 91 bc 02 	lds	r24, 0x02BC
 93a:	90 91 bd 02 	lds	r25, 0x02BD
 93e:	89 2b       	or	r24, r25
 940:	71 f4       	brne	.+28     	; 0x95e <__stack+0x5f>
 942:	f0 93 bd 02 	sts	0x02BD, r31
 946:	e0 93 bc 02 	sts	0x02BC, r30
 94a:	80 91 be 02 	lds	r24, 0x02BE
 94e:	90 91 bf 02 	lds	r25, 0x02BF
 952:	89 2b       	or	r24, r25
 954:	21 f4       	brne	.+8      	; 0x95e <__stack+0x5f>
 956:	f0 93 bf 02 	sts	0x02BF, r31
 95a:	e0 93 be 02 	sts	0x02BE, r30
 95e:	cf 01       	movw	r24, r30
 960:	df 91       	pop	r29
 962:	cf 91       	pop	r28
 964:	1f 91       	pop	r17
 966:	0f 91       	pop	r16
 968:	08 95       	ret

0000096a <calloc>:
 96a:	0f 93       	push	r16
 96c:	1f 93       	push	r17
 96e:	cf 93       	push	r28
 970:	df 93       	push	r29
 972:	86 9f       	mul	r24, r22
 974:	80 01       	movw	r16, r0
 976:	87 9f       	mul	r24, r23
 978:	10 0d       	add	r17, r0
 97a:	96 9f       	mul	r25, r22
 97c:	10 0d       	add	r17, r0
 97e:	11 24       	eor	r1, r1
 980:	c8 01       	movw	r24, r16
 982:	0d d0       	rcall	.+26     	; 0x99e <malloc>
 984:	ec 01       	movw	r28, r24
 986:	00 97       	sbiw	r24, 0x00	; 0
 988:	21 f0       	breq	.+8      	; 0x992 <calloc+0x28>
 98a:	a8 01       	movw	r20, r16
 98c:	60 e0       	ldi	r22, 0x00	; 0
 98e:	70 e0       	ldi	r23, 0x00	; 0
 990:	33 d1       	rcall	.+614    	; 0xbf8 <memset>
 992:	ce 01       	movw	r24, r28
 994:	df 91       	pop	r29
 996:	cf 91       	pop	r28
 998:	1f 91       	pop	r17
 99a:	0f 91       	pop	r16
 99c:	08 95       	ret

0000099e <malloc>:
 99e:	cf 93       	push	r28
 9a0:	df 93       	push	r29
 9a2:	82 30       	cpi	r24, 0x02	; 2
 9a4:	91 05       	cpc	r25, r1
 9a6:	10 f4       	brcc	.+4      	; 0x9ac <malloc+0xe>
 9a8:	82 e0       	ldi	r24, 0x02	; 2
 9aa:	90 e0       	ldi	r25, 0x00	; 0
 9ac:	e0 91 c2 02 	lds	r30, 0x02C2
 9b0:	f0 91 c3 02 	lds	r31, 0x02C3
 9b4:	20 e0       	ldi	r18, 0x00	; 0
 9b6:	30 e0       	ldi	r19, 0x00	; 0
 9b8:	c0 e0       	ldi	r28, 0x00	; 0
 9ba:	d0 e0       	ldi	r29, 0x00	; 0
 9bc:	30 97       	sbiw	r30, 0x00	; 0
 9be:	11 f1       	breq	.+68     	; 0xa04 <malloc+0x66>
 9c0:	40 81       	ld	r20, Z
 9c2:	51 81       	ldd	r21, Z+1	; 0x01
 9c4:	48 17       	cp	r20, r24
 9c6:	59 07       	cpc	r21, r25
 9c8:	c0 f0       	brcs	.+48     	; 0x9fa <malloc+0x5c>
 9ca:	48 17       	cp	r20, r24
 9cc:	59 07       	cpc	r21, r25
 9ce:	61 f4       	brne	.+24     	; 0x9e8 <malloc+0x4a>
 9d0:	82 81       	ldd	r24, Z+2	; 0x02
 9d2:	93 81       	ldd	r25, Z+3	; 0x03
 9d4:	20 97       	sbiw	r28, 0x00	; 0
 9d6:	19 f0       	breq	.+6      	; 0x9de <malloc+0x40>
 9d8:	9b 83       	std	Y+3, r25	; 0x03
 9da:	8a 83       	std	Y+2, r24	; 0x02
 9dc:	2b c0       	rjmp	.+86     	; 0xa34 <malloc+0x96>
 9de:	90 93 c3 02 	sts	0x02C3, r25
 9e2:	80 93 c2 02 	sts	0x02C2, r24
 9e6:	26 c0       	rjmp	.+76     	; 0xa34 <malloc+0x96>
 9e8:	21 15       	cp	r18, r1
 9ea:	31 05       	cpc	r19, r1
 9ec:	19 f0       	breq	.+6      	; 0x9f4 <malloc+0x56>
 9ee:	42 17       	cp	r20, r18
 9f0:	53 07       	cpc	r21, r19
 9f2:	18 f4       	brcc	.+6      	; 0x9fa <malloc+0x5c>
 9f4:	9a 01       	movw	r18, r20
 9f6:	be 01       	movw	r22, r28
 9f8:	df 01       	movw	r26, r30
 9fa:	ef 01       	movw	r28, r30
 9fc:	02 80       	ldd	r0, Z+2	; 0x02
 9fe:	f3 81       	ldd	r31, Z+3	; 0x03
 a00:	e0 2d       	mov	r30, r0
 a02:	dc cf       	rjmp	.-72     	; 0x9bc <malloc+0x1e>
 a04:	21 15       	cp	r18, r1
 a06:	31 05       	cpc	r19, r1
 a08:	09 f1       	breq	.+66     	; 0xa4c <malloc+0xae>
 a0a:	28 1b       	sub	r18, r24
 a0c:	39 0b       	sbc	r19, r25
 a0e:	24 30       	cpi	r18, 0x04	; 4
 a10:	31 05       	cpc	r19, r1
 a12:	90 f4       	brcc	.+36     	; 0xa38 <malloc+0x9a>
 a14:	12 96       	adiw	r26, 0x02	; 2
 a16:	8d 91       	ld	r24, X+
 a18:	9c 91       	ld	r25, X
 a1a:	13 97       	sbiw	r26, 0x03	; 3
 a1c:	61 15       	cp	r22, r1
 a1e:	71 05       	cpc	r23, r1
 a20:	21 f0       	breq	.+8      	; 0xa2a <malloc+0x8c>
 a22:	fb 01       	movw	r30, r22
 a24:	93 83       	std	Z+3, r25	; 0x03
 a26:	82 83       	std	Z+2, r24	; 0x02
 a28:	04 c0       	rjmp	.+8      	; 0xa32 <malloc+0x94>
 a2a:	90 93 c3 02 	sts	0x02C3, r25
 a2e:	80 93 c2 02 	sts	0x02C2, r24
 a32:	fd 01       	movw	r30, r26
 a34:	32 96       	adiw	r30, 0x02	; 2
 a36:	44 c0       	rjmp	.+136    	; 0xac0 <malloc+0x122>
 a38:	fd 01       	movw	r30, r26
 a3a:	e2 0f       	add	r30, r18
 a3c:	f3 1f       	adc	r31, r19
 a3e:	81 93       	st	Z+, r24
 a40:	91 93       	st	Z+, r25
 a42:	22 50       	subi	r18, 0x02	; 2
 a44:	31 09       	sbc	r19, r1
 a46:	2d 93       	st	X+, r18
 a48:	3c 93       	st	X, r19
 a4a:	3a c0       	rjmp	.+116    	; 0xac0 <malloc+0x122>
 a4c:	20 91 c0 02 	lds	r18, 0x02C0
 a50:	30 91 c1 02 	lds	r19, 0x02C1
 a54:	23 2b       	or	r18, r19
 a56:	41 f4       	brne	.+16     	; 0xa68 <malloc+0xca>
 a58:	20 91 02 01 	lds	r18, 0x0102
 a5c:	30 91 03 01 	lds	r19, 0x0103
 a60:	30 93 c1 02 	sts	0x02C1, r19
 a64:	20 93 c0 02 	sts	0x02C0, r18
 a68:	20 91 00 01 	lds	r18, 0x0100
 a6c:	30 91 01 01 	lds	r19, 0x0101
 a70:	21 15       	cp	r18, r1
 a72:	31 05       	cpc	r19, r1
 a74:	41 f4       	brne	.+16     	; 0xa86 <malloc+0xe8>
 a76:	2d b7       	in	r18, 0x3d	; 61
 a78:	3e b7       	in	r19, 0x3e	; 62
 a7a:	40 91 04 01 	lds	r20, 0x0104
 a7e:	50 91 05 01 	lds	r21, 0x0105
 a82:	24 1b       	sub	r18, r20
 a84:	35 0b       	sbc	r19, r21
 a86:	e0 91 c0 02 	lds	r30, 0x02C0
 a8a:	f0 91 c1 02 	lds	r31, 0x02C1
 a8e:	e2 17       	cp	r30, r18
 a90:	f3 07       	cpc	r31, r19
 a92:	a0 f4       	brcc	.+40     	; 0xabc <malloc+0x11e>
 a94:	2e 1b       	sub	r18, r30
 a96:	3f 0b       	sbc	r19, r31
 a98:	28 17       	cp	r18, r24
 a9a:	39 07       	cpc	r19, r25
 a9c:	78 f0       	brcs	.+30     	; 0xabc <malloc+0x11e>
 a9e:	ac 01       	movw	r20, r24
 aa0:	4e 5f       	subi	r20, 0xFE	; 254
 aa2:	5f 4f       	sbci	r21, 0xFF	; 255
 aa4:	24 17       	cp	r18, r20
 aa6:	35 07       	cpc	r19, r21
 aa8:	48 f0       	brcs	.+18     	; 0xabc <malloc+0x11e>
 aaa:	4e 0f       	add	r20, r30
 aac:	5f 1f       	adc	r21, r31
 aae:	50 93 c1 02 	sts	0x02C1, r21
 ab2:	40 93 c0 02 	sts	0x02C0, r20
 ab6:	81 93       	st	Z+, r24
 ab8:	91 93       	st	Z+, r25
 aba:	02 c0       	rjmp	.+4      	; 0xac0 <malloc+0x122>
 abc:	e0 e0       	ldi	r30, 0x00	; 0
 abe:	f0 e0       	ldi	r31, 0x00	; 0
 ac0:	cf 01       	movw	r24, r30
 ac2:	df 91       	pop	r29
 ac4:	cf 91       	pop	r28
 ac6:	08 95       	ret

00000ac8 <free>:
 ac8:	0f 93       	push	r16
 aca:	1f 93       	push	r17
 acc:	cf 93       	push	r28
 ace:	df 93       	push	r29
 ad0:	00 97       	sbiw	r24, 0x00	; 0
 ad2:	09 f4       	brne	.+2      	; 0xad6 <free+0xe>
 ad4:	8c c0       	rjmp	.+280    	; 0xbee <free+0x126>
 ad6:	fc 01       	movw	r30, r24
 ad8:	32 97       	sbiw	r30, 0x02	; 2
 ada:	13 82       	std	Z+3, r1	; 0x03
 adc:	12 82       	std	Z+2, r1	; 0x02
 ade:	00 91 c2 02 	lds	r16, 0x02C2
 ae2:	10 91 c3 02 	lds	r17, 0x02C3
 ae6:	01 15       	cp	r16, r1
 ae8:	11 05       	cpc	r17, r1
 aea:	81 f4       	brne	.+32     	; 0xb0c <free+0x44>
 aec:	20 81       	ld	r18, Z
 aee:	31 81       	ldd	r19, Z+1	; 0x01
 af0:	82 0f       	add	r24, r18
 af2:	93 1f       	adc	r25, r19
 af4:	20 91 c0 02 	lds	r18, 0x02C0
 af8:	30 91 c1 02 	lds	r19, 0x02C1
 afc:	28 17       	cp	r18, r24
 afe:	39 07       	cpc	r19, r25
 b00:	79 f5       	brne	.+94     	; 0xb60 <free+0x98>
 b02:	f0 93 c1 02 	sts	0x02C1, r31
 b06:	e0 93 c0 02 	sts	0x02C0, r30
 b0a:	71 c0       	rjmp	.+226    	; 0xbee <free+0x126>
 b0c:	d8 01       	movw	r26, r16
 b0e:	40 e0       	ldi	r20, 0x00	; 0
 b10:	50 e0       	ldi	r21, 0x00	; 0
 b12:	ae 17       	cp	r26, r30
 b14:	bf 07       	cpc	r27, r31
 b16:	50 f4       	brcc	.+20     	; 0xb2c <free+0x64>
 b18:	12 96       	adiw	r26, 0x02	; 2
 b1a:	2d 91       	ld	r18, X+
 b1c:	3c 91       	ld	r19, X
 b1e:	13 97       	sbiw	r26, 0x03	; 3
 b20:	ad 01       	movw	r20, r26
 b22:	21 15       	cp	r18, r1
 b24:	31 05       	cpc	r19, r1
 b26:	09 f1       	breq	.+66     	; 0xb6a <free+0xa2>
 b28:	d9 01       	movw	r26, r18
 b2a:	f3 cf       	rjmp	.-26     	; 0xb12 <free+0x4a>
 b2c:	9d 01       	movw	r18, r26
 b2e:	da 01       	movw	r26, r20
 b30:	33 83       	std	Z+3, r19	; 0x03
 b32:	22 83       	std	Z+2, r18	; 0x02
 b34:	60 81       	ld	r22, Z
 b36:	71 81       	ldd	r23, Z+1	; 0x01
 b38:	86 0f       	add	r24, r22
 b3a:	97 1f       	adc	r25, r23
 b3c:	82 17       	cp	r24, r18
 b3e:	93 07       	cpc	r25, r19
 b40:	69 f4       	brne	.+26     	; 0xb5c <free+0x94>
 b42:	ec 01       	movw	r28, r24
 b44:	28 81       	ld	r18, Y
 b46:	39 81       	ldd	r19, Y+1	; 0x01
 b48:	26 0f       	add	r18, r22
 b4a:	37 1f       	adc	r19, r23
 b4c:	2e 5f       	subi	r18, 0xFE	; 254
 b4e:	3f 4f       	sbci	r19, 0xFF	; 255
 b50:	31 83       	std	Z+1, r19	; 0x01
 b52:	20 83       	st	Z, r18
 b54:	8a 81       	ldd	r24, Y+2	; 0x02
 b56:	9b 81       	ldd	r25, Y+3	; 0x03
 b58:	93 83       	std	Z+3, r25	; 0x03
 b5a:	82 83       	std	Z+2, r24	; 0x02
 b5c:	45 2b       	or	r20, r21
 b5e:	29 f4       	brne	.+10     	; 0xb6a <free+0xa2>
 b60:	f0 93 c3 02 	sts	0x02C3, r31
 b64:	e0 93 c2 02 	sts	0x02C2, r30
 b68:	42 c0       	rjmp	.+132    	; 0xbee <free+0x126>
 b6a:	13 96       	adiw	r26, 0x03	; 3
 b6c:	fc 93       	st	X, r31
 b6e:	ee 93       	st	-X, r30
 b70:	12 97       	sbiw	r26, 0x02	; 2
 b72:	ed 01       	movw	r28, r26
 b74:	49 91       	ld	r20, Y+
 b76:	59 91       	ld	r21, Y+
 b78:	9e 01       	movw	r18, r28
 b7a:	24 0f       	add	r18, r20
 b7c:	35 1f       	adc	r19, r21
 b7e:	e2 17       	cp	r30, r18
 b80:	f3 07       	cpc	r31, r19
 b82:	71 f4       	brne	.+28     	; 0xba0 <free+0xd8>
 b84:	80 81       	ld	r24, Z
 b86:	91 81       	ldd	r25, Z+1	; 0x01
 b88:	84 0f       	add	r24, r20
 b8a:	95 1f       	adc	r25, r21
 b8c:	02 96       	adiw	r24, 0x02	; 2
 b8e:	11 96       	adiw	r26, 0x01	; 1
 b90:	9c 93       	st	X, r25
 b92:	8e 93       	st	-X, r24
 b94:	82 81       	ldd	r24, Z+2	; 0x02
 b96:	93 81       	ldd	r25, Z+3	; 0x03
 b98:	13 96       	adiw	r26, 0x03	; 3
 b9a:	9c 93       	st	X, r25
 b9c:	8e 93       	st	-X, r24
 b9e:	12 97       	sbiw	r26, 0x02	; 2
 ba0:	e0 e0       	ldi	r30, 0x00	; 0
 ba2:	f0 e0       	ldi	r31, 0x00	; 0
 ba4:	d8 01       	movw	r26, r16
 ba6:	12 96       	adiw	r26, 0x02	; 2
 ba8:	8d 91       	ld	r24, X+
 baa:	9c 91       	ld	r25, X
 bac:	13 97       	sbiw	r26, 0x03	; 3
 bae:	00 97       	sbiw	r24, 0x00	; 0
 bb0:	19 f0       	breq	.+6      	; 0xbb8 <free+0xf0>
 bb2:	f8 01       	movw	r30, r16
 bb4:	8c 01       	movw	r16, r24
 bb6:	f6 cf       	rjmp	.-20     	; 0xba4 <free+0xdc>
 bb8:	8d 91       	ld	r24, X+
 bba:	9c 91       	ld	r25, X
 bbc:	98 01       	movw	r18, r16
 bbe:	2e 5f       	subi	r18, 0xFE	; 254
 bc0:	3f 4f       	sbci	r19, 0xFF	; 255
 bc2:	82 0f       	add	r24, r18
 bc4:	93 1f       	adc	r25, r19
 bc6:	20 91 c0 02 	lds	r18, 0x02C0
 bca:	30 91 c1 02 	lds	r19, 0x02C1
 bce:	28 17       	cp	r18, r24
 bd0:	39 07       	cpc	r19, r25
 bd2:	69 f4       	brne	.+26     	; 0xbee <free+0x126>
 bd4:	30 97       	sbiw	r30, 0x00	; 0
 bd6:	29 f4       	brne	.+10     	; 0xbe2 <free+0x11a>
 bd8:	10 92 c3 02 	sts	0x02C3, r1
 bdc:	10 92 c2 02 	sts	0x02C2, r1
 be0:	02 c0       	rjmp	.+4      	; 0xbe6 <free+0x11e>
 be2:	13 82       	std	Z+3, r1	; 0x03
 be4:	12 82       	std	Z+2, r1	; 0x02
 be6:	10 93 c1 02 	sts	0x02C1, r17
 bea:	00 93 c0 02 	sts	0x02C0, r16
 bee:	df 91       	pop	r29
 bf0:	cf 91       	pop	r28
 bf2:	1f 91       	pop	r17
 bf4:	0f 91       	pop	r16
 bf6:	08 95       	ret

00000bf8 <memset>:
 bf8:	dc 01       	movw	r26, r24
 bfa:	01 c0       	rjmp	.+2      	; 0xbfe <memset+0x6>
 bfc:	6d 93       	st	X+, r22
 bfe:	41 50       	subi	r20, 0x01	; 1
 c00:	50 40       	sbci	r21, 0x00	; 0
 c02:	e0 f7       	brcc	.-8      	; 0xbfc <memset+0x4>
 c04:	08 95       	ret

00000c06 <_exit>:
 c06:	f8 94       	cli

00000c08 <__stop_program>:
 c08:	ff cf       	rjmp	.-2      	; 0xc08 <__stop_program>
